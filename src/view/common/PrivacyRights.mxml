<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				showCloseButton="true"
				width="355"
				height="180"
				fontFamily="Arial"
				fontSize="11"
				paddingLeft="8"
				paddingRight="8"
				borderColor="#E5E8EA"
				borderAlpha="1"
				borderStyle="solid"
				creationComplete="creationCompleteHandler()"
				title="Privacy Settings">

	<mx:Script>

		<![CDATA[
			import model.DataModel;
			
			import mx.events.CloseEvent;

			private var _microphoneChanged:Boolean=false;
			private var _microphoneSoundTestPassed:Boolean=false;

			private var _cameraChanged:Boolean=false;
			
			private var _devicesAllowed:Boolean=false;

			private var _micCameraRequested:Boolean=false;

			private function creationCompleteHandler():void
			{
				initDevices();
			}

			public function set useMicAndCamera(value:Boolean):void
			{
				_micCameraRequested=value;
				initDevices();
			}

			private function initDevices():void
			{
				if (devicesAdministrativelyProhibited())
				{
					micCamViewStack.selectedChild=adminError;
					trace("Error: User has no rigths to access devices.");
				}
				else
				{
					if (microphoneAvailable())
					{
						var microphone:Microphone=Microphone.getMicrophone();
						if (!DataModel.getInstance().microphone)
						{
							_microphoneChanged=true;
							DataModel.getInstance().microphone=microphone;
						}
						else if (DataModel.getInstance().microphone != microphone)
						{
							_microphoneChanged=true;
							DataModel.getInstance().microphone=microphone;
							trace("Mic device changed.");
						}
						if (DataModel.getInstance().microphone.muted)
						{
							micCamViewStack.selectedChild=privacyNotice;
							_devicesAllowed=false;
							DataModel.getInstance().microphone.addEventListener(StatusEvent.STATUS, microphonePrivacyStatus);
						}

						if (_micCameraRequested)
						{
							if (cameraAvailable())
							{
								var camera:Camera=Camera.getCamera();
								if (!DataModel.getInstance().camera)
								{
									_cameraChanged=true;
									DataModel.getInstance().camera=camera;
								}
								else if (DataModel.getInstance().camera != camera)
								{
									_cameraChanged=true;
									DataModel.getInstance().camera=camera;
									trace("Camera device changed.");
								}
								if (DataModel.getInstance().camera.muted)
								{
									micCamViewStack.selectedChild=privacyNotice;
									_devicesAllowed=false;
									DataModel.getInstance().camera.addEventListener(StatusEvent.STATUS, cameraPrivacyStatus);
								}
							}
							else
							{
								micCamViewStack.selectedChild=cameraNotFoundError;
								trace("Error: No camera was detected.");
							}
						}
					}
					else
					{
						micCamViewStack.selectedChild=micNotFoundError;
						trace("Error: No mic was detected.");
					}
				}
			}

			private function initMicrophone():void
			{
				if (microphoneAvailable())
				{
					DataModel.getInstance().microphone=Microphone.getMicrophone();
					DataModel.getInstance().microphone.addEventListener(StatusEvent.STATUS, microphonePrivacyStatus);
				}
			}

			private function initCamera():void
			{
				if (cameraAvailable())
				{
					DataModel.getInstance().camera=Camera.getCamera();
					DataModel.getInstance().camera.addEventListener(StatusEvent.STATUS, cameraPrivacyStatus);
				}
			}

			private function devicesAdministrativelyProhibited():Boolean
			{
				return (Capabilities.avHardwareDisable);
			}

			private function showPrivacySettings():void
			{
				Security.showSettings(SecurityPanel.PRIVACY);
			}

			public function cameraAvailable():Boolean
			{
				return (Camera.names.length > 0);
			}

			// Will always return true since Flash identifies the system's dummy audio input as a microphone
			public function microphoneAvailable():Boolean
			{
				return (Microphone.names.length > 0);
			}

			public function cameraReady():Boolean
			{
				return (DataModel.getInstance().microphone && !DataModel.getInstance().microphone.muted);
			}

			public function microphoneReady():Boolean
			{
				return (DataModel.getInstance().camera && !DataModel.getInstance().camera.muted);
			}

			private function microphonePrivacyStatus(event:StatusEvent):void
			{
				if (event.code == "Microphone.Muted")
				{
					_devicesAllowed = false;
					privacyRecButton.label="Ok";
				}
				if (event.code == "Microphone.Unmuted")
				{
					_devicesAllowed = true;
					privacyRecButton.label="Record";
				}
			}

			private function cameraPrivacyStatus(event:StatusEvent):void
			{
				if (event.code == "Camera.Muted")
				{
					_devicesAllowed = false;
					privacyRecButton.label="Ok";
				}
				if (event.code == "Camera.Unmuted")
				{
					_devicesAllowed = true;
					privacyRecButton.label="Record";
				}
			}

			private function cancelButtonClickHandler(event:Event):void
			{
				//PopUpManager.removePopUp(this);
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			private function okButtonClickHandler(event:Event):void
			{
				if(!_devicesAllowed)
					showPrivacySettings();
				else{
					DataModel.getInstance().micCamAllowed = _devicesAllowed;
					cancelButtonClickHandler(null);
				}
			}
		]]>
	</mx:Script>

	<mx:ViewStack id="micCamViewStack"
				  width="100%"
				  height="100%">

		<mx:VBox id="micNotFoundError"
				 width="100%">
			<mx:HBox>
				<mx:Text width="100%"
						 text="Your microphone device couldn't be detected. Please make sure the device is correctly plugged and then click 'Retry' or click 'Cancel' to abort the recording."/>
				<mx:Image source="resources/images/microphone_error.png"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Button id="micNotFoundErrorRetryButton"
						   label="Retry"
						   click="initDevices()"/>

				<mx:Button id="micNotFoundErrorCancelButton"
						   label="Cancel"
						   click="cancelButtonClickHandler(event)"/>
			</mx:HBox>
		</mx:VBox>

		<mx:VBox id="cameraNotFoundError"
				 width="100%">
			<mx:HBox width="100%"
					 verticalAlign="middle">
				<mx:Text width="100%"
						 text="Your camera device couldn't be detected. Please make sure the device is correctly plugged and then click 'Retry' or click 'Cancel' to abort the recording."/>
				<mx:Image source="resources/images/webcam_error.png"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Button id="camNotFoundErrorRetryButton"
						   label="Retry"
						   click="initDevices()"/>
				<mx:Button id="camNotFoundErrorCancelButton"
						   label="Cancel"
						   click="cancelButtonClickHandler(event)"/>
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox id="adminError"
				 width="100%">
			<mx:Text width="100%"
					 text="An administrative rule forbids the access to camera and microphone. Please contact your system administrator."/>
			<mx:Button id="adminErrorButton"
					   label="Ok"
					   click="cancelButtonClickHandler(event)"/>
		</mx:VBox>

		<mx:VBox id="privacyNotice"
				 width="100%">
			<mx:HBox width="100%"
					 verticalAlign="middle">
				<mx:Text width="100%"
						 text="Please click 'Allow' when you see this window. Also click on 'Remember' to skip this step the next time you want to record something."/>
				<mx:Image source="resources/images/privacy_settings.png"/>
			</mx:HBox>
			<mx:HBox width="100%"
					 horizontalAlign="left">
				<mx:Button id="privacyRecButton"
						   label="Ok"
						   click="okButtonClickHandler(event)"/>
				<mx:Button id="privacyCancelButton"
						   label="Cancel"
						   click="cancelButtonClickHandler(event)"/>
			</mx:HBox>
		</mx:VBox>

		<mx:VBox id="micSoundTest"
				 width="100%">
			<mx:Text text="This test will ensure that your microphone works as excepted and has the minimum required volume to record an exercise"/>
		</mx:VBox>

	</mx:ViewStack>


</mx:TitleWindow>
