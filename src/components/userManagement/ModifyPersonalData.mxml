<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:skins="skins.*"
		  horizontalAlign="center"
		  width="100%"
		  creationComplete="completeHandler(event)">
	<fx:Script>
		<![CDATA[
			import events.UserEvent;
			
			import model.DataModel;
			
			import mx.controls.ToolTip;
			import mx.events.FlexEvent;
			import mx.managers.ToolTipManager;
			
			import view.common.CustomAlert;
			
			import vo.UserVO;

			public var errorMessageTooltips:Array=new Array;
			public var creationCompleted:Boolean=false;

			[Bindable]
			private var dataModel:DataModel=DataModel.getInstance();

			public function completeHandler(event:FlexEvent):void
			{
				creationCompleted=true;
				resetToInitialStatus();
				focusManager.setFocus(firstname);
			}

			private function modifyPersonalData(event:MouseEvent):void
			{
				if (FieldValidator.validateTextInput(errorMessageTooltips, newEmail, 'EMAIL', FieldValidator.MAIL_PATTERN_LAX, false, false) && 
					FieldValidator.validateTextInput(errorMessageTooltips, newEmailRepeat, 'EMAIL', FieldValidator.MAIL_PATTERN_LAX, false, false))
				{
					var modifiedUserData:UserVO=new UserVO();

					modifiedUserData.firstname=firstname.text;
					modifiedUserData.lastname=lastname.text;
					modifiedUserData.email=newEmail.text;

					new UserEvent(UserEvent.MODIFY_PERSONAL_DATA, null, modifiedUserData).dispatch();
				}
				else
				{
					CustomAlert.error(resourceManager.getString('myResources', 'WRONG_FIELDS_IN_FORM'));
				}
			}

			protected function set onTabChange(value:Boolean):void
			{
				resetToInitialStatus();
			}

			public function set cancelClickHandler(cancelFunction:Function):void
			{
				cancelButton.addEventListener(MouseEvent.CLICK, cancelFunction);
			}

			public function resetToInitialStatus():void
			{
				resetToolTips();
				firstname.text=dataModel.loggedUser.firstname;
				lastname.text=dataModel.loggedUser.lastname;
			}

			public function resetToolTips():void
			{
				if (!creationCompleted)
					return;

				firstname.text='';
				lastname.text='';
				newEmail.text='';
				newEmailRepeat.text='';

				if (errorMessageTooltips.hasOwnProperty(newEmail.name))
					ToolTipManager.destroyToolTip(errorMessageTooltips[newEmail.name] as ToolTip);
				if (errorMessageTooltips.hasOwnProperty(newEmailRepeat.name))
					ToolTipManager.destroyToolTip(errorMessageTooltips[newEmailRepeat.name] as ToolTip);

				errorMessageTooltips=null;
				errorMessageTooltips=new Array();
			}

			public function set onPersonalDataModified(value:Boolean):void
			{
				if (dataModel.userPersonalDataModified == true)
				{
					CustomAlert.info(resourceManager.getString('myResources', 'PERSONAL_DATA_SUCCESSFULLY_MODIFIED'));
					cancelButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					dataModel.userPersonalDataModified=false;
				}
			}
		]]>
	</fx:Script>

	<fx:Binding source="{dataModel.userPersonalDataModified}"
				destination="onPersonalDataModified"/>

	<mx:Form width="100%"
			 styleName="roundedBlueBorderBox"
			 labelWidth="300">
		<mx:FormItem label="{resourceManager.getString('myResources','LABEL_REAL_NAME')}"
					 styleName="boldLabel"
					 required="true">
			<s:HGroup>
				<s:TextInput id="firstname"
							 width="100%"/>
			</s:HGroup>
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('myResources','LABEL_REAL_SURNAME')}"
					 styleName="boldLabel"
					 required="true">
			<s:HGroup>
				<s:TextInput id="lastname"
							 width="100%"/>
			</s:HGroup>
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('myResources','CURRENT_EMAIL')+':'}"
					 styleName="boldLabel">
			<s:Label text="{DataModel.getInstance().loggedUser.email}"/>
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('myResources','NEW_MAIL')+':'}"
					 styleName="boldLabel"
					 required="true">
			<s:HGroup>
				<s:TextInput id="newEmail"
							 maxChars="80"
							 change="FieldValidator.validateTextInput(errorMessageTooltips, newEmail, 'EMAIL',FieldValidator.MAIL_PATTERN_LAX, false, false)"
							 focusOut="FieldValidator.validateTextInput(errorMessageTooltips, newEmail,'EMAIL',FieldValidator.MAIL_PATTERN_LAX, false, false)"/>
			</s:HGroup>
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('myResources','REPEAT_NEW_EMAIL')+':'}"
					 styleName="boldLabel"
					 required="true">
			<s:HGroup>
				<s:TextInput id="newEmailRepeat"
							 maxChars="80"
							 change="FieldValidator.validateTextInput(errorMessageTooltips, newEmailRepeat,'EMAIL',FieldValidator.MAIL_PATTERN_LAX, false, false, false, true, 0, 0, newEmail.text)"
							 focusOut="FieldValidator.validateTextInput(errorMessageTooltips, newEmailRepeat,'EMAIL',FieldValidator.MAIL_PATTERN_LAX, false, false, false, true, 0, 0, newEmail.text)"/>
			</s:HGroup>
		</mx:FormItem>
	</mx:Form>

	<s:HGroup width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle">
		<skins:IconButton id="saveButton"
						  label="{resourceManager.getString('myResources','BUTTON_SAVE_NEWPASS')}"
						  click="modifyPersonalData(event)"
						  skinClass="skins.IconButtonSkin"
						  icon="@Embed('/resources/images/save.png')"/>
		<skins:IconButton id="cancelButton"
						  label="{resourceManager.getString('myResources','BUTTON_CANCEL')}"
						  skinClass="skins.IconButtonSkin"
						  icon="@Embed('/resources/images/cancel.png')"/>
	</s:HGroup>

</s:VGroup>
