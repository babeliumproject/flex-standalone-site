<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:skins="skins.*"
		  width="100%"
		  creationComplete="completeHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import events.UserEvent;
			
			import flash.utils.getQualifiedClassName;
			
			import model.DataModel;
			import model.LocalesAndFlags;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.components.Button;
			import spark.components.Group;
			
			import view.common.CustomAlert;
			import view.common.IconComboBox;
			import view.common.LanguageComboBox;
			
			import vo.UserLanguageVO;

			[Bindable]
			private var dataModel:DataModel=DataModel.getInstance();

			public static const AVAILABLE_LANGUAGES:int=4;

			private var _localesAndFlags:LocalesAndFlags=DataModel.getInstance().localesAndFlags;

			//These variables are used to store the several combobox's info the user might add
			private var motherLanguagesArray:ArrayCollection=new ArrayCollection();
			private var knownLanguagesArray:ArrayCollection=new ArrayCollection();
			private var interestLanguagesArray:ArrayCollection=new ArrayCollection();

			private var motherTongue:MotherLanguageBox;
			private var knownLanguage:LanguageKnowledgeBox;
			private var interestLanguage:LanguageKnowledgeBox;

			private var selectedLanguages:ArrayCollection=new ArrayCollection();

			public function completeHandler(event:FlexEvent):void
			{
				resetToInitialStatus();
			}

			public function currentLanguages():void
			{
				for each (var lang:UserLanguageVO in dataModel.loggedUser.userLanguages)
				{
					if (lang.purpose == 'practice')
					{
						interestLanguage=new LanguageKnowledgeBox();
						interestLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedInterest);
						interestLanguagesBox.addElement(interestLanguage);
						interestLanguagesArray.addItem(interestLanguage);
						interestLanguage.languageCombo.prefixedValue=_localesAndFlags.getLocaleAndFlagGivenLocaleCode(lang.language);
						interestLanguage.levelCombo.prefixedLevel=lang.level - 1;
						if(interestLanguagesArray.length > 1)
							interestLanguage.deleteButtonClickHandler=deleteLanguageKnowledgeComboBox;
					}
					else if (lang.purpose == 'evaluate')
					{
						//Known languages
						if (lang.level < 5)
						{
							knownLanguage=new LanguageKnowledgeBox();
							knownLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedKnown);
							knownLanguagesBox.addElement(knownLanguage);
							knownLanguagesArray.addItem(knownLanguage);
							knownLanguage.deleteButtonClickHandler=deleteLanguageKnowledgeComboBox;
							knownLanguage.languageCombo.prefixedValue=_localesAndFlags.getLocaleAndFlagGivenLocaleCode(lang.language);
							knownLanguage.levelCombo.prefixedLevel=lang.level - 1;
						}
						//Mother tongue
						else
						{
							motherTongue=new MotherLanguageBox();
							motherTongue.addEventListener(FlexEvent.CREATION_COMPLETE, motherLanguageBoxCreated);
							motherLanguagesBox.addElement(motherTongue);
							motherLanguagesArray.addItem(motherTongue);
							motherTongue.languageCombo.prefixedValue=_localesAndFlags.getLocaleAndFlagGivenLocaleCode(lang.language);
							if(motherLanguagesArray.length > 1)
								motherTongue.deleteButtonClickHandler=deleteMotherLanguageBox;
						}
					}
				}
			}

			public function addInitialComboboxes():void
			{
				motherTongue=new MotherLanguageBox();
				motherTongue.addEventListener(FlexEvent.CREATION_COMPLETE, motherLanguageBoxCreated);
				motherLanguagesBox.addElement(motherTongue);
				motherLanguagesArray.addItem(motherTongue);

				knownLanguage=new LanguageKnowledgeBox();
				knownLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedKnown);
				knownLanguagesBox.addElement(knownLanguage);
				knownLanguagesArray.addItem(knownLanguage);

				interestLanguage=new LanguageKnowledgeBox();
				interestLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedInterest);
				interestLanguagesBox.addElement(interestLanguage);
				interestLanguagesArray.addItem(interestLanguage);
			}

			private function motherLanguageBoxCreated(event:FlexEvent):void
			{
				(event.currentTarget as MotherLanguageBox).languageCombo.dataProvider=_localesAndFlags.availableLanguages;
				(event.currentTarget as MotherLanguageBox).languageCombo.name="motherLangs";

				if ((event.currentTarget as MotherLanguageBox).languageCombo.prefixedValue)
					(event.currentTarget as MotherLanguageBox).languageCombo.selectedItem=(event.currentTarget as MotherLanguageBox).languageCombo.prefixedValue;
				else
					(event.currentTarget as MotherLanguageBox).languageCombo.selectedIndex=-1;

				(event.currentTarget as MotherLanguageBox).languageCombo.addEventListener(ListEvent.CHANGE, languageComboBoxChangeHandler);
			}

			private function languageKnowledgeBoxCreatedKnown(event:FlexEvent):void
			{
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.dataProvider=_localesAndFlags.availableLanguages;
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.name="knowLangs";

				if ((event.currentTarget as LanguageKnowledgeBox).languageCombo.prefixedValue)
				{
					(event.currentTarget as LanguageKnowledgeBox).languageCombo.selectedItem=(event.currentTarget as LanguageKnowledgeBox).languageCombo.prefixedValue;
					(event.currentTarget as LanguageKnowledgeBox).levelCombo.selectedIndex=(event.currentTarget as LanguageKnowledgeBox).levelCombo.prefixedLevel;
				}
				else
				{
					(event.currentTarget as LanguageKnowledgeBox).languageCombo.selectedIndex=-1;
				}

				(event.currentTarget as LanguageKnowledgeBox).languageCombo.addEventListener(ListEvent.CHANGE, languageComboBoxChangeHandler);
			}

			private function languageKnowledgeBoxCreatedInterest(event:FlexEvent):void
			{
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.dataProvider=_localesAndFlags.availableLanguages;

				(event.currentTarget as LanguageKnowledgeBox).languageCombo.name="interestLangs";

				if ((event.currentTarget as LanguageKnowledgeBox).languageCombo.prefixedValue)
				{
					(event.currentTarget as LanguageKnowledgeBox).languageCombo.selectedItem=(event.currentTarget as LanguageKnowledgeBox).languageCombo.prefixedValue;
					(event.currentTarget as LanguageKnowledgeBox).levelCombo.selectedIndex=(event.currentTarget as LanguageKnowledgeBox).levelCombo.prefixedLevel;
				}
				else
				{
					(event.currentTarget as LanguageKnowledgeBox).languageCombo.selectedIndex=-1;
				}

				(event.currentTarget as LanguageKnowledgeBox).languageCombo.addEventListener(ListEvent.CHANGE, languageComboBoxChangeHandler);
			}

			public function languageComboBoxChangeHandler(event:ListEvent):void
			{
				var dispatchingItem:IconComboBox=IconComboBox(event.target);

				if (dispatchingItem.selectedIndex != -1)
				{
					switch (dispatchingItem.name)
					{
						case "knownLangs":
							for each (var olcb:LanguageKnowledgeBox in knownLanguagesArray)
							{
								if (olcb.languageCombo.selectedIndex != -1 && olcb.languageCombo != dispatchingItem && olcb.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
								{
									olcb.languageCombo.selectedIndex=-1;
								}
							}
							break;

						case "interestLangs":
							for each (var ilcb:LanguageKnowledgeBox in interestLanguagesArray)
							{
								if (ilcb.languageCombo.selectedIndex != -1 && ilcb.languageCombo != dispatchingItem && ilcb.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
								{
									ilcb.languageCombo.selectedIndex=-1;
								}
							}
							break;

						case "motherLangs":

							for each (var olcbm:LanguageKnowledgeBox in knownLanguagesArray)
							{
								if (olcbm.languageCombo.selectedIndex != -1 && olcbm.languageCombo != dispatchingItem && olcbm.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
								{
									olcbm.languageCombo.selectedIndex=-1;
								}
							}
							for each (var ilcbm:LanguageKnowledgeBox in interestLanguagesArray)
							{
								if (ilcbm.languageCombo.selectedIndex != -1 && ilcbm.languageCombo != dispatchingItem && ilcbm.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
								{
									ilcbm.languageCombo.selectedIndex=-1;
								}
							}
							break;
					}
					for each (var mlcb:MotherLanguageBox in motherLanguagesArray)
					{
						if (mlcb.languageCombo.selectedIndex != -1 && mlcb.languageCombo != dispatchingItem && mlcb.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
						{
							mlcb.languageCombo.selectedIndex=-1;
						}
					}
				}
			}

			protected function addAnotherKnownLang_clickHandler(event:MouseEvent):void
			{
				if (knownLanguagesArray.length < SignUpForm.AVAILABLE_LANGUAGES - 1)
				{
					var otherKnownLanguage:LanguageKnowledgeBox=new LanguageKnowledgeBox();
					otherKnownLanguage.deleteButtonClickHandler=deleteLanguageKnowledgeComboBox;
					otherKnownLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedKnown);
					knownLanguagesBox.addElement(otherKnownLanguage);
					knownLanguagesArray.addItem(otherKnownLanguage);
				}
			}

			protected function addAnotherInterestLang_clickHandler(event:MouseEvent):void
			{
				if (interestLanguagesArray.length < SignUpForm.AVAILABLE_LANGUAGES - 1)
				{
					var otherInterestLanguage:LanguageKnowledgeBox=new LanguageKnowledgeBox();
					otherInterestLanguage.deleteButtonClickHandler=deleteLanguageKnowledgeComboBox;
					otherInterestLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedInterest);
					interestLanguagesBox.addElement(otherInterestLanguage);
					interestLanguagesArray.addItem(otherInterestLanguage);
				}
			}

			protected function addAnotherMotherLang_clickHandler(event:MouseEvent):void
			{
				if (motherLanguagesArray.length < SignUpForm.AVAILABLE_LANGUAGES - 1)
				{
					var otherMotherLanguage:MotherLanguageBox=new MotherLanguageBox();
					otherMotherLanguage.deleteButtonClickHandler=deleteMotherLanguageBox;
					otherMotherLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, motherLanguageBoxCreated);
					motherLanguagesBox.addElement(otherMotherLanguage);
					motherLanguagesArray.addItem(otherMotherLanguage);
				}
			}

			private function deleteLanguageKnowledgeComboBox(event:MouseEvent):void
			{
				var container:Group=((event.currentTarget).parent).parent;
				container.removeElement(((event.currentTarget).parent as LanguageKnowledgeBox));
				var index:uint=0;
				if ((index=interestLanguagesArray.getItemIndex((event.currentTarget).parent as LanguageKnowledgeBox)) != -1)
				{
					interestLanguagesArray.removeItemAt(index);
				}
				else if ((index=knownLanguagesArray.getItemIndex((event.currentTarget).parent as LanguageKnowledgeBox)) != -1)
				{
					knownLanguagesArray.removeItemAt(index);
				}
			}

			private function deleteMotherLanguageBox(event:MouseEvent):void
			{
				var container:Group=((event.currentTarget).parent).parent;
				container.removeElement(((event.currentTarget).parent as MotherLanguageBox));
				var index:uint=0;
				if ((index=motherLanguagesArray.getItemIndex((event.currentTarget).parent as MotherLanguageBox)) != -1)
				{
					motherLanguagesArray.removeItemAt(index);
				}
			}

			public function resetToInitialStatus():void
			{
				motherLanguagesBox.removeAllElements();
				knownLanguagesBox.removeAllElements();
				interestLanguagesBox.removeAllElements();
				motherLanguagesArray.removeAll();
				knownLanguagesArray.removeAll();
				interestLanguagesArray.removeAll();

				currentLanguages();
			}

			protected function set onTabChange(value:Boolean):void
			{
				resetToInitialStatus();
			}

			protected function saveChangesClickHandler(event:MouseEvent):void
			{
				var mLangCollection:ArrayCollection=new ArrayCollection();
				var kLangCollection:ArrayCollection=new ArrayCollection();
				var iLangCollection:ArrayCollection=new ArrayCollection();

				for each (var mLang:MotherLanguageBox in motherLanguagesArray)
				{
					if (mLang.languageCombo.selectedIndex != -1)
						mLangCollection.addItem(new UserLanguageVO(0, mLang.languageCombo.selectedItem.code, 7, DataModel.PURPOSE_EVALUATE, 0));
				}
				for each (var kLang:LanguageKnowledgeBox in knownLanguagesArray)
				{
					if (kLang.languageCombo.selectedIndex != -1)
						kLangCollection.addItem(new UserLanguageVO(0, kLang.languageCombo.selectedItem.code, kLang.levelCombo.selectedIndex + 1, DataModel.PURPOSE_EVALUATE, 0));
				}
				for each (var iLang:LanguageKnowledgeBox in interestLanguagesArray)
				{
					if (iLang.languageCombo.selectedIndex != -1)
						iLangCollection.addItem(new UserLanguageVO(0, iLang.languageCombo.selectedItem.code, iLang.levelCombo.selectedIndex + 1, DataModel.PURPOSE_PRACTICE, 0));
				}

				var mLangArray:Array=mLangCollection.toArray();
				var kLangArray:Array=kLangCollection.toArray();
				var iLangArray:Array=iLangCollection.toArray();
				if (mLangArray.length > 0 && iLangArray.length > 0)
				{
					var languages:Array=mLangArray.concat(kLangArray, iLangArray);

					new UserEvent(UserEvent.MODIFY_PREFERRED_LANGUAGES, languages).dispatch();

				}
				else
				{
					CustomAlert.error(resourceManager.getString('myResources', 'MOTHER_TONGUE_PRACTICE_LANGUAGE_REQUIRED'));
				}
			}

			public function set cancelClickHandler(cancelFunction:Function):void
			{
				cancelButton.addEventListener(MouseEvent.CLICK, cancelFunction);
			}

			public function set onLanguagesModified(value:Boolean):void
			{
				if (dataModel.userPreferredLanguagesModified == true)
				{
					CustomAlert.info(resourceManager.getString('myResources', 'LANGUAGES_SUCCESSFULLY_MODIFIED'));
					cancelButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					dataModel.userPreferredLanguagesModified = false;
				}
			}
		]]>
	</fx:Script>

	<fx:Binding source="{dataModel.userPreferredLanguagesModified}"
				destination="onLanguagesModified"/>


	<s:HGroup verticalAlign="middle">
		<s:Label text="{resourceManager.getString('myResources','FIRST_LANGUAGE')}"
				 styleName="boldLabel"/>
		<skins:IconButton id="addAnotherMotherLang"
						  click="addAnotherMotherLang_clickHandler(event)"
						  label="{resourceManager.getString('myResources','ADD_ANOTHER')}"
						  styleName="addLanguageLinkButton"/>
	</s:HGroup>
	<s:VGroup id="motherLanguagesBox"
			  paddingLeft="16"/>

	<s:HGroup verticalAlign="middle">
		<s:Label text="{resourceManager.getString('myResources','OTHER_LANGUAGES')}"
				 styleName="boldLabel"/>
		<skins:IconButton id="addAnotherKnownLang"
						  click="addAnotherKnownLang_clickHandler(event)"
						  label="{resourceManager.getString('myResources','ADD_ANOTHER')}"
						  styleName="addLanguageLinkButton"/>
	</s:HGroup>
	<s:VGroup id="knownLanguagesBox"
			  paddingLeft="16"/>

	<s:HGroup verticalAlign="middle">
		<s:Label text="{resourceManager.getString('myResources','INTEREST_LANGUAGES')}"
				 styleName="boldLabel"/>
		<skins:IconButton id="addAnotherInterestLang"
						  click="addAnotherInterestLang_clickHandler(event)"
						  label="{resourceManager.getString('myResources','ADD_ANOTHER')}"
						  styleName="addLanguageLinkButton"/>
	</s:HGroup>
	<s:VGroup id="interestLanguagesBox"
			  paddingLeft="16"/>

	<s:HGroup width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle">
		<skins:IconButton id="saveButton"
						  label="{resourceManager.getString('myResources','SAVE_NEWPASS')}"
						  click="saveChangesClickHandler(event)"
						  skinClass="skins.IconButtonSkin"
						  icon="@Embed('/resources/images/save.png')"/>

		<skins:IconButton id="cancelButton"
						  label="{resourceManager.getString('myResources','CANCEL')}"
						  skinClass="skins.IconButtonSkin"
						  icon="@Embed('/resources/images/cancel.png')"/>

	</s:HGroup>


</s:VGroup>
