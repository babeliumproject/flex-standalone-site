<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					label="{resourceManager.getString('myResources', 'MACHINE_EVALUATION')}"
					width="100%"
					creationComplete="init()">

	<fx:Script>
		<![CDATA[
			import modules.assessment.event.EvaluationEvent;

			import model.DataModel;

			import vo.EvaluationVO;

			public function init():void
			{
				//setVisible(false);
				exerciseTranscriptionLabel.text="";
				responseTranscriptionLabel.text="";
				scoreLabel.text="";
				errorLabel.text="";

				autoevalViewstack.selectedChild=evaluationPanelNavContent;
			}

			public function setResponseID(responseID:int):void
			{
				if (exerciseTranscriptionLabel)
					exerciseTranscriptionLabel.text="";
				if (responseTranscriptionLabel)
					responseTranscriptionLabel.text="";
				if (scoreLabel)
					scoreLabel.text="";
				var requestData:EvaluationVO=new EvaluationVO();
				requestData.responseId=responseID;
				new EvaluationEvent(EvaluationEvent.AUTOMATIC_EVAL_RESULTS, requestData).dispatch();
			}

			private function set onResultReceived(val:Boolean):void
			{
				if (DataModel.getInstance().autoevaluationDone)
				{
					DataModel.getInstance().autoevaluationDone=false;

					if (evaluationPanel != null)
						autoevalViewstack.selectedChild=evaluationPanelNavContent;
					//setVisible(true);

					var evaluation:Evaluation=DataModel.getInstance().autoevaluationResults;
					var responseText:String=evaluation.responseText;
					var maxScore:Number=evaluation.maxScore;
					var minScore:Number=evaluation.minScore;

					var exerHtmlText:String="";
					var respHtmlText:String="";
					var color:String=null;
					var lastColor:String=null;
					var lastIndex:int=0;

					var unknown:Boolean=false;

					for each (var item:EvaluationItem in evaluation.words)
					{
						if (item.rating == "right")
							color="#04B404";
						else if (item.rating == "medium")
							color="#FF8000";
						else if (item.rating == "wrong")
							color="#FF0000";
						else if (item.rating == "unknown")
							color="#000000";

						if (color != lastColor)
						{
							if (lastColor != null)
								exerHtmlText+="</font> ";
							exerHtmlText+="<font color=\"" + color + "\">" + item.word;
						}
						else
							exerHtmlText+=" " + item.word;

						if (color == "#04B404")
						{
							if (unknown)
								respHtmlText+="<font color=\"#000000\">" + responseText.substring(lastIndex, item.startIndex) + "</font>";
							else
								respHtmlText+="<font color=\"#FF0000\">" + responseText.substring(lastIndex, item.startIndex) + "</font>";
							respHtmlText+="<font color=\"" + color + "\">" + responseText.substring(item.startIndex, item.startIndex + item.word.length) + "</font>"
							lastIndex=item.startIndex + item.word.length;
							unknown=false;
						}
						else if (color == "#000000")
							unknown=true;

						lastColor=color;
					}

					if (unknown)
						respHtmlText+="<font color=\"#000000\">" + responseText.substring(lastIndex) + "</font>";
					else
						respHtmlText+="<font color=\"#FF0000\">" + responseText.substring(lastIndex) + "</font>";

					var scoreHtmlText:String="";
					if (minScore < 60)
						scoreHtmlText+="<font color=\"#FF0000\">" + minScore.toString() + "%</font>";
					else if (minScore < 90)
						scoreHtmlText+="<font color=\"#FF8000\">" + minScore.toString() + "%</font>";
					else
						scoreHtmlText+="<font color=\"#04B404\">" + minScore.toString() + "%</font>";

					if (minScore != maxScore)
					{
						scoreHtmlText+=" - ";
						if (maxScore < 60)
							scoreHtmlText+="<font color=\"#FF0000\">" + maxScore.toString() + "%</font>";
						else if (maxScore < 90)
							scoreHtmlText+="<font color=\"#FF8000\">" + maxScore.toString() + "%</font>";
						else
							scoreHtmlText+="<font color=\"#04B404\">" + maxScore.toString() + "%</font>";
					}

					exerciseTranscriptionLabel.htmlText=exerHtmlText;
					responseTranscriptionLabel.htmlText=respHtmlText;
					scoreLabel.htmlText=scoreHtmlText;
				}
				//else
				//setVisible(false)
			}

			/*private function set setNotVisible(val:Boolean):void {
			   DataModel.getInstance().autoevaluationAvailable = true;
			   setVisible(false);
			 }*/

			private function set setError(val:Boolean):void
			{
				if (DataModel.getInstance().autoevaluationError != null)
				{

					if (errorPanel != null)
						autoevalViewstack.selectedChild=errorPanelNavContent;
					//setVisible(true);

					errorLabel.text=DataModel.getInstance().autoevaluationError;
					DataModel.getInstance().autoevaluationError="";
				}
				else
				{
					//setVisible(false);
				}
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().autoevaluationDone}"
				destination="this.onResultReceived"/>
	<fx:Binding source="{DataModel.getInstance().autoevaluationError != null}"
				destination="this.setError"/>

	<mx:ViewStack width="100%"
				  creationPolicy="all"
				  id="autoevalViewstack">
		<s:NavigatorContent id="evaluationPanelNavContent">
			<s:HGroup id="evaluationPanel"
					  width="100%"
					  height="100%"
					  styleName="padding10AllSidesBox">
				<s:VGroup width="30%"
						  height="100%"
						  styleName="padding10AllSidesBox"
						  verticalAlign="middle">
					<s:Label text="{resourceManager.getString('myResources','EXERCISE_TRANSCRIPTION')}"/>
					<s:Label text="{resourceManager.getString('myResources','YOUR_TRANSCRIPTION')}"/>
					<s:Label text="{resourceManager.getString('myResources','AUTOEVAL_SCORE')}"/>
				</s:VGroup>
				<s:VGroup width="70%"
						  height="100%"
						  styleName="padding10AllSidesBox"
						  verticalAlign="middle">
					<mx:Text id="exerciseTranscriptionLabel"/>
					<mx:Text id="responseTranscriptionLabel"
							 styleName="errorLabel"/>
					<mx:Text id="scoreLabel"/>
				</s:VGroup>
			</s:HGroup>
		</s:NavigatorContent>

		<s:NavigatorContent id="errorPanelNavContent">
			<s:HGroup id="errorPanel"
					  width="100%"
					  height="100%"
					  styleName="padding10AllSidesBox"
					  horizontalAlign="center"
					  verticalAlign="middle">
				<s:Label id="errorLabel"
						 textAlign="center"
						 text="{resourceManager.getString('myResources','AUTOEVAL_ERROR')}"/>
			</s:HGroup>
		</s:NavigatorContent>

	</mx:ViewStack>
</s:NavigatorContent>
