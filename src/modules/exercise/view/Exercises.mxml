<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="modules.exercise.view.*"
		  xmlns:common="view.common.*"
		  xmlns:videoPlayer="components.videoPlayer.*"
		  xmlns:babelia="components.videoPlayer.controls.babelia.*"
		  xmlns:skins="skins.*"
		  paddingBottom="16"
		  paddingLeft="16"
		  paddingRight="16"
		  paddingTop="16"
		  width="100%"
		  creationComplete="onComplete()"
		  implements="modules.IGroupInterface"
		  xmlns:view1="modules.create.view.*"
		  xmlns:components="components.*">

	<fx:Script>
		<![CDATA[
			import components.videoPlayer.events.VideoPlayerEvent;
			import components.videoPlayer.events.babelia.RecordingEvent;
			import components.videoPlayer.events.babelia.StreamEvent;
			
			import control.URLManager;
			
			import events.RecordingEndOptionEvent;
			import events.UserVideoHistoryEvent;
			
			import flash.utils.getQualifiedClassName;
			
			import model.DataModel;
			
			import modules.IModuleInterface;
			import modules.exercise.event.ExerciseEvent;
			import modules.exercise.event.ResponseEvent;
			import modules.subtitle.event.SubtitleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.ICollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.managers.BrowserManager;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.globalization.SortingCollator;
			
			import view.common.*;
			
			import vo.CreditHistoryVO;
			import vo.CueObject;
			import vo.ExerciseRoleVO;
			import vo.ExerciseVO;
			import vo.ResponseVO;
			import vo.UserVideoHistoryVO;

			private const SELECT_EXERCISE:String="SELECT_EXERCISE";

			private var _creationComplete:Boolean=false;



			[Bindable]
			private var _currentExercise:Object;
			[Bindable]
			private var _exerciseTitle:String;
			[Bindable]
			private var _exerciseSelected:Boolean;
			[Bindable]
			private var _locales:Array;
			[Bindable]
			private var _characterNames:ArrayCollection;
			private var _roles:Object;
			private var _mediaId:int;

			private var _exerciseStartedPlaying:Boolean=false;

			[Bindable]
			private var _model:DataModel=DataModel.getInstance();


			[Bindable]
			private var _rolesReady:Boolean;

			private var _selectedRole:String;
			private var _recordedFilename:String;

			/**
			 * Options menus
			 **/
			private var _evaluationRequest:EvaluationRequest;

			protected var _currentMediaData:Object;
			protected var _primaryMediaData:Object;
			protected var _modelMediaData:Object;
			protected var _recordMediaData:Object;
			protected var _currentCaptions:Object;

			protected var _currentTimeMarkers:Object;
			
			public var _videoPlayerReady:Boolean=false;

			[Embed('/resources/images/button_abort.png')]
			[Bindable]
			private var abortIcon:Class;

			[Embed('/resources/images/button_rec.png')]
			[Bindable]
			private var recIcon:Class;

			/**
			 * On creation complete
			 **/
			private function onComplete():void
			{
				setupVideoPlayer();
				setupResponseOptions();
				if (_exerciseTitle == null)
					_exerciseTitle=resourceManager.getString('myResources', 'EXERCISE_TITLE');
				_creationComplete=true;
			}

			/**
			 * Setup for videoplayer
			 **/
			private function setupVideoPlayer():void
			{
				VP.addEventListener(VideoPlayerEvent.CONNECTED, onVideoPlayerReady, false, 0, true);
				VP.addEventListener(VideoPlayerEvent.VIDEO_STARTED_PLAYING, onVideoStartedPlaying, false, 0, true);
				VP.addEventListener(RecordingEvent.END, onRecordingEnd, false, 0, true);
				VP.addEventListener(RecordingEvent.ABORTED, onRecordingAborted, false, 0, true);
				VP.addEventListener(RecordingEvent.CAM_DENIED, onCamAccessDenied, false, 0, true);
				VP.addEventListener(RecordingEvent.MIC_DENIED, onMicAccessDenied, false, 0, true);
			}

			private function setupResponseOptions():void
			{
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.VIEW_BOTH, onWatchExerciseAndResponse, false, 0, true);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.RECORD_AGAIN, onRecordAgain, false, 0, true);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.DISCARD_RESPONSE, onAbortRecording, false, 0, true);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.SAVE_RESPONSE, onSaveResponse, false, 0, true);
			}

			private function onVideoPlayerReady(e:VideoPlayerEvent):void
			{
				_videoPlayerReady=true;
				VP.stopVideo();
			}

			private function set onRolesRetrieved(value:Boolean):void
			{
				_roles=null;
				_characterNames=new ArrayCollection();
				
				chooseRoleBox.visible=false;
				chooseRoleBox.includeInLayout=false;
				
				if (DataModel.getInstance().availableExerciseRoles)
				{
					_roles=DataModel.getInstance().availableExerciseRoles;
					var code:int=0;
					for (var role:String in _roles){
						if(role != "NPC"){
							code++;
							_characterNames.addItem({'code': code, 'label': role});
						}
					}
				}
				var numVoices:int=_characterNames.length;
				trace("Number of voices found in subtitles: " + numVoices);
				if (!numVoices)
				{	
					availableRoles.dataProvider=null;
					_rolesReady=false;
				}
				else
				{
					availableRoles.dataProvider=_characterNames;
					_rolesReady=true;
					if (numVoices > 1)
					{
						chooseRoleBox.visible=true;
						chooseRoleBox.includeInLayout=true;
					}
				}
			}

			private function hideSelectedExercise():void
			{
				//videoPlayerAndRecordingControls.includeInLayout=false;
				//videoPlayerAndRecordingControls.visible=false;
				recordingEndOptions.includeInLayout=false;
				recordingEndOptions.visible=false;
				if (DataModel.getInstance().isLoggedIn)
				{
					panelSelectedExercise.visible=true;
					panelSelectedExercise.includeInLayout=true;
					guestEditWarningBox.visible=false;
					guestEditWarningBox.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.visible=true;
					guestEditWarningBox.includeInLayout=true;
					panelSelectedExercise.visible=false;
					panelSelectedExercise.includeInLayout=false;
				}
				_exerciseSelected=false;
			}

			private function set exerciseDataRetrieved(value:Boolean):void
			{
				var params:Object;
				if (_model.watchExerciseData)
				{
					_currentExercise=_model.watchExerciseData;

					_exerciseTitle=_currentExercise.title;
					_primaryMediaData=null;

					if (_currentExercise.hasOwnProperty('media'))
					{
						if (getQualifiedClassName(_currentExercise.media) == 'Array')
						{
							var media:Array=_currentExercise.media;
							for each (var item:Object in media)
							{
								var level:int=parseInt(item.level);
								if (level == 1 && !_primaryMediaData)
								{
									_primaryMediaData=item;
									continue;
								}
								if (level == 2 && !_modelMediaData)
								{
									_modelMediaData=item;
									continue;
								}
							}
						}
						else if (getQualifiedClassName(_currentExercise.media) == 'Object')
						{
							_primaryMediaData=_currentExercise.media;
						}
					}
					_currentMediaData=_primaryMediaData;

					//Load the primary media file
					params=new Object();
					params.netConnectionUrl=_currentMediaData.netConnectionUrl || null;
					params.mediaUrl=_currentMediaData.mediaUrl || null;

					VP.loadVideoByUrl(params);

					// Need to retrieve again exercise's information
					_rolesReady=false;
					_exerciseSelected=true;


					ratingShareReport.exerciseData=_currentExercise as ExerciseVO;

					params=new Object();
					params.mediaid=_currentMediaData.id;
					new SubtitleEvent(SubtitleEvent.GET_EXERCISE_SUBLINES, params).dispatch();

				}
				else
				{
					//TODO
				}
			}

			public function set exerciseSubtitlesRetrieved(value:Boolean):void
			{
				if (DataModel.getInstance().availableSubtitleLines)
				{
					_currentCaptions=DataModel.getInstance().availableSubtitleLines;
					VP.setCaptions(_currentCaptions);
				}
			}

			/**
			 * On start recording clicked
			 **/
			private function onStartRecordingClicked(e:MouseEvent):void
			{
				panelSelectedExercise.includeInLayout=false;
				panelSelectedExercise.visible=false;
				recordingEndOptions.includeInLayout=true;
				recordingEndOptions.visible=true;

				checkRoleSelected();
			}
			
			private function checkRoleSelected():void{
				if (availableRoles.selectedIndex > -1)
				{
					var item:Object=availableRoles.selectedItem;
					_selectedRole=String(item.label);
					requestRecordingSlot();
				}
			}

			protected function requestRecordingSlot():void
			{
				new ExerciseEvent(ExerciseEvent.REQUEST_RECORDING_SLOT).dispatch();
			}

			private function prepareRecording():void
			{
				// Disable events and tabs
				//DataModel.getInstance().recordingExercise=true;

				//Save statistical data
				//statisticRecAttempt();

				var media:Object=new Object();
				media.playbackMedia=_currentMediaData;
				media.recordMedia=_recordMediaData;

				var useWebcam:Boolean=!micOnly.selected;

				_currentTimeMarkers = _roles[_selectedRole];

				trace("preparerecording: "+ObjectUtil.toString(media));
				
				VP.recordVideo(media, !micOnly.selected, _currentTimeMarkers);
			}

			protected function set recordMediaSlotHandler(value:Boolean):void
			{
				_recordMediaData=null;
				if (_model.recordMediaData)
				{
					var tmp:Object=_model.recordMediaData;
					_recordMediaData=new Object();
					_recordMediaData.netConnectionUrl=tmp.netConnectionUrl || null;
					_recordMediaData.mediaUrl=tmp.mediaUrl || null;
					_recordMediaData.maxDuration=tmp.maxDuration || 0;
					trace("Rec. media slot: "+ObjectUtil.toString(_recordMediaData));
					prepareRecording();
				}
			}

			private function statisticRecAttempt():void
			{
				var subtitlesAreUsed:Boolean=VP.displayCaptions;
				var subtitleId:int=subtitleId;
				var roleId:int=0;
				for each (var role:ExerciseRoleVO in _roles)
				{
					if (role.characterName == _selectedRole)
					{
						roleId=role.id;
						break;
					}
				}
				var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, true, 0, '', subtitlesAreUsed, subtitleId, roleId);
				new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_ATTEMPT_RESPONSE, videoData).dispatch();
			}

			/**
			 * On recording end successfully
			 **/
			private function onRecordingEnd(e:RecordingEvent):void
			{
				// Store last recorded response's filename
				_recordedFilename=e.fileName;

				DataModel.getInstance().recordingExercise=false;

				// Set the videoplayer to playback both the exercise and the last response.


				var parallelmedia:Object=new Object();
				
				parallelmedia.leftMedia=_currentMediaData;
				parallelmedia.rightMedia=_recordMediaData;

				VP.loadVideoByUrl(parallelmedia, _currentTimeMarkers);
			}

			/**
			 * On recording aborted
			 **/
			private function onRecordingAborted(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}

			/**
			 * On cam access denied
			 **/
			private function onCamAccessDenied(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}

			/**
			 * On mic access denied
			 **/
			private function onMicAccessDenied(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}

			private function recordingError():void
			{
				DataModel.getInstance().recordingExercise=false;

				//The video recorder should handle the following: unattach user devices, close rightside streams,
				//restore appearence, enable controls, restore autoplay
				VP.loadVideoByUrl(_currentMediaData);

				recordingEndOptions.includeInLayout=false;
				recordingEndOptions.visible=false;
				if (DataModel.getInstance().isLoggedIn)
				{
					panelSelectedExercise.visible=true;
					panelSelectedExercise.includeInLayout=true;
					guestEditWarningBox.visible=false;
					guestEditWarningBox.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.visible=true;
					guestEditWarningBox.includeInLayout=true;
					panelSelectedExercise.visible=false;
					panelSelectedExercise.includeInLayout=false;
				}

			}

			private function resetComponent():void
			{
				VP.resetComponent();

				_exerciseTitle=resourceManager.getString('myResources', 'EXERCISE_TITLE');
				_currentExercise=null; // Reset current exercise

				hideSelectedExercise(); // Information of selected exercise


				//Remove the current exercise's info
				ratingShareReport.exerciseData=null;
			}

			// Watch both
			private function onWatchExerciseAndResponse(e:Event):void
			{
				var parallelmedia:Object=new Object();
				
				parallelmedia.leftMedia=_currentMediaData;
				parallelmedia.rightMedia=_recordMediaData;
				
				VP.loadVideoByUrl(parallelmedia, _currentTimeMarkers);
			}

			// Watch response
			private function onWatchResponse(e:Event):void
			{
				var media:Object=_recordMediaData;
				VP.loadVideoByUrl(media);
			}

			// Record again
			private function onRecordAgain(e:Event):void
			{
				checkRoleSelected();
			}

			private function onAbortRecording(e:Event):void
			{
				recordingError();
			}

			// Save response
			private function onSaveResponse(e:Event):void
			{

				var userCredCount:int=DataModel.getInstance().loggedUser.creditCount;
				var credsEvalRequest:int=DataModel.getInstance().prefDic['evaluationRequestCredits'];
				if (userCredCount - credsEvalRequest >= 0)
				{
					//This must be changed by some function that takes a snapshot of the Response video
					var responseThumbnail:String="nothumb.png";
					var subtitleId:int=subtitleId;
					var responseData:ResponseVO=new ResponseVO(0, _currentExercise.id, _recordedFilename, true, responseThumbnail, "Red5", VP.duration, (new Date().toString()), 0, _selectedRole, 0, subtitleId);

					//Third, save response				
					new ResponseEvent(ResponseEvent.SAVE_RESPONSE, responseData).dispatch();

					recordingEndOptions.includeInLayout=false;
					recordingEndOptions.visible=false;
					panelSelectedExercise.includeInLayout=true;
					panelSelectedExercise.visible=true;


					resetComponent();
				}
				else
				{
					CustomAlert.error(resourceManager.getString('myResources', 'ERROR_INSUFICCIENT_CREDITS'));
				}
			}

			private function set statisticRecSave(value:Boolean):void
			{
				if (DataModel.getInstance().savedResponseId)
				{
					var subtitlesAreUsed:Boolean=VP.displayCaptions;
					var subtitleId:int=subtitleId;
					var roleId:int=0;
					var responseId:int=DataModel.getInstance().savedResponseId;
					for each (var role:ExerciseRoleVO in _roles)
					{
						if (role.characterName == _selectedRole)
						{
							roleId=role.id;
							break;
						}
					}
					var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, false, responseId, '', subtitlesAreUsed, subtitleId, roleId);
					new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_SAVE_RESPONSE, videoData).dispatch();
				}
			}

			private function onVideoStartedPlaying(e:VideoPlayerEvent):void
			{
				_exerciseStartedPlaying=true;
				if (DataModel.getInstance().isLoggedIn && _rolesReady && _exerciseStartedPlaying)
				{
					_exerciseStartedPlaying=false;
					var subtitlesAreUsed:Boolean=VP.displayCaptions;
					var subtitleId:int=subtitleId;
					var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, false, 0, '', subtitlesAreUsed, subtitleId, 0);
					if (_mediaId > 0 && subtitleId > 0)
						new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_EXERCISE_WATCH, videoData).dispatch();
				}
			}



			public function set onLogout(value:Boolean):void
			{
				if (DataModel.getInstance().isLoggedIn == false)
				{
					guestEditWarningBox.includeInLayout=true;
					guestEditWarningBox.visible=true;
					panelSelectedExercise.includeInLayout=false;
					panelSelectedExercise.visible=false;
					recordingEndOptions.visible=false;
					recordingEndOptions.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.includeInLayout=false;
					guestEditWarningBox.visible=false;
					panelSelectedExercise.includeInLayout=true;
					panelSelectedExercise.visible=true;
					recordingEndOptions.visible=false;
					recordingEndOptions.includeInLayout=false;
				}
			}

			public function resetGroup():void
			{
				resetComponent();
				VP.resetComponent();
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().watchExerciseDataRetrieved}"
				destination="this.exerciseDataRetrieved"/>
	<fx:Binding source="{DataModel.getInstance().availableSubtitleLinesRetrieved}"
				destination="this.exerciseSubtitlesRetrieved"/>
	<fx:Binding source="{DataModel.getInstance().availableExerciseRolesRetrieved}"
				destination="this.onRolesRetrieved"/>
	<fx:Binding source="{_model.recordMediaDataRetrieved}"
				destination="recordMediaSlotHandler"/>

	<fx:Binding source="{DataModel.getInstance().savedResponseRetrieved}"
				destination="statisticRecSave"/>

	<fx:Binding source="{DataModel.getInstance().isLoggedIn}"
				destination="onLogout"/>

	<s:Label id="exerciseTitle"
			 text="{_exerciseTitle}"
			 width="{VP.width}"
			 styleName="h2"/>

	<s:HGroup width="100%">

		<s:VGroup id="videoPlayerAndRecordingControls"
				  width="100%">
			<videoPlayer:VideoRecorder id="VP"
									   layoutDirection="ltr"
									   autoPlay="true"
									   skinUrl="resources/videoPlayer/skin/white.xml"
									   seek="true"
									   displayCaptions="true"
									   autoScale="false"
									   subtitlingControls="false"
									   width="640"
									   height="360"
									   controlsEnabled="{_exerciseSelected}"/>

			<s:VGroup id="guestEditWarningBox"
					  width="{VP.width}"
					  paddingTop="5"
					  paddingBottom="20">

				<s:Label text="{resourceManager.getString('myResources', 'RECORDING_SETTINGS')? resourceManager.getString('myResources', 'RECORDING_SETTINGS') : 'Recording settings'}"
						 styleName="h5"/>

				<s:HGroup width="100%"
						  verticalAlign="middle">
					<mx:Image id="groupLogo"
							  source="resources/images/about_section_title_icon.png"
							  height="30"
							  width="30"/>
					<mx:Text htmlText="{resourceManager.getString('myResources','GUEST_RECORD_WARNING')}"
							 width="100%"
							 fontSize="14"/>
				</s:HGroup>
			</s:VGroup>

			<!-- Selected Exercise Panel -->
			<s:BorderContainer id="panelSelectedExercise"
							   includeInLayout="false"
							   visible="false"
							   styleName="lightBorderContainer"
							   width="{VP.width}">
				<s:layout>
					<s:VerticalLayout paddingTop="8"
									  paddingLeft="8"
									  paddingRight="8"
									  paddingBottom="8"
									  verticalAlign="middle"/>
				</s:layout>

				<s:Label text="{resourceManager.getString('myResources', 'RECORDING_SETTINGS')? resourceManager.getString('myResources', 'RECORDING_SETTINGS') : 'Recording settings'}"
						 styleName="h5"/>

				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke weight="{UIComponent(parent).getStyle('borderWeight')}"
											alpha="{UIComponent(parent).getStyle('borderAlpha')}"
											color="{UIComponent(parent).getStyle('borderColor')}"/>
					</s:stroke>
				</s:Line>

				<s:HGroup width="100%"
						  verticalAlign="middle">
					<s:VGroup width="100%"
							  verticalAlign="middle">
						<s:HGroup verticalAlign="middle" id="chooseRoleBox">
							<s:Label text="{resourceManager.getString('myResources', 'CHOOSE_ROLE')}"/>
							<components:EnhancedDropDownList id="availableRoles"
															 skinClass="skins.BootstrapDropDownList"
															 cornerRadius="3"
															 borderColor="0xcccccc"
															 sortItems="true"
															 requireSelection="true"/>
						</s:HGroup>

						<s:HGroup verticalAlign="middle">
							<s:Label text="{resourceManager.getString('myResources', 'CHOOSE_REC_METHOD')}"/>
							<s:RadioButton id="micOnly"
										   selected="true"
										   groupName="recMode"
										   label="{resourceManager.getString('myResources', 'OPTION_MIC_ONLY')}"/>
							<s:RadioButton id="micAndCam"
										   groupName="recMode"
										   label="{resourceManager.getString('myResources', 'OPTION_WEBCAM_AND_MIC')}"/>
						</s:HGroup>
					</s:VGroup>

					<skins:IconButton id="startRecordingButton"
									  styleName="recStartLinkButton"
									  icon="{DataModel.getInstance().recordingExercise ? abortIcon : recIcon}"
									  toolTip="{DataModel.getInstance().recordingExercise ? resourceManager.getString('myResources', 'ABORT_RECORDING') : resourceManager.getString('myResources', 'START_RECORDING') }"
									  enabled="{_rolesReady}"
									  click="onStartRecordingClicked(event)"/>
				</s:HGroup>
			</s:BorderContainer>
			<view:RecordingEndOptions id="recordingEndOptions"
									  includeInLayout="false"
									  visible="false"
									  width="{VP.width}"
									  backgroundAlpha="0"
									  borderVisible="false"/>
			


		</s:VGroup>
		<s:VGroup width="100%">
			<view:ExerciseInfoBox id="ratingShareReport"
								  styleName="lightBorderContainer"
								  width="100%"
								  minHeight="200"/>
		</s:VGroup>
	</s:HGroup>
</s:VGroup>
