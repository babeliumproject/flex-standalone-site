<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="modules.exercise.view.*"
		  xmlns:common="view.common.*"
		  xmlns:videoPlayer="components.videoPlayer.*"
		  xmlns:babelia="components.videoPlayer.controls.babelia.*"
		  xmlns:skins="skins.*"
		  paddingBottom="16"
		  paddingLeft="16"
		  paddingRight="16"
		  paddingTop="16"
		  width="100%"
		  creationComplete="onComplete()"
		  implements="modules.IGroupInterface" 
		  xmlns:view1="modules.create.view.*"
		  xmlns:components="components.*">

	<fx:Script>
		<![CDATA[
			
			import components.videoPlayer.events.VideoPlayerEvent;
			import components.videoPlayer.events.babelia.RecordingEvent;
			import components.videoPlayer.events.babelia.StreamEvent;
			
			import control.URLManager;
			
			import events.RecordingEndOptionEvent;
			import events.UserVideoHistoryEvent;
			
			import model.DataModel;
			
			import modules.IModuleInterface;
			import modules.exercise.event.ExerciseEvent;
			import modules.exercise.event.ResponseEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.ICollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.managers.BrowserManager;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.globalization.SortingCollator;
			
			import view.common.*;
			
			import vo.CreditHistoryVO;
			import vo.CueObject;
			import vo.ExerciseRoleVO;
			import vo.ExerciseVO;
			import vo.ResponseVO;
			import vo.UserVideoHistoryVO;

			/**
			 * CONSTANTS
			 **/
			private const SELECT_EXERCISE:String="SELECT_EXERCISE";

			private var _creationComplete:Boolean=false;


			/**
			 * Exercise Related variables
			 **/
			[Bindable]
			private var _currentExercise:ExerciseVO;
			[Bindable]
			private var _exerciseTitle:String;
			[Bindable]
			private var _exerciseSelected:Boolean=false;
			[Bindable]
			private var _locales:Array;
			[Bindable]
			private var _characterNames:ArrayCollection=new ArrayCollection();
			private var _roles:ArrayCollection=new ArrayCollection();
			private var _exerciseName:String;
			private var _mediaId:int;

			private var _exerciseStartedPlaying:Boolean=false;

			private var sorter:SortingCollator=new SortingCollator();

			/**
			 * Recording related variables
			 **/
			[Bindable]
			private var _rolesReady:Boolean;
			[Bindable]
			private var _localesReady:Boolean;
			[Bindable]
			private var _cueManagerReady:Boolean;

			private var _selectedRole:String;
			private var _recordedFilename:String;

			/**
			 * Options menus
			 **/
			private var _evaluationRequest:EvaluationRequest;

			/**
			 * Video player related vaiables
			 **/

			[Bindable]
			private var _streamSource:String=DataModel.getInstance().streamingResourcesPath;
			private const EXERCISE_FOLDER:String=DataModel.getInstance().exerciseStreamsFolder;
			private const RESPONSE_FOLDER:String=DataModel.getInstance().responseStreamsFolder;

			public var _videoPlayerReady:Boolean=false;

			[Embed('/resources/images/button_abort.png')]
			[Bindable]
			private var abortIcon:Class;

			[Embed('/resources/images/button_rec.png')]
			[Bindable]
			private var recIcon:Class;

			/**
			 * On creation complete
			 **/
			private function onComplete():void
			{
				setupVideoPlayer();
				setupResponseOptions();
				if (_exerciseTitle == null)
					_exerciseTitle=resourceManager.getString('myResources', 'EXERCISE_TITLE');
				_creationComplete=true;
			}

			/**
			 * Setup for videoplayer
			 **/
			private function setupVideoPlayer():void
			{
				VP.addEventListener(VideoPlayerEvent.CONNECTED, onVideoPlayerReady);
				VP.addEventListener(VideoPlayerEvent.VIDEO_STARTED_PLAYING, onVideoStartedPlaying);
				VP.addEventListener(RecordingEvent.END, onRecordingEnd);
				VP.addEventListener(RecordingEvent.ABORTED, onRecordingAborted);
				VP.addEventListener(RecordingEvent.CAM_DENIED, onCamAccessDenied);
				VP.addEventListener(RecordingEvent.MIC_DENIED, onMicAccessDenied);
			}

			private function setupResponseOptions():void
			{
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.VIEW_BOTH, onWatchExerciseAndResponse);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.RECORD_AGAIN, onRecordAgain);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.DISCARD_RESPONSE, onAbortRecording);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.SAVE_RESPONSE, onSaveResponse);
			}

			private function onVideoPlayerReady(e:VideoPlayerEvent):void
			{
				_videoPlayerReady=true;
				VP.stopVideo();
			}

			/**
			 * Preparing exercise
			 **/
			private function prepareExercise():void
			{
				// Prepare new video in VideoPlayer
				//VP.stopVideo();
				VP.state=VideoRecorder.PLAY_STATE;

				var media:Object=new Object();
				media.mediaUrl='http://babeliumlms/media/'+EXERCISE_FOLDER + '/' + _exerciseName+'.flv';
				//media.netConnectionUrl=_streamSource;

				VP.loadVideoByUrl(media);

				// Retrieving available locales for selected exercise's subtitles
				var auxEx:ExerciseVO=new ExerciseVO();
				auxEx.id=_currentExercise.media[0].id;
				new ExerciseEvent(ExerciseEvent.GET_EXERCISE_LOCALES, auxEx).dispatch();
			}

			/**
			 * On locales retrieved
			 **/
			private function set onLocalesRetrieved(value:Boolean):void
			{
				if (value)
				{
					_locales=DataModel.getInstance().availableExerciseLocales;

					if (_locales == null)
					{
						//availableLocales.enabled=false;
						_localesReady=false;
					}
					else
					{
						//availableLocales.enabled=true;
						_localesReady=true;

					}

					DataModel.getInstance().availableExerciseLocalesRetrieved=false;
				}
			}

			/**
			 * On roles retrieved
			 **/
			/*
			private function set onRolesRetrieved(value:Boolean):void
			{
				if (value)
				{
					_roles=DataModel.getInstance().availableExerciseRoles.getItemAt(DataModel.RECORDING_MODULE) as ArrayCollection;
					_characterNames.removeAll();

					if (_roles == null)
					{
						availableRoles.enabled=false;
						_rolesReady=false;
					}
					else
					{
						availableRoles.enabled=true;
						_rolesReady=true;

						for each (var role:ExerciseRoleVO in _roles)
						{
							if (role.characterName != "NPC")
								_characterNames.addItem(role.characterName);
						}
					}

					DataModel.getInstance().availableExerciseRolesRetrieved.setItemAt(false, DataModel.RECORDING_MODULE);
				}
			}
			*/

			private function prepareRoles(subtitleLines:ArrayCollection):void
			{
				_characterNames.removeAll();
				_roles.removeAll();
				if (subtitleLines.length <= 0)
				{
					availableRoles.enabled=false;
					_rolesReady=false;
				}
				else
				{
					var tmpRoles:ArrayCollection=new ArrayCollection();
					for each (var cueobj:CueObject in subtitleLines)
					{
						if (cueobj.role != "NPC" && !tmpRoles.contains(cueobj.role))
						{
							tmpRoles.addItem(cueobj.role);
							_roles.addItem(new ExerciseRoleVO(cueobj.roleId, _mediaId, cueobj.role));
						}
					}

					//var sort:Sort=new Sort();
					//var sortfield:SortField=new SortField(null, false);
					//sort.fields=[sortfield];
					//sort.compareFunction=localeCompareFunction;
					tmpRoles.source.sort(localeCompareFunction);
					//tmpRoles.refresh();

					_characterNames.addAll(tmpRoles);
					_characterNames.refresh();
					availableRoles.enabled=true;
					_rolesReady=true;
				}
			}

			private function localeCompareFunction(item1:Object, item2:Object):int
			{
				//trace(ObjectUtil.toString(item1));
				//trace(ObjectUtil.toString(item2));


				//var sorter:SortingCollator=new SortingCollator();
				sorter.setStyle('locale', resourceManager.localeChain[0]);
				sorter.ignoreCase=true;
				sorter.ignoreSymbols=false;

				//trace(sorter.compare(item1.toString(),item2.toString()));

				return sorter.compare(item1.toString(), item2.toString());
				//return language1.localeCompare(language2);
			}

			/**
			 * On locale combo box changed
			 **/
			private function onLocaleComboChanged(e:Event):void
			{
				
			}

			private function hideSelectedExercise():void
			{
				//videoPlayerAndRecordingControls.includeInLayout=false;
				//videoPlayerAndRecordingControls.visible=false;
				recordingEndOptions.includeInLayout=false;
				recordingEndOptions.visible=false;
				if (DataModel.getInstance().isLoggedIn)
				{
					panelSelectedExercise.visible=true;
					panelSelectedExercise.includeInLayout=true;
					guestEditWarningBox.visible=false;
					guestEditWarningBox.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.visible=true;
					guestEditWarningBox.includeInLayout=true;
					panelSelectedExercise.visible=false;
					panelSelectedExercise.includeInLayout=false;
				}
				_exerciseSelected=false;
			}

			/**
			 * On select an exercise from list
			 **/
			private function set exerciseDataRetrieved(value:Boolean):void
			{
				// Retrieving selected exercise information
				var tmp:ExerciseVO=DataModel.getInstance().watchExerciseData as ExerciseVO;
				trace(ObjectUtil.toString(tmp));
				_exerciseName=tmp.exercisecode;
				_exerciseTitle=tmp.title;
				_mediaId=tmp.media[0].id;
				_currentExercise=tmp;


				var data:Object=new Object();
				//data.netConnectionUrl=DataModel.getInstance().streamingResourcesPath;
				data.mediaUrl='http://babeliumlms/media/'+EXERCISE_FOLDER + '/' + _exerciseName+'.flv';

				VP.loadVideoByUrl(data);

				// Need to retrieve again exercise's information
				_rolesReady=false;
				_localesReady=false;
				_cueManagerReady=false;
				_exerciseSelected=true;
				
				
				ratingShareReport.exerciseData=tmp;
			}

			/**
			 * On start recording clicked
			 **/
			private function onStartRecordingClicked(e:MouseEvent):void
			{
				panelSelectedExercise.includeInLayout=false;
				panelSelectedExercise.visible=false;
				recordingEndOptions.includeInLayout=true;
				recordingEndOptions.visible=true;

				// Commands with selected role
				_selectedRole=availableRoles.selectedItem.toString();

				// Recording mode
				if (micOnly.selected)
					VP.state=VideoRecorder.RECORD_MIC_STATE;
				else
					VP.state=VideoRecorder.RECORD_BOTH_STATE;


				// Disable events and tabs
				DataModel.getInstance().recordingExercise=true;

				//Save statistical data
				statisticRecAttempt();
			}

			private function statisticRecAttempt():void
			{
				var subtitlesAreUsed:Boolean=VP.displayCaptions;
				var subtitleId:int=subtitleId;
				var roleId:int=0;
				for each (var role:ExerciseRoleVO in _roles)
				{
					if (role.characterName == _selectedRole)
					{
						roleId=role.id;
						break;
					}
				}
				var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, true, 0, '', subtitlesAreUsed, subtitleId, roleId);
				new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_ATTEMPT_RESPONSE, videoData).dispatch();
			}

			/**
			 * On recording end successfully
			 **/
			private function onRecordingEnd(e:RecordingEvent):void
			{
				// Store last recorded response's filename
				_recordedFilename=e.fileName;

				DataModel.getInstance().recordingExercise=false;

				// Set the videoplayer to playback both the exercise and the last response.

				var media:Object=new Object();
				var items:Array=[{'mediaUrl': EXERCISE_FOLDER + '/' + _exerciseName, 'netConnectionUrl': _streamSource}, {'mediaUrl': RESPONSE_FOLDER + '/' + _recordedFilename, 'netConnectionUrl': _streamSource}];
				media.parallelMedia=items;

				VP.loadVideoByUrl(media);

				VP.seek=false;
				VP.stopVideo();
			}

			/**
			 * On recording aborted
			 **/
			private function onRecordingAborted(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}

			/**
			 * On cam access denied
			 **/
			private function onCamAccessDenied(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}

			/**
			 * On mic access denied
			 **/
			private function onMicAccessDenied(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}

			private function recordingError():void
			{
				DataModel.getInstance().recordingExercise=false;
				
				VP.state=VideoRecorder.PLAY_STATE;
		

				recordingEndOptions.includeInLayout=false;
				recordingEndOptions.visible=false;
				if (DataModel.getInstance().isLoggedIn)
				{
					panelSelectedExercise.visible=true;
					panelSelectedExercise.includeInLayout=true;
					guestEditWarningBox.visible=false;
					guestEditWarningBox.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.visible=true;
					guestEditWarningBox.includeInLayout=true;
					panelSelectedExercise.visible=false;
					panelSelectedExercise.includeInLayout=false;
				}

			}

			private function resetComponent():void
			{
				VP.resetComponent();

				_exerciseTitle=resourceManager.getString('myResources', 'EXERCISE_TITLE');
				_currentExercise=null; // Reset current exercise

				hideSelectedExercise(); // Information of selected exercise

				
				//Remove the current exercise's info
				ratingShareReport.exerciseData=null;
			}

			// Watch both
			private function onWatchExerciseAndResponse(e:Event):void
			{

				var media:Object=new Object();
				var items:Array=[{'mediaUrl': EXERCISE_FOLDER + '/' + _exerciseName, 'netConnectionUrl': _streamSource}, {'mediaUrl': RESPONSE_FOLDER + '/' + _recordedFilename, 'netConnectionUrl': _streamSource}];
				media.parallelMedia=items;

				VP.loadVideoByUrl(media);

				VP.seek=false;
			}

			// Watch response
			private function onWatchResponse(e:Event):void
			{
				var media:Object=new Object();
				media.mediaUrl=RESPONSE_FOLDER + '/' + _recordedFilename;
				media.netConnectionUrl=_streamSource;

				VP.loadVideoByUrl(media);

				VP.seek=false;
			}

			// Record again
			private function onRecordAgain(e:Event):void
			{
				var media:Object=new Object();
				var play:Object={'mediaUrl': EXERCISE_FOLDER + '/' + _exerciseName, 'netConnectionUrl': _streamSource};
				var record:Object={'mediaUrl': RESPONSE_FOLDER + '/' + _recordedFilename, 'netConnectionUrl': _streamSource};
				media.playbackMedia=play;
				media.recordMedia=record;
				
				var timemarkers:Object;

				VP.recordVideo(media, !micOnly.selected, timemarkers);

				//Save this new record attempt
				statisticRecAttempt();
			}

			private function onAbortRecording(e:Event):void
			{
				recordingError();
				prepareExercise();
			}

			// Save response
			private function onSaveResponse(e:Event):void
			{

				var userCredCount:int=DataModel.getInstance().loggedUser.creditCount;
				var credsEvalRequest:int=DataModel.getInstance().prefDic['evaluationRequestCredits'];
				if (userCredCount - credsEvalRequest >= 0)
				{
					//This must be changed by some function that takes a snapshot of the Response video
					var responseThumbnail:String="nothumb.png";
					var subtitleId:int=subtitleId;
					var responseData:ResponseVO=new ResponseVO(0, _currentExercise.id, _recordedFilename, true, responseThumbnail, "Red5", VP.duration, (new Date().toString()), 0, _selectedRole, 0, subtitleId);

					//Third, save response				
					new ResponseEvent(ResponseEvent.SAVE_RESPONSE, responseData).dispatch();

					recordingEndOptions.includeInLayout=false;
					recordingEndOptions.visible=false;
					panelSelectedExercise.includeInLayout=true;
					panelSelectedExercise.visible=true;


					resetComponent();
				}
				else
				{
					CustomAlert.error(resourceManager.getString('myResources', 'ERROR_INSUFICCIENT_CREDITS'));
				}
			}

			private function set statisticRecSave(value:Boolean):void
			{
				if (DataModel.getInstance().savedResponseId)
				{
					var subtitlesAreUsed:Boolean=VP.displayCaptions;
					var subtitleId:int=subtitleId;
					var roleId:int=0;
					var responseId:int=DataModel.getInstance().savedResponseId;
					for each (var role:ExerciseRoleVO in _roles)
					{
						if (role.characterName == _selectedRole)
						{
							roleId=role.id;
							break;
						}
					}
					var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, false, responseId, '', subtitlesAreUsed, subtitleId, roleId);
					new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_SAVE_RESPONSE, videoData).dispatch();
				}
			}

			private function onVideoStartedPlaying(e:VideoPlayerEvent):void
			{
				_exerciseStartedPlaying=true;
				if (DataModel.getInstance().isLoggedIn && _cueManagerReady && _rolesReady && _localesReady && _exerciseStartedPlaying)
				{
					_exerciseStartedPlaying=false;
					var subtitlesAreUsed:Boolean=VP.displayCaptions;
					var subtitleId:int=subtitleId;
					var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, false, 0, '', subtitlesAreUsed, subtitleId, 0);
					if (_mediaId > 0 && subtitleId > 0)
						new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_EXERCISE_WATCH, videoData).dispatch();
				}
			}



			public function set onLogout(value:Boolean):void
			{
				if (DataModel.getInstance().isLoggedIn == false)
				{
					guestEditWarningBox.includeInLayout=true;
					guestEditWarningBox.visible=true;
					panelSelectedExercise.includeInLayout=false;
					panelSelectedExercise.visible=false;
					recordingEndOptions.visible=false;
					recordingEndOptions.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.includeInLayout=false;
					guestEditWarningBox.visible=false;
					panelSelectedExercise.includeInLayout=true;
					panelSelectedExercise.visible=true;
					recordingEndOptions.visible=false;
					recordingEndOptions.includeInLayout=false;
				}
			}

			public function resetGroup():void
			{
				resetComponent();
				VP.resetComponent();
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().watchExerciseDataRetrieved}"
				destination="this.exerciseDataRetrieved"/>
	<fx:Binding source="{DataModel.getInstance().availableExerciseLocalesRetrieved}"
				destination="this.onLocalesRetrieved"/>
	<!--
	<fx:Binding source="{DataModel.getInstance().availableExerciseRolesRetrieved.getItemAt(DataModel.RECORDING_MODULE)}"
				destination="this.onRolesRetrieved"/>
	-->
	<fx:Binding source="{DataModel.getInstance().savedResponseRetrieved}"
				destination="statisticRecSave"/>

	<fx:Binding source="{DataModel.getInstance().isLoggedIn}"
				destination="onLogout"/>

	<s:Label id="exerciseTitle"
			 text="{_exerciseTitle}"
			 width="{VP.width}"
			 styleName="h2"/>

	<s:HGroup width="100%">

		<s:VGroup id="videoPlayerAndRecordingControls"
				  width="100%">
			<videoPlayer:VideoRecorder id="VP"
									   layoutDirection="ltr"
									   autoPlay="true"
									   skinUrl="resources/videoPlayer/skin/white.xml"
									   seek="true"
									   displayCaptions="true"
									   autoScale="false"
									   arrows="false"
									   subtitlingControls="false"
									   width="640"
									   height="360"
									   controlsEnabled="{_exerciseSelected}"/>

			<s:VGroup id="guestEditWarningBox"
					  width="{VP.width}"
					  paddingTop="5"
					  paddingBottom="20">

				<s:Label text="{resourceManager.getString('myResources', 'RECORDING_SETTINGS')? resourceManager.getString('myResources', 'RECORDING_SETTINGS') : 'Recording settings'}"
						 styleName="h5"/>

				<s:HGroup width="100%"
						  verticalAlign="middle">
					<mx:Image id="groupLogo"
							  source="resources/images/about_section_title_icon.png"
							  height="30"
							  width="30"/>
					<mx:Text htmlText="{resourceManager.getString('myResources','GUEST_RECORD_WARNING')}"
							 width="100%"
							 fontSize="14"/>
				</s:HGroup>
			</s:VGroup>

			<!-- Selected Exercise Panel -->
			<s:BorderContainer id="panelSelectedExercise"
							   includeInLayout="false"
							   visible="false"
							   styleName="lightBorderContainer"
							   width="{VP.width}">
				<s:layout>
					<s:VerticalLayout paddingTop="8"
									  paddingLeft="8"
									  paddingRight="8"
									  paddingBottom="8"
									  verticalAlign="middle"/>
				</s:layout>

				<s:Label text="{resourceManager.getString('myResources', 'RECORDING_SETTINGS')? resourceManager.getString('myResources', 'RECORDING_SETTINGS') : 'Recording settings'}"
						 styleName="h5"/>

				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke weight="{UIComponent(parent).getStyle('borderWeight')}"
											alpha="{UIComponent(parent).getStyle('borderAlpha')}"
											color="{UIComponent(parent).getStyle('borderColor')}"/>
					</s:stroke>
				</s:Line>
				
				<s:HGroup width="100%"
						  verticalAlign="middle">
					<s:VGroup width="100%"
							  verticalAlign="middle">
						<s:HGroup verticalAlign="middle">
							<s:Label text="{resourceManager.getString('myResources', 'CHOOSE_ROLE')}"/>
							<components:EnhancedDropDownList id="availableRoles"
										 dataProvider="{_characterNames}"
										 enabled="{!DataModel.getInstance().recordingExercise}"
										 skinClass="skins.BootstrapDropDownList"
										 cornerRadius="3"
										 borderColor="0xcccccc"
										 sortItems="true"
										 requireSelection="true"/>
						</s:HGroup>

						<s:HGroup verticalAlign="middle">
							<s:Label text="{resourceManager.getString('myResources', 'CHOOSE_REC_METHOD')}"/>
							<s:RadioButton id="micOnly"
										   selected="true"
										   groupName="recMode"
										   label="{resourceManager.getString('myResources', 'OPTION_MIC_ONLY')}"/>
							<s:RadioButton id="micAndCam"
										   groupName="recMode"
										   label="{resourceManager.getString('myResources', 'OPTION_WEBCAM_AND_MIC')}"/>
						</s:HGroup>
					</s:VGroup>

					<skins:IconButton id="startRecordingButton"
									  styleName="recStartLinkButton"
									  icon="{DataModel.getInstance().recordingExercise ? abortIcon : recIcon}"
									  toolTip="{DataModel.getInstance().recordingExercise ? resourceManager.getString('myResources', 'ABORT_RECORDING') : resourceManager.getString('myResources', 'START_RECORDING') }"
									  enabled="{_rolesReady &amp;&amp; _localesReady &amp;&amp; _cueManagerReady}"
									  click="onStartRecordingClicked(event)"/>
				</s:HGroup>
			</s:BorderContainer>
			<view:RecordingEndOptions id="recordingEndOptions"
									  includeInLayout="false"
									  visible="false"
									  width="{VP.width}"
									  backgroundAlpha="0"
									  borderVisible="false"/>
			<s:TabBar id="exerciseInfoTabs"
					  dataProvider="{exerciseInfoStack}"/>
			<mx:ViewStack id="exerciseInfoStack"
						  width="{VP.width}"
						  resizeToContent="true">
				<s:NavigatorContent id="addInfNC"
									label="Add. Info"
									width="100%">
					<s:Label text="Add here tags, exercise type, descriptors, etc..."/>
				</s:NavigatorContent>
			</mx:ViewStack>

			<babelia:ExerciseInfoBox id="ratingShareReport"
									 borderVisible="false"
									 backgroundAlpha="0"
									 width="{VP.width}"/>


		</s:VGroup>
		<s:VGroup width="100%">
			<s:BorderContainer id="exDescContainer"
							   styleName="lightBorderContainer"
							   width="100%"
							   height="{videoPlayerAndRecordingControls.height}">
				<s:layout>
					<s:VerticalLayout paddingBottom="16"
									  paddingLeft="16"
									  paddingRight="16"
									  paddingTop="16"/>
				</s:layout>
				<s:Label id="descLbl"
						 styleName="h5"
						 text="{ResourceManager.getInstance().getString('myResources','DESCRIPTION')}"/>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke weight="{UIComponent(parent).getStyle('borderWeight')}"
											alpha="{UIComponent(parent).getStyle('borderAlpha')}"
											color="{UIComponent(parent).getStyle('borderColor')}"/>
					</s:stroke>
				</s:Line>
				<mx:Text htmlText="{_currentExercise.description}"
						 width="100%"/>
			</s:BorderContainer>
		</s:VGroup>
	</s:HGroup>
</s:VGroup>
