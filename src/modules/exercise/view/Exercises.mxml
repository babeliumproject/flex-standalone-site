<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="modules.exercise.view.*"
		  xmlns:common="view.common.*"
		  xmlns:videoPlayer="components.videoPlayer.*"
		  xmlns:babelia="components.videoPlayer.controls.babelia.*"
		  xmlns:components="components.*"
		  xmlns:skins="skins.*"
		  paddingBottom="16"
		  paddingLeft="16"
		  paddingRight="16"
		  paddingTop="16"
		  width="100%"
		  creationComplete="onComplete(event)"
		  implements="modules.IGroupInterface">

	<fx:Script>
		<![CDATA[
			import components.videoPlayer.VideoRecorder;
			import components.videoPlayer.events.VideoPlayerEvent;
			import components.videoPlayer.events.babelia.RecordingEvent;
			import components.videoPlayer.events.babelia.StreamEvent;
			
			import control.URLManager;
			
			import events.RecordingEndOptionEvent;
			import events.UserVideoHistoryEvent;
			
			import flash.globalization.DateTimeStyle;
			import flash.utils.getQualifiedClassName;
			
			import model.DataModel;
			
			import modules.IModuleInterface;
			import modules.exercise.event.ExerciseEvent;
			import modules.exercise.event.ResponseEvent;
			import modules.exercise.event.WatchExerciseCommand;
			import modules.subtitle.event.SubtitleEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.ICollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.LayoutDirection;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.BrowserManager;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.globalization.SortingCollator;
			
			import utils.ExerciseRenderUtils;
			
			import view.common.*;
			
			import vo.CreditHistoryVO;
			import vo.CueObject;
			import vo.ExerciseRoleVO;
			import vo.ExerciseVO;
			import vo.ResponseVO;
			import vo.UserVideoHistoryVO;

			private const SELECT_EXERCISE:String="SELECT_EXERCISE";

			private var _creationComplete:Boolean=false;



			[Bindable]
			private var _currentExercise:Object;
			[Bindable]
			private var _exerciseTitle:String;
			[Bindable]
			private var _exerciseSelected:Boolean;
			[Bindable]
			private var _locales:Array;
			[Bindable]
			private var _characterNames:ArrayCollection;
			private var _roles:Object;
			private var _mediaId:int;
			private var _subtitleId:int;

			private var _exerciseStartedPlaying:Boolean=false;

			[Bindable]
			private var _model:DataModel=DataModel.getInstance();


			[Bindable]
			private var _rolesReady:Boolean;

			private var _selectedRole:String;
			private var _recordedFilename:String;

			/**
			 * Options menus
			 **/
			private var _evaluationRequest:EvaluationRequest;

			protected var _currentMediaData:Object;
			protected var _primaryMediaData:Object;
			protected var _modelMediaData:Object;
			protected var _recordMediaData:Object;
			protected var _currentCaptions:Object;

			protected var _currentTimeMarkers:Object;
			
			public var _videoPlayerReady:Boolean=false;

			[Embed('/resources/images/button_abort.png')]
			[Bindable]
			private var abortIcon:Class;

			[Embed('/resources/images/button_rec.png')]
			[Bindable]
			private var recIcon:Class;
			
			protected var videoPlayer:VideoRecorder;

			protected function onComplete(event:FlexEvent):void{
				var commitOnly:Boolean=false;
				var useWeakReference:Boolean=true;
				var host:Object=_model;
				
				//setupVideoPlayer();
				setupResponseOptions();
				
				BindingUtils.bindSetter(exerciseDataRetrieved,host,'watchExerciseDataRetrieved',commitOnly,useWeakReference);
				BindingUtils.bindSetter(exerciseSubtitlesRetrieved,host,'availableSubtitleLinesRetrieved',commitOnly,useWeakReference);
				BindingUtils.bindSetter(onRolesRetrieved,host,'availableExerciseRolesRetrieved',commitOnly,useWeakReference);
				BindingUtils.bindSetter(recordMediaSlotHandler,host,'recordMediaDataRetrieved',commitOnly,useWeakReference);
				BindingUtils.bindSetter(responseSuccessfullySavedRetrieved,host,'savedResponseRetrieved',commitOnly,useWeakReference);
				BindingUtils.bindSetter(onLogout,host,'isLoggedIn',commitOnly,useWeakReference);
				
				if (_exerciseTitle == null)
					_exerciseTitle=resourceManager.getString('myResources', 'EXERCISE_TITLE');
			}

			/**
			 * Setup for videoplayer
			 **/
			private function setupVideoPlayer():void
			{
				videoPlayer=new VideoRecorder();
				videoPlayer.layoutDirection=LayoutDirection.LTR;
				videoPlayer.autoPlay=true;
				videoPlayer.seek=true;
				videoPlayer.skinUrl="resources/videoPlayer/skin/white.xml";
				videoPlayer.displayCaptions=true;
				videoPlayer.autoScale=false;
				videoPlayer.subtitlingControls=false;
				videoPlayer.width=640;
				videoPlayer.height=360;
				
				videoPlayer.addEventListener(VideoPlayerEvent.VIDEO_STARTED_PLAYING, onVideoStartedPlaying, false, 0, true);
				videoPlayer.addEventListener(VideoPlayerEvent.ON_ERROR, onVideoPlayerError, false, 0, true);
				videoPlayer.addEventListener(RecordingEvent.END, onRecordingEnd, false, 0, true);
				videoPlayer.addEventListener(RecordingEvent.ABORTED, onRecordingAborted, false, 0, true);
				videoPlayer.addEventListener(RecordingEvent.CAM_DENIED, onCamAccessDenied, false, 0, true);
				videoPlayer.addEventListener(RecordingEvent.MIC_DENIED, onMicAccessDenied, false, 0, true);
				
			}

			private function setupResponseOptions():void
			{
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.VIEW_BOTH, onWatchExerciseAndResponse, false, 0, true);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.RECORD_AGAIN, recordAgainClickHandler, false, 0, true);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.DISCARD_RESPONSE, abortRecordingClickHandler, false, 0, true);
				recordingEndOptions.addEventListener(RecordingEndOptionEvent.SAVE_RESPONSE, saveResponseClickHandler, false, 0, true);
			}

			private function onRolesRetrieved(value:Boolean):void
			{
				_roles=null;
				_characterNames=new ArrayCollection();
				
				chooseRoleBox.visible=false;
				chooseRoleBox.includeInLayout=false;
				
				if (DataModel.getInstance().availableExerciseRoles)
				{
					_roles=DataModel.getInstance().availableExerciseRoles;
					var code:int=0;
					for (var role:String in _roles){
						if(role != "NPC"){
							code++;
							_characterNames.addItem({'code': code, 'label': role});
						}
					}
				}
				var numVoices:int=_characterNames.length;
				trace("Number of voices found in subtitles: " + numVoices);
				if (!numVoices)
				{	
					availableRoles.dataProvider=null;
					_rolesReady=false;
				}
				else
				{
					availableRoles.dataProvider=_characterNames;
					_rolesReady=true;
					if (numVoices > 1)
					{
						chooseRoleBox.visible=true;
						chooseRoleBox.includeInLayout=true;
					}
				}
			}

			private function hideSelectedExercise():void
			{
				//videoPlayerAndRecordingControls.includeInLayout=false;
				//videoPlayerAndRecordingControls.visible=false;
				recordingEndOptions.includeInLayout=false;
				recordingEndOptions.visible=false;
				if (DataModel.getInstance().isLoggedIn)
				{
					panelSelectedExercise.visible=true;
					panelSelectedExercise.includeInLayout=true;
					guestEditWarningBox.visible=false;
					guestEditWarningBox.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.visible=true;
					guestEditWarningBox.includeInLayout=true;
					panelSelectedExercise.visible=false;
					panelSelectedExercise.includeInLayout=false;
				}
				_exerciseSelected=false;
			}

			private function exerciseDataRetrieved(value:Boolean):void
			{
				var params:Object;
				if (_model.watchExerciseData)
				{
					_currentExercise=_model.watchExerciseData;
					_exerciseTitle=_currentExercise.title;
					
					//Write the exercise data
					usernameLbl.text=_currentExercise.userName;
					difficultyLbl.text=ExerciseRenderUtils.getLevelLabel(_currentExercise.difficulty);
					timecreatedLbl.text=ExerciseRenderUtils.formatDateTime(_currentExercise.timecreated, DateTimeStyle.MEDIUM, DateTimeStyle.NONE);
					langBitmap.source=ExerciseRenderUtils.getFlagSource(_currentExercise);
					
					ratingShareReport.exerciseData=_currentExercise as ExerciseVO;
					
					_primaryMediaData=_modelMediaData=null;
					
					setupVideoPlayer();
					videoPlayerAndRecordingControls.addElementAt(videoPlayer,0);

					if (_currentExercise.hasOwnProperty('media'))
					{
						if (getQualifiedClassName(_currentExercise.media) == 'Array')
						{
							var media:Array=_currentExercise.media;
							for each (var item:Object in media)
							{
								var level:int=parseInt(item.level);
								if (level == 1 && !_primaryMediaData)
								{
									_primaryMediaData=item;
									continue;
								}
								if (level == 2 && !_modelMediaData)
								{
									_modelMediaData=item;
									continue;
								}
							}
						}
						else if (getQualifiedClassName(_currentExercise.media) == 'Object')
						{
							_primaryMediaData=_currentExercise.media;
						}
					}
					
					loadSelectedMedia(_primaryMediaData);
				}
				else
				{
					//TODO
				}
			}
			
			protected function loadSelectedMedia(media:Object):void{
				_currentMediaData=media;
				
				var param:Object=_currentMediaData;
				videoPlayer.loadVideoByUrl(param);
				
				_rolesReady=false;
				_exerciseSelected=true;
				
				//Load the subtitles that belong to this media
				var args:Object=new Object();
				args.mediaid=_currentMediaData.id;
				new SubtitleEvent(SubtitleEvent.GET_EXERCISE_SUBLINES, args).dispatch();
				
			}

			public function exerciseSubtitlesRetrieved(value:Boolean):void
			{
				if (DataModel.getInstance().availableSubtitleLines)
				{
					_currentCaptions=DataModel.getInstance().availableSubtitleLines;
					var ccollection:ArrayCollection=_currentCaptions as ArrayCollection;
					var item:Object = ccollection && ccollection.length ? ccollection.getItemAt(0) : null;
					trace(ObjectUtil.toString(item));
					
					_subtitleId=item.subtitleId;
					if(videoPlayer){
						videoPlayer.setCaptions(_currentCaptions);
					}
				}
			}

			/**
			 * On start recording clicked
			 **/
			private function onStartRecordingClicked(e:MouseEvent):void
			{
				panelSelectedExercise.includeInLayout=false;
				panelSelectedExercise.visible=false;
				recordingEndOptions.includeInLayout=true;
				recordingEndOptions.visible=true;

				checkRoleSelected();
			}
			
			private function checkRoleSelected():void{
				if (availableRoles.selectedIndex > -1)
				{
					var item:Object=availableRoles.selectedItem;
					_selectedRole=String(item.label);
					requestRecordingSlot();
				}
			}

			protected function requestRecordingSlot():void
			{
				new ExerciseEvent(ExerciseEvent.REQUEST_RECORDING_SLOT).dispatch();
			}

			private function prepareRecording():void
			{
				// Disable events and tabs
				//DataModel.getInstance().recordingExercise=true;

				//Save statistical data
				statisticRecAttempt();

				var media:Object=new Object();
				media.playbackMedia=_currentMediaData;
				media.recordMedia=_recordMediaData;

				var useWebcam:Boolean=!micOnly.selected;

				_currentTimeMarkers = _roles[_selectedRole];

				trace("preparerecording: "+ObjectUtil.toString(media));
				
				videoPlayer.recordVideo(media, !micOnly.selected, _currentTimeMarkers);
			}

			protected function recordMediaSlotHandler(value:Boolean):void
			{
				_recordMediaData=null;
				if (_model.recordMediaData)
				{
					var tmp:Object=_model.recordMediaData;
					_recordMediaData=new Object();
					_recordMediaData.netConnectionUrl=tmp.netConnectionUrl || null;
					_recordMediaData.mediaUrl=tmp.mediaUrl || null;
					_recordMediaData.maxDuration=tmp.maxDuration || 0;
					trace("Rec. media slot: "+ObjectUtil.toString(_recordMediaData));
					prepareRecording();
				}
			}

			/**
			 * On recording end successfully
			 **/
			private function onRecordingEnd(e:RecordingEvent):void
			{
				// Store last recorded response's filename
				_recordedFilename=e.fileName;

				DataModel.getInstance().recordingExercise=false;

				// Set the videoplayer to playback both the exercise and the last response.


				var parallelmedia:Object=new Object();
				
				parallelmedia.leftMedia=_currentMediaData;
				parallelmedia.rightMedia=_recordMediaData;

				videoPlayer.loadVideoByUrl(parallelmedia, _currentTimeMarkers);
			}

			/**
			 * On recording aborted
			 **/
			private function onRecordingAborted(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}
			
			private function onVideoPlayerError(event:VideoPlayerEvent):void{
				recordingError();
			}

			/**
			 * On cam access denied
			 **/
			private function onCamAccessDenied(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}

			/**
			 * On mic access denied
			 **/
			private function onMicAccessDenied(e:RecordingEvent):void
			{
				CustomAlert.error(resourceManager.getString('myResources', 'DEVICES_NOT_WORKING'));
				recordingError();
			}

			private function recordingError():void
			{
				DataModel.getInstance().recordingExercise=false;

				//The video recorder should handle the following: unattach user devices, close rightside streams,
				//restore appearence, enable controls, restore autoplay
				videoPlayer.loadVideoByUrl(_currentMediaData);

				recordingEndOptions.includeInLayout=false;
				recordingEndOptions.visible=false;
				if (DataModel.getInstance().isLoggedIn)
				{
					panelSelectedExercise.visible=true;
					panelSelectedExercise.includeInLayout=true;
					guestEditWarningBox.visible=false;
					guestEditWarningBox.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.visible=true;
					guestEditWarningBox.includeInLayout=true;
					panelSelectedExercise.visible=false;
					panelSelectedExercise.includeInLayout=false;
				}

			}

			// Watch both
			private function onWatchExerciseAndResponse(e:Event):void
			{
				var parallelmedia:Object=new Object();
				
				parallelmedia.leftMedia=_currentMediaData;
				parallelmedia.rightMedia=_recordMediaData;
				
				videoPlayer.loadVideoByUrl(parallelmedia, _currentTimeMarkers);
			}

			// Watch response
			private function onWatchResponse(e:Event):void
			{
				var media:Object=_recordMediaData;
				videoPlayer.loadVideoByUrl(media);
			}

			// Record again
			private function recordAgainClickHandler(e:Event):void
			{
				checkRoleSelected();
			}

			private function abortRecordingClickHandler(e:Event):void
			{
				recordingError();
			}

			// Save response
			private function saveResponseClickHandler(e:Event):void
			{

				var userCredCount:int=DataModel.getInstance().loggedUser.creditCount;
				var credsEvalRequest:int=DataModel.getInstance().prefDic['evaluationRequestCredits'];
				if (userCredCount - credsEvalRequest >= 0)
				{
					var responseData:ResponseVO=new ResponseVO();

					responseData.exerciseId=_currentExercise.id;
					responseData.mediaId=_currentMediaData.id;
					responseData.characterName=_selectedRole;
					responseData.subtitleId=_subtitleId;
					responseData.isPrivate=true;
					
					
					//Third, save response				
					new ResponseEvent(ResponseEvent.SAVE_RESPONSE, responseData).dispatch();

					recordingEndOptions.includeInLayout=false;
					recordingEndOptions.visible=false;
					panelSelectedExercise.includeInLayout=true;
					panelSelectedExercise.visible=true;

					
				}
				else
				{
					CustomAlert.error(resourceManager.getString('myResources', 'ERROR_INSUFICCIENT_CREDITS'));
				}
			}
			
			protected function responseSuccessfullySavedRetrieved(value:Boolean):void{
				if(_model.savedResponseId){
					
					videoPlayer.resetComponent();
					
					//Check if this exercise has model media
					if(_modelMediaData && (_modelMediaData != _currentMediaData)){
						//Prompt the user if he wants to view the model media
						CustomAlert.info(ResourceManager.getInstance().getString('myResources', 'THIS_EXERCISE_HAS_A_MODEL_DO_YOU_WANT_TO_WATCH_IT'), 
											Alert.YES | Alert.NO, FlexGlobals.topLevelApplication.parent, 
											watchModelPromptCloseHandler, Alert.YES);
					} else {
						//Recording is done and the exercise either does not have a model 
						//media or the user just saved a model media recording. Go back to the browse section
						URLManager.getInstance().redirect('/exercises');
					}
				}
			}
			
			protected function watchModelPromptCloseHandler(event:CloseEvent):void{
				if (event.detail == Alert.YES){
					isModelLbl.visible=true;
					isModelLbl.includeInLayout=true;
					loadSelectedMedia(_modelMediaData);
				} else {
					//Recording is done and the user doesn't want to watch the model. Go back to the browse section
					URLManager.getInstance().redirect('/exercises');
				}
			}
			
			private function statisticRecAttempt():void
			{
				var subtitlesAreUsed:Boolean=videoPlayer.displayCaptions;
				var subtitleId:int=_subtitleId;
				var exerciseId:int=_currentExercise.id;
				var mediaId:int=_currentMediaData.id;
				var roleName:String=_selectedRole;
				
				var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, true, 0, '', subtitlesAreUsed, subtitleId, roleName);
				new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_ATTEMPT_RESPONSE, videoData).dispatch();
			}

			private function statisticRecSave(value:Boolean):void
			{
				if (DataModel.getInstance().savedResponseId)
				{
					var subtitlesAreUsed:Boolean=videoPlayer.displayCaptions;
					var subtitleId:int=_subtitleId;
					var roleName:String=_selectedRole;
					var responseId:int=DataModel.getInstance().savedResponseId;
					var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, false, responseId, '', subtitlesAreUsed, subtitleId, roleName);
					new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_SAVE_RESPONSE, videoData).dispatch();
				}
			}

			private function onVideoStartedPlaying(e:VideoPlayerEvent):void
			{
				_exerciseStartedPlaying=true;
				if (DataModel.getInstance().isLoggedIn && _rolesReady && _exerciseStartedPlaying)
				{
					_exerciseStartedPlaying=false;
					var subtitlesAreUsed:Boolean=videoPlayer.displayCaptions;
					var subtitleId:int=_subtitleId;
					var videoData:UserVideoHistoryVO=new UserVideoHistoryVO(0, 0, _currentExercise.id, false, 0, '', subtitlesAreUsed, subtitleId);
					if (_mediaId > 0 && subtitleId > 0)
						new UserVideoHistoryEvent(UserVideoHistoryEvent.STAT_EXERCISE_WATCH, videoData).dispatch();
				}
			}



			public function onLogout(value:Boolean):void
			{
				if (DataModel.getInstance().isLoggedIn == false)
				{
					guestEditWarningBox.includeInLayout=true;
					guestEditWarningBox.visible=true;
					panelSelectedExercise.includeInLayout=false;
					panelSelectedExercise.visible=false;
					recordingEndOptions.visible=false;
					recordingEndOptions.includeInLayout=false;
				}
				else
				{
					guestEditWarningBox.includeInLayout=false;
					guestEditWarningBox.visible=false;
					panelSelectedExercise.includeInLayout=true;
					panelSelectedExercise.visible=true;
					recordingEndOptions.visible=false;
					recordingEndOptions.includeInLayout=false;
				}
			}

			public function resetGroup():void
			{
				if(videoPlayer){
					videoPlayerAndRecordingControls.removeElement(videoPlayer);
					videoPlayer.resetComponent();
				}
				videoPlayer=null;
				
				//Reset all properties
				_exerciseTitle=resourceManager.getString('myResources', 'EXERCISE_TITLE');
				_exerciseSelected=_exerciseStartedPlaying=_rolesReady=_videoPlayerReady=false;
				_currentExercise=_roles=_currentMediaData=_primaryMediaData=_modelMediaData=_recordMediaData=_currentCaptions=_currentTimeMarkers=null;
				_locales=null;
				_characterNames=null;
				_selectedRole=_recordedFilename=null;
				_mediaId=_subtitleId=0;
				
				hideSelectedExercise(); // Information of selected exercise
				
				//Remove the current exercise's info
				ratingShareReport.exerciseData=null;
				
				isModelLbl.visible=false;
				isModelLbl.includeInLayout=false;	
			}
		]]>
	</fx:Script>

	<s:Label id="exerciseTitle"
			 text="{_exerciseTitle}"
			 width="640"
			 styleName="h2"/>
	<s:Label id="isModelLbl"
			 text="{ResourceManager.getInstance().getString('myResources','MODEL')}"
			 styleName="exerciseTitleLabel"
			 includeInLayout="false"
			 visible="false"/>
	<s:HGroup width="100%">

		<s:VGroup id="videoPlayerAndRecordingControls"
				  width="100%">
			<s:BorderContainer id="basicinfo"
							   styleName="lightBorderContainer"
							   width="640">
				<s:layout>
					<s:HorizontalLayout verticalAlign="middle" paddingTop="8" paddingBottom="8" paddingLeft="8" paddingRight="8"/>
				</s:layout>
				<s:BitmapImage source="/resources/images/iconmonstr-user-6-icon-48.png"
							   width="48" height="48"/>
				<s:VGroup width="100%">
					<s:Label id="usernameLbl" fontWeight="bold"/>
					<s:Label id="timecreatedLbl" styleName="boldYellowLabel"/>
				</s:VGroup>
				<s:BitmapImage id="langBitmap" height="32" width="32"/>
				<s:Label id="difficultyLbl"
						 styleName="boldYellowLabel"
						 fontSize="24"/>
				
			</s:BorderContainer>

			<s:VGroup id="guestEditWarningBox"
					  width="640"
					  paddingTop="5"
					  paddingBottom="20">

				<s:Label text="{resourceManager.getString('myResources', 'RECORDING_SETTINGS')}"
						 styleName="h5"/>

				<s:HGroup width="100%"
						  verticalAlign="middle">
					<mx:Image id="groupLogo"
							  source="resources/images/about_section_title_icon.png"
							  height="30"
							  width="30"/>
					<mx:Text htmlText="{resourceManager.getString('myResources','GUEST_RECORD_WARNING')}"
							 width="100%"
							 fontSize="14"/>
				</s:HGroup>
			</s:VGroup>

			<!-- Selected Exercise Panel -->
			<s:BorderContainer id="panelSelectedExercise"
							   includeInLayout="false"
							   visible="false"
							   styleName="lightBorderContainer"
							   width="640">
				<s:layout>
					<s:VerticalLayout paddingTop="8"
									  paddingLeft="8"
									  paddingRight="8"
									  paddingBottom="8"
									  verticalAlign="middle"/>
				</s:layout>

				<s:Label text="{resourceManager.getString('myResources', 'RECORDING_SETTINGS')}"
						 styleName="h5"/>

				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke weight="{panelSelectedExercise.getStyle('borderWeight')}"
											alpha="{panelSelectedExercise.getStyle('borderAlpha')}"
											color="{panelSelectedExercise.getStyle('borderColor')}"/>
					</s:stroke>
				</s:Line>

				<s:HGroup width="100%"
						  verticalAlign="middle">
					<s:VGroup width="100%"
							  verticalAlign="middle">
						<s:HGroup verticalAlign="middle" id="chooseRoleBox">
							<s:Label text="{resourceManager.getString('myResources', 'CHOOSE_ROLE')}"/>
							<components:EnhancedDropDownList id="availableRoles"
															 skinClass="skins.BootstrapDropDownList"
															 cornerRadius="3"
															 borderColor="0xcccccc"
															 sortItems="true"
															 requireSelection="true"/>
						</s:HGroup>

						<s:HGroup verticalAlign="middle">
							<s:Label text="{resourceManager.getString('myResources', 'CHOOSE_REC_METHOD')}"/>
							<s:RadioButton id="micOnly"
										   selected="true"
										   groupName="recMode"
										   label="{resourceManager.getString('myResources', 'OPTION_MIC_ONLY')}"/>
							<s:RadioButton id="micAndCam"
										   groupName="recMode"
										   label="{resourceManager.getString('myResources', 'OPTION_WEBCAM_AND_MIC')}"/>
						</s:HGroup>
					</s:VGroup>

					<skins:IconButton id="startRecordingButton"
									  styleName="recStartLinkButton"
									  icon="{DataModel.getInstance().recordingExercise ? abortIcon : recIcon}"
									  toolTip="{DataModel.getInstance().recordingExercise ? resourceManager.getString('myResources', 'ABORT_RECORDING') : resourceManager.getString('myResources', 'START_RECORDING') }"
									  enabled="{_rolesReady}"
									  click="onStartRecordingClicked(event)"/>
				</s:HGroup>
			</s:BorderContainer>
			<view:RecordingEndOptions id="recordingEndOptions"
									  includeInLayout="false"
									  visible="false"
									  width="640"
									  backgroundAlpha="0"
									  borderVisible="false"/>
		</s:VGroup>
		<s:VGroup width="100%">
			<view:ExerciseInfoBox id="ratingShareReport"
								  styleName="lightBorderContainer"
								  width="100%"
								  minHeight="200"/>
		</s:VGroup>
	</s:HGroup>
</s:VGroup>
