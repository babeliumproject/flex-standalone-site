<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:skins="skins.*"
				   minHeight="0"
				   creationComplete="completeHandler(event)">

	<s:layout>
		<s:VerticalLayout horizontalAlign="left"
						  paddingTop="2"
						  paddingBottom="2"
						  paddingLeft="0"
						  paddingRight="0"
						  gap="0"/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			
			import control.URLManager;
			
			import model.DataModel;
			import model.ResourceSubscriber;
			
			import modules.exercise.event.ExerciseEvent;
			import modules.exercise.event.SearchEvent;
			
			import mx.core.Application;
			import mx.events.FlexEvent;
			
			import vo.ExerciseVO;

			private var _creationComplete:Boolean=false;

			[Bindable]
			private var _exercise:ExerciseVO=null;

			[Bindable]
			private var _tags:Array;

			[Bindable]
			private var _dataAvailable:Boolean=false;

			[Bindable]
			private var _lessAdtInfoStatus:Boolean=false;

			public function completeHandler(event:FlexEvent):void
			{
				_creationComplete=true;
				exerciseData=_exercise;
			}

			public function set exerciseData(exercise:ExerciseVO):void
			{
				_exercise=exercise;
				if (_creationComplete)
				{
					if (_exercise)
					{
					
						_dataAvailable=true;
						updateComponents();
					}
					else
					{
						_dataAvailable=false;
						disableComponents();
					}
				}
			}

			public function get exerciseData():ExerciseVO
			{
				return _exercise;
			}

			private function updateComponents():void
			{
	
				exDescription.htmlText=_exercise.description;
				additionalInfoBox.visible=false;
				additionalInfoBox.includeInLayout=false;
				_lessAdtInfoStatus=false;
				addDescriptors();
				addTagLinkButtons();
			}

			private function disableComponents():void
			{
				if (DataModel.getInstance().isLoggedIn == false || _dataAvailable == false)
				{
					exDescription.htmlText="";
					additionalInfoBox.visible=false;
					additionalInfoBox.includeInLayout=false;
					_lessAdtInfoStatus=false;
					removeTagLinkButtons();
				}
			}
			
			private function addDescriptors():void{
				removeDescriptors()
				if(_exercise.descriptors && _exercise.descriptors.length){
					var sectTitle:Label=new Label();
					sectTitle.setStyle("fontWeight","bold");
					sectTitle.setStyle("fontSize",11);
					sectTitle.text=resourceManager.getString('myResources','DESCRIPTORS');
					ResourceSubscriber.getInstance().subscribeElement(sectTitle, "text", "myResources", 'DESCRIPTORS');
					
					descriptorContainer.addElement(sectTitle);
					for each(var d:String in _exercise.descriptors){
						var dlabel:Button=new Button();
						dlabel.id=d;
						dlabel.percentWidth=100;
						dlabel.styleName="commonLinkButton";
						dlabel.setStyle("fontSize", 11);
						dlabel.setStyle("fontWeight", "normal");
						dlabel.label=resourceManager.getString('myResources',d);
						ResourceSubscriber.getInstance().subscribeElement(dlabel, "label", "myResources", d);
						dlabel.addEventListener(MouseEvent.CLICK, descriptorClickHandler);
						descriptorContainer.addElement(dlabel);
					}
				}
			}
			
			private function removeDescriptors():void{
				if(descriptorContainer.numElements){
					ResourceSubscriber.getInstance().unsubscribeContainerElements(descriptorContainer);
					descriptorContainer.removeAllElements();
				}
			}

			private function addTagLinkButtons():void
			{
				removeTagLinkButtons();
				
				if(_exercise.tags){
					_tags = _exercise.tags is Array ? _exercise.tags : (_exercise.tags as String).split(',');

					for each (var tag:String in _tags)
					{
						var linkTag:Button=new Button();
						linkTag.styleName="commonLinkButton";
						linkTag.setStyle("fontSize", 11);
						linkTag.setStyle("fontWeight", "normal");
						linkTag.label=StringUtil.trim(tag);
						linkTag.addEventListener(MouseEvent.CLICK, tagClickHandler, false, 0, true);
						exerciseTagsBox.addElement(linkTag);
					}
				}
			}

			private function removeTagLinkButtons():void
			{
				//tagBoxSeparator.height=0;
				//exerciseTagsBox.removeAllChildren();
				if(exerciseTagsBox.numElements > 0)
					exerciseTagsBox.removeAllElements();
				_tags=null;
			}

			protected function tagClickHandler(event:MouseEvent):void
			{
				var term:String =(event.target as Button).label;
				URLManager.getInstance().redirect('/exercises/search/?q='+term);
			}
			
			protected function descriptorClickHandler(event:MouseEvent):void{
				var term:String="\""+(event.target as Button).label+"\"";
				URLManager.getInstance().redirect('/exercises/search/?q='+term);
			}

			protected function lessAdtInfoClickHandler(event:MouseEvent):void
			{
				additionalInfoBox.visible=!additionalInfoBox.visible;
				additionalInfoBox.includeInLayout=!additionalInfoBox.includeInLayout;
				_lessAdtInfoStatus=!_lessAdtInfoStatus;
			}
		]]>
	</fx:Script>

	<s:VGroup id="additionalInfoBox"
			  width="100%"
			  height="100%"
			  horizontalAlign="left"
			  paddingTop="10"
			  paddingLeft="5"
			  paddingRight="5"
			  paddingBottom="5"
			  visible="false"
			  includeInLayout="false">
		<mx:Text id="exDescription"
				 fontSize="11"
				 width="100%"/>
		<s:VGroup id="descriptorContainer" minHeight="0"/>
		<s:Label text="{resourceManager.getString('myResources','KEYWORDS')}"
				 fontWeight="bold"
				 fontSize="11"/>
		<s:TileGroup id="exerciseTagsBox"
					 width="100%"
					 horizontalGap="0"
					 minHeight="0"/>
	</s:VGroup>

	<s:VGroup id="saiBox"
			  width="100%"
			  horizontalAlign="center"
			  gap="0">
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="#666666"
									weight="1"
									alpha="1"/>
			</s:stroke>
		</s:Line>
		<s:Button id="showLessAdtInfo"
				  fontSize="10"
				  label="{_lessAdtInfoStatus ? resourceManager.getString('myResources','LESS_INFO'): resourceManager.getString('myResources','MORE_INFO') }"
				  cornerRadius="0"
				  skinClass="skins.LessAdtInfoButtonSkin"
				  click="lessAdtInfoClickHandler(event)"/>
	</s:VGroup>

</s:BorderContainer>
