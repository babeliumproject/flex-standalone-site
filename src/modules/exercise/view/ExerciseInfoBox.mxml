<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:skins="skins.*"
				   minHeight="0"
				   creationComplete="completeHandler(event)">

	<s:layout>
		<s:VerticalLayout horizontalAlign="left"
						  paddingTop="2"
						  paddingBottom="2"
						  paddingLeft="0"
						  paddingRight="0"
						  gap="0"/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			
			import control.URLManager;
			
			import model.DataModel;
			
			import modules.exercise.event.ExerciseEvent;
			import modules.exercise.event.SearchEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectUtil;
			import mx.utils.OnDemandEventDispatcher;
			
			import spark.components.Button;
			
			import utils.ExerciseRenderUtils;
			import utils.LocaleUtils;
			import utils.QueryUtils;
			
			import view.common.LicenseResource;

			private var _creationComplete:Boolean=false;

			
			private var _exercise:Object=null;
			private var _tags:Array;
			private var _dataAvailable:Boolean=false;
			private var _lessAdtInfoStatus:Boolean=false;
			
			[Bindable]
			private var lineStyle:CSSStyleDeclaration=FlexGlobals.topLevelApplication.styleManager.getStyleDeclaration(".lightBorderContainer");
			
			private var cwlblvec:Vector.<ChangeWatcher>;
			private var cwdescvec:Vector.<ChangeWatcher>;
			
			private var commitOnly:Boolean=false;
			private var useWeakReference:Boolean=false;
			
			public function completeHandler(event:FlexEvent):void
			{
				_creationComplete=true;
				
				if (lineStyle)
				{
					lineStroke1.alpha=lineStyle.getStyle('borderAlpha');
					lineStroke1.color=lineStyle.getStyle('borderColor');
					lineStroke2.alpha=lineStyle.getStyle('borderAlpha');
					lineStroke2.color=lineStyle.getStyle('borderColor');
				}
				
				exerciseData=_exercise;
			}
			
			public function resetComponent():void{
				disableComponents();
			}
			
			public function unpinComponent():void{
				if(cwlblvec){
					var i:int,length:int;
					length=cwlblvec.length;
					for (i=0;i<length;i++){
						cwlblvec[i].unwatch();
						cwlblvec[i]=null;
					}
					cwlblvec=null;
				}
				
				this.removeEventListener(FlexEvent.CREATION_COMPLETE, completeHandler);
			}

			public function set exerciseData(exercise:Object):void
			{
				_exercise=exercise;
				if (_creationComplete)
				{
					if (_exercise)
					{
					
						_dataAvailable=true;
						updateComponents();
					}
					else
					{
						_dataAvailable=false;
						disableComponents();
					}
				}
			}

			public function get exerciseData():Object
			{
				return _exercise;
			}

			private function updateComponents():void
			{
				exDescription.htmlText=_exercise.description;
				
				var exerciseType:String = ExerciseRenderUtils.getTypeLabel(_exercise.type);
				
				if(!cwlblvec) cwlblvec = new Vector.<ChangeWatcher>();
				var cw:ChangeWatcher;
				
				//exerciseTypeLbl.text=ResourceManager.getInstance().getString('myResources',exerciseType);
				cw=LocaleUtils.localizedPropertyBind(exerciseTypeLbl,'text','myResources',exerciseType,false,true);
				cwlblvec.push(cw);
				
				commSituationRow.includeInLayout=false;
				commSituationRow.visible=false;
				commCompetenceRow.includeInLayout=false;
				commCompetenceRow.visible=false;
				lingAspectsRow.includeInLayout=false;
				lingAspectsRow.visible=false;
				
				if(_exercise.type != 0 && _exercise.type!=5){
					var commSituation:String = ExerciseRenderUtils.getCommunicationSituationLabel(_exercise.situation);
					var commCompetence:String = ExerciseRenderUtils.getCommunicativeCompetenceLabel(_exercise.competence);
					var lingAspect:String = ExerciseRenderUtils.getLinguisticAspectLabel(_exercise.lingaspects);
					if(commSituation){
						//commSituationLbl.text=ResourceManager.getInstance().getString('myResources',commSituation);
						cw=LocaleUtils.localizedPropertyBind(commSituationLbl,'text','myResources',commSituation,false,true);
						cwlblvec.push(cw);
						commSituationRow.includeInLayout=true;
						commSituationRow.visible=true;
					}
					if(commCompetence){
						//commCompetenceLbl.text=ResourceManager.getInstance().getString('myResources',commCompetence);
						cw=LocaleUtils.localizedPropertyBind(commCompetenceLbl,'text','myResources',commCompetence,false,true);
						cwlblvec.push(cw);
						commCompetenceRow.includeInLayout=true;
						commCompetenceRow.visible=true;
					}
					if(lingAspect){
						//lingAspectsLbl.text=ResourceManager.getInstance().getString('myResources',lingAspect);
						cw=LocaleUtils.localizedPropertyBind(lingAspectsLbl,'text','myResources',lingAspect, false, true);
						cwlblvec.push(cw);
						lingAspectsRow.includeInLayout=true;
						lingAspectsRow.visible=true;
					}
				}
				
				var lbmp:Object=Object(LicenseResource.getLicenseData(_exercise.licence));
				licenceBitmap.source=lbmp.imageResource;
				
				attributionLbl.text=_exercise.attribution;
				//additionalInfoBox.visible=false;
				//additionalInfoBox.includeInLayout=false;
				//_lessAdtInfoStatus=false;
				addDescriptors();
				addTagLinkButtons();
			}

			private function disableComponents():void
			{
				if (DataModel.getInstance().isLoggedIn == false || _dataAvailable == false)
				{
					exDescription.htmlText="";
					exerciseTypeLbl.text="";
					commSituationRow.includeInLayout=false;
					commSituationRow.visible=false;
					commCompetenceRow.includeInLayout=false;
					commCompetenceRow.visible=false;
					lingAspectsRow.includeInLayout=false;
					lingAspectsRow.visible=false;
					
					//additionalInfoBox.visible=false;
					//additionalInfoBox.includeInLayout=false;
					//_lessAdtInfoStatus=false;
					removeDescriptors();
					removeTagLinkButtons();
				}
			}
			
			private function addDescriptors():void{
				removeDescriptors();
				if(_exercise.descriptors && _exercise.descriptors.length){
					var descriptors:Array = ArrayUtil.toArray(_exercise.descriptors);
					var sectTitle:Label=new Label();
					sectTitle.setStyle("fontWeight","bold");				
					
					var cw:ChangeWatcher;
					cw=LocaleUtils.localizedPropertyBind(sectTitle, 'text', 'myResources','DESCRIPTORS',commitOnly,true);
					cwlblvec.push(cw);
					
					descriptorContainer.addElement(sectTitle);
					
					if(!cwdescvec) cwdescvec=new Vector.<ChangeWatcher>();
					
					var i:int;
					for (i=0; i<descriptors.length; i++){
						var dlabel:Button=new Button();
						dlabel.id=descriptors[i];
						//Make the labels aware of the size changes in their parent container
						var cww:ChangeWatcher=BindingUtils.bindProperty(dlabel,'width',descriptorContainer,'width',commitOnly, useWeakReference);
						cwdescvec.push(cww);
						dlabel.styleName="btn-link";
						dlabel.buttonMode=true;
						dlabel.setStyle("fontSize", 11);
						dlabel.addEventListener(MouseEvent.CLICK, descriptorClickHandler, false, 0, true);
						descriptorContainer.addElement(dlabel);
						
						var cwd:ChangeWatcher=LocaleUtils.localizedPropertyBind(dlabel,'label','myResources',descriptors[i],commitOnly,useWeakReference);
						cwdescvec.push(cwd);
					}
				}
			}
			
			private function removeDescriptors():void{
				if(cwdescvec){
					var i:int,length:int;
					length=cwdescvec.length;
					for (i=0;i<length;i++){
						cwdescvec[i].unwatch();
						cwdescvec[i]=null;
					}
					cwdescvec=null;
				}
				if(descriptorContainer.numElements){
					for each (var item:IVisualElement in descriptorContainer){
						item.removeEventListener(MouseEvent.CLICK, descriptorClickHandler);
					}
					descriptorContainer.removeAllElements();
				}
			}

			private function addTagLinkButtons():void
			{
				removeTagLinkButtons();
				
				if(_exercise.tags){
					keywordsRow.includeInLayout=true;
					keywordsRow.visible=true;
					_tags = _exercise.tags is Array ? _exercise.tags : (_exercise.tags as String).split(',');

					var i:int;
					for (i=0; i<_tags.length; i++)
					{
						var linkTag:Button=new Button();
						linkTag.styleName="btn-link";
						linkTag.buttonMode=true;
						linkTag.setStyle("fontSize", 11);
						linkTag.setStyle("fontWeight", "normal");
						linkTag.label=StringUtil.trim(_tags[i]);
						linkTag.addEventListener(MouseEvent.CLICK, tagClickHandler, false, 0, true);
						exerciseTagsBox.addElement(linkTag);
					}
				}
			}

			private function removeTagLinkButtons():void
			{
				//tagBoxSeparator.height=0;
				//exerciseTagsBox.removeAllChildren();
				for each (var item:IVisualElement in exerciseTagsBox){
					item.removeEventListener(MouseEvent.CLICK, tagClickHandler);
				}
				if(exerciseTagsBox.numElements > 0){
					exerciseTagsBox.removeAllElements();
				}
				_tags=null;
				keywordsRow.includeInLayout=false;
				keywordsRow.visible=false;
			}

			protected function tagClickHandler(event:MouseEvent):void
			{
				var rterm:String =(event.target as Button).label;
				var fterm:String=QueryUtils.formatSearchQuery(rterm);
				if(fterm){
					URLManager.getInstance().redirect('/exercises/search/?q='+fterm);
				}
			}
			
			protected function descriptorClickHandler(event:MouseEvent):void{
				var rterm:String="\""+(event.target as Button).label+"\"";
				var fterm:String=QueryUtils.formatSearchQuery(rterm);
				if(fterm){
					URLManager.getInstance().redirect('/exercises/search/?q='+fterm);
				}
			}

			protected function lessAdtInfoClickHandler(event:MouseEvent):void
			{
				additionalInfoBox.visible=!additionalInfoBox.visible;
				additionalInfoBox.includeInLayout=!additionalInfoBox.includeInLayout;
				_lessAdtInfoStatus=!_lessAdtInfoStatus;
			}
		]]>
	</fx:Script>

	<s:VGroup id="additionalInfoBox"
			  width="100%"
			  height="100%"
			  horizontalAlign="left"
			  paddingTop="8"
			  paddingLeft="8"
			  paddingRight="8"
			  paddingBottom="8">
		<s:Label text="{ResourceManager.getInstance().getString('myResources', 'EXERCISE_DETAILS')}"
				 styleName="h5"/>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke id="lineStroke1"
									weight="1"/>
			</s:stroke>
		</s:Line>
		
		<mx:Text id="exDescription"
				 fontSize="11"
				 width="100%"
				 paddingTop="16"
				 paddingBottom="16"/>
		
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke id="lineStroke2"
									weight="1"/>
			</s:stroke>
		</s:Line>
		
		<s:HGroup width="100%" paddingTop="16">
			<s:Label text="{ResourceManager.getInstance().getString('myResources','EXERCISE_TYPE')+':'}"
					 fontWeight="bold"/>
			<s:Label id="exerciseTypeLbl"/>
		</s:HGroup>
		
		<s:HGroup width="100%" id="commSituationRow" includeInLayout="false" visible="false">
			<s:Label text="{ResourceManager.getInstance().getString('myResources','COMMUNICATION_SITUATION')+':'}"
					 fontWeight="bold"/>
			<s:Label id="commSituationLbl"/>
		</s:HGroup>
		
		<s:HGroup width="100%" id="commCompetenceRow" includeInLayout="false" visible="false">
			<s:Label text="{ResourceManager.getInstance().getString('myResources','COMMUNICATIVE_COMPETENCE')+':'}"
					 fontWeight="bold"/>
			<s:Label id="commCompetenceLbl"/>
		</s:HGroup>
		
		<s:HGroup width="100%" id="lingAspectsRow" includeInLayout="false" visible="false">
			<s:Label text="{ResourceManager.getInstance().getString('myResources','LINGUISTIC_ASPECT')+':'}"
					 fontWeight="bold"/>
			<s:Label id="lingAspectsLbl"/>
		</s:HGroup>
				
		<s:VGroup id="descriptorContainer" minHeight="0" horizontalAlign="left" width="100%"/>
		
		<s:VGroup width="100%" id="keywordsRow" includeInLayout="false" visible="false">
			<s:Label text="{ResourceManager.getInstance().getString('myResources','KEYWORDS')+':'}"
					 fontWeight="bold"/>
			<s:TileGroup id="exerciseTagsBox"
						 width="100%"
						 horizontalGap="0"
						 minHeight="0"/>
		</s:VGroup>
		
		<s:VGroup id="licenceRow">
			<s:Label text="{ResourceManager.getInstance().getString('myResources','LICENCE')+':'}"
					 fontWeight="bold"/>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:BitmapImage id="licenceBitmap" width="80" height="15"/>
				<s:Label id="attributionLbl"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>

	<!--
	<s:VGroup id="saiBox"
			  width="100%"
			  horizontalAlign="center"
			  gap="0">
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="#666666"
									weight="1"
									alpha="1"/>
			</s:stroke>
		</s:Line>
		<s:Button id="showLessAdtInfo"
				  fontSize="10"
				  label="{_lessAdtInfoStatus ? ResourceManager.getInstance().getString('myResources','LESS_INFO'): ResourceManager.getInstance().getString('myResources','MORE_INFO') }"
				  cornerRadius="0"
				  skinClass="skins.LessAdtInfoButtonSkin"
				  click="lessAdtInfoClickHandler(event)"/>
	</s:VGroup>
	-->
</s:BorderContainer>
