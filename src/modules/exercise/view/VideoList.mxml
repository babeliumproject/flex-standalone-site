<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:main="components.main.*"
		  width="100%"
		  creationComplete="onComplete()"
		  xmlns:exercises1="commands.exercises.*"
		  xmlns:common="view.common.*"
		  xmlns:skins="skins.*"
		  paddingLeft="16"
		  paddingRight="16"
		  paddingTop="16">

	<fx:Script>
		<![CDATA[
			import components.main.VideoPaginator;
			
			import modules.exercise.event.SearchEvent;
			
			import control.URLManager;
			
			import model.DataModel;
			
			import modules.exercise.event.ExerciseEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			
			import spark.components.Button;
			
			import vo.ExerciseVO;


			[Bindable]
			private var _dataProvider:ArrayCollection;

			private var _filteredResults:ArrayCollection;
			private var _filterLang:String;
			private var _filterDif:int;

			[Bindable]
			private var _currentPage:int=1;

			public var thumbURL:String='';

			public function onComplete():void
			{
				thumbURL=DataModel.getInstance().thumbURL;
				filterLanguage.selectedIndex=-1;
				filterDifficulty.selectedIndex=-1;
				//new ExerciseEvent(ExerciseEvent.GET_RECORDABLE_EXERCISES).dispatch();
			}

			public function set handleExercisesRetrieve(value:Boolean):void
			{
				//if (DataModel.getInstance().availableExercisesRetrieved.getItemAt(DataModel.RECORDING_MODULE))
				//{
				//exerciseListDatagrid.rowCount=DataModel.getInstance().availableRecordableExercises.length;
				_dataProvider=DataModel.getInstance().availableRecordableExercises;

				createPagination();

				//DataModel.getInstance().availableExercisesRetrieved.setItemAt(false, DataModel.RECORDING_MODULE);
				//}
			}

			public function set retrieveCustomizedExercises(value:Boolean):void
			{
				//trace("get recordable exercises");
				//new ExerciseEvent(ExerciseEvent.GET_RECORDABLE_EXERCISES).dispatch();
			}

			public function createPagination():void
			{
				VideoPaginator.createPaginationMenu(_dataProvider.length, DataModel.getInstance().pageSize, _currentPage, DataModel.getInstance().numberOfPagesNav, paginationBox, navigateToPage);
				refreshDataProvider();
			}

			private function navigateToPage(event:MouseEvent):void
			{
				//Go to the page
				_currentPage=int((event.target as Button).id);
				//Refresh the pagination controls
				createPagination();
			}

			public function refreshDataProvider():void
			{
				var current:int=_currentPage - 1;
				var pageSize:int=DataModel.getInstance().pageSize;
				var dataTemp:ArrayCollection=new ArrayCollection(_dataProvider.source.slice((current * pageSize), (current * pageSize) + pageSize));
				exerciseListDataGroup.dataProvider=dataTemp;
			}

			private function changeHandler(event:Event):void
			{
				var obj:ExerciseVO=List(event.target).selectedItem as ExerciseVO;

				//new ExerciseEvent(ExerciseEvent.EXERCISE_SELECTED, obj).dispatch();
				URLManager.getInstance().redirect('/exercises/view/' + obj.exercisecode);
				//callLater(updateVerticalScroll);
			}

			public function thumbSet(data:Object):String
			{
				return (thumbURL + "/" + data.thumbnailUri);
			}

			public function updateVerticalScroll():void
			{
				FlexGlobals.topLevelApplication.appContainer.verticalScrollPosition=0;
			}

			protected function filterLanguage_changeHandler(event:ListEvent):void
			{
				//Store the chosen language code
				var lCode:String=(event.target as LanguageComboBox).selectedItem.code as String;
				_filterLang=lCode;
				filterExerciseList(_filterLang, _filterDif);
			}

			protected function filterDifficulty_changeHandler(event:ListEvent):void
			{
				//Store the chosen difficulty level
				var dLevel:int=(event.target as DifficultyLevelComboBox).selectedIndex + 1;
				_filterDif=dLevel;
				filterExerciseList(_filterLang, _filterDif);
			}

			protected function filterExerciseList(lFilter:String, dFilter:int):void
			{

				var fullList:ArrayCollection=DataModel.getInstance().availableRecordableExercises;
				var filteredList:ArrayCollection=new ArrayCollection();
				for each (var e:ExerciseVO in fullList)
				{
					if (lFilter && !dFilter)
					{
						if (e.language == lFilter)
						{
							filteredList.addItem(e);
						}
					}
					else if (dFilter && !lFilter)
					{
						if (e.difficulty == dFilter)
						{
							filteredList.addItem(e);
						}
					}
					else if (dFilter && lFilter)
					{
						if (e.difficulty == dFilter && e.language == lFilter)
						{
							filteredList.addItem(e);
						}
					}
				}
				_dataProvider=filteredList;
				_currentPage=1;
				createPagination();
			}

			protected function unfilterExerciseList():void
			{
				filterLanguage.selectedIndex=-1;
				filterDifficulty.selectedIndex=-1;
				_filterLang=null;
				_filterDif=0;
				_dataProvider=DataModel.getInstance().availableRecordableExercises;
				_currentPage=1;
				createPagination();
			}

			protected function filterRemoveButton_clickHandler(event:MouseEvent):void
			{
				unfilterExerciseList();
			}

			public function removeFilters():void
			{
				unfilterExerciseList();
				filterButton.selected=false;
			}
			
			public function launchSearch(event:Event):void{
				DataModel.getInstance().searchField=searchField.text;
				//if (DataModel.getInstance().currentContentViewStackIndex != ViewChangeEvent.VIEWSTACK_SEARCH_MODULE_INDEX)
				//{
				//changeView(ViewChangeEvent.VIEW_SEARCH_MODULE, event);
				URLManager.getInstance().redirect('search');
				//}
				new SearchEvent(SearchEvent.LAUNCH_SEARCH).dispatch();
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().availableRecordableExercisesRetrieved}"
				destination="handleExercisesRetrieve"/>
	<fx:Binding source="{DataModel.getInstance().isLoggedIn}"
				destination="retrieveCustomizedExercises"/>


	<s:Label text="{resourceManager.getString('myResources','PRACTICE_EXERCISE_LIST')}"
			 styleName="sectionTitleLabel"
			 id="exerciseListTitleLabel"/>
	
	<s:HGroup>
		<s:TextInput id="searchField"
					 styleName="searchTextInput"
					 width="100%"
					 maxChars="100"
					 enter="launchSearch(null)"/>
		<s:Button label="{resourceManager.getString('myResources','SEARCH')}"
				  styleName="searchButton"
				  buttonMode="true"
				  enabled="true"
				  click="launchSearch(event)"/>
	</s:HGroup>

	<s:ToggleButton id="filterButton"
					label="{resourceManager.getString('myResources','FILTER')}"
					cornerRadius="0"/>
	<s:BorderContainer id="filterGroup"
					   visible="{filterButton.selected}"
					   includeInLayout="{filterButton.selected}"
					   width="100%"
					   backgroundAlpha="0.25"
					   backgroundColor="#666666"
					   cornerRadius="8"
					   borderVisible="false">

		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"
								paddingLeft="10"
								paddingRight="10"
								paddingTop="10"
								paddingBottom="10"/>
		</s:layout>

		<s:Label text="{resourceManager.getString('myResources','FILTER_BY_LANGUAGE')}"
				 verticalAlign="middle"/>
		<common:LanguageComboBox id="filterLanguage"
								 change="filterLanguage_changeHandler(event)"/>
		<s:Label text="{resourceManager.getString('myResources', 'FILTER_BY_DIFFICULTY')}"
				 verticalAlign="middle"/>
		<common:DifficultyLevelComboBox id="filterDifficulty"
										change="filterDifficulty_changeHandler(event)"
										prompt="{resourceManager.getString('myResources','SELECT_DIFFICULTY')}"/>
		<skins:IconButton id="filterRemoveButton"
						  label="{resourceManager.getString('myResources','FILTER_REMOVE_ALL')}"
						  styleName="commonLinkButton"
						  click="filterRemoveButton_clickHandler(event)"/>
	</s:BorderContainer>

	<s:List id="exerciseListDataGroup"
			width="100%"
			minHeight="0"
			change="changeHandler(event)"
			borderVisible="false"
			skinClass="skins.TransparentBgListSkin"
			enabled="{!DataModel.getInstance().recordingExercise}"
			itemRenderer="modules.exercise.view.ExerciseItemRenderer"
			dataProvider="{_dataProvider}">
		<s:layout>
			<s:TileLayout columnWidth="182"
						  rowHeight="225"
						  horizontalGap="20"
						  verticalGap="20"/>
		</s:layout>
	</s:List>

	<s:HGroup id="paginationBox"
			  horizontalAlign="center"
			  verticalAlign="middle"
			  width="100%"
			  height="100%"/>
</s:VGroup>
