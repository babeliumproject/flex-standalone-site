<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="false">
	<s:layout>
		<s:VerticalLayout verticalAlign="middle"/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import control.URLManager;

			import flash.globalization.DateTimeStyle;

			import model.DataModel;

			import utils.ExerciseRenderUtils;

			private const MAX_DESCRIPTION_CHARS:int=120;

			private var _model:DataModel=DataModel.getInstance();

			private var courseId:int;
			private var assignmentId:int;

			override public function set data(value:Object):void
			{
				super.data=value;

				if (value == null)
					return;

				thumbnail.source=value.thumbnail;
				videoDuration.text=ExerciseRenderUtils.formatDateTime(value.duration, DateTimeStyle.CUSTOM, DateTimeStyle.CUSTOM);
				exerciseLanguage.source=ExerciseRenderUtils.getFlagSource(value);
				diflevelLbl.text=ExerciseRenderUtils.getLevelLabel(value.difficulty);
				usernameLbl.text=value.userName;
				usernameLbl.toolTip=value.userName;
				titleLbl.text=value.title;
				titleLbl.toolTip=value.title;
				
				//Determine if the 'Add to assignment' button should be displayed
				var addToAssign:Boolean=canBeAddedToAssignment();
				addToAssignmentBtn.visible=addToAssign;
				addToAssignmentBtn.includeInLayout=addToAssign;
			}

			override protected function get hovered():Boolean
			{
				return false;
			}

			override protected function get down():Boolean
			{
				return false;
			}

			override public function get selected():Boolean
			{
				return false;
			}

			override public function get showsCaret():Boolean
			{
				return false;
			}

			protected function canBeAddedToAssignment():Boolean
			{
				var visible:Boolean=false;
				if (_model.loggedUser)
				{
					var perms:Object=_model.loggedUser.hasOwnProperty('permissions') ? _model.loggedUser.permissions : null;
					if(perms && perms.instructor){
						var courses:Array = perms.instructor; //an array of courseids in which the user is an instructor
						if(_model.tempAssignmentData && courses.indexOf(_model.tempAssignmentData.courseid) != -1){

							visible=true;
						}
					}
				}
				return visible;
			}

			protected function viewExerciseClickHandler(event:MouseEvent):void
			{
				if (data == null)
					return;
				URLManager.getInstance().redirect('/exercises/view/' + data.exercisecode);
			}

			protected function addToAssignmentClickHandler(event:MouseEvent):void
			{
				if (data == null)
					return;
				URLManager.getInstance().redirect('/assignment/add/?' + 'c=' + 2 + '&exercise=' + data.exercisecode);
			}
		]]>
	</fx:Script>

	<s:BorderContainer id="container"
					   styleName="lightBorderContainer"
					   width="182"
					   height="225">
		<s:layout>
			<s:VerticalLayout verticalAlign="top"/>
		</s:layout>

		<s:Group width="180"
				 height="135">
			<s:Graphic id="imgWrapper"
					   click="viewExerciseClickHandler(event)"
					   buttonMode="true">
				<s:BitmapImage id="thumbnail"
							   width="180"
							   height="135"/>
			</s:Graphic>

			<s:TextInput id="videoDuration"
						 styleName="videoDurationLabel"
						 x="148"
						 y="0"
						 width="32"
						 height="16"
						 editable="false"
						 selectable="false"/>
			<s:Button id="addToAssignmentBtn"
					  click="addToAssignmentClickHandler(event)"
					  label="+"
					  y="100"
					  x="4"
					  width="22"
					  height="22"
					  cornerRadius="0"/>
		</s:Group>

		<s:VGroup horizontalAlign="right"
				  width="180"
				  height="88"
				  paddingLeft="4"
				  paddingRight="4"
				  paddingTop="4"
				  paddingBottom="4">
			<s:HGroup gap="2"
					  verticalAlign="middle"
					  horizontalAlign="left"
					  width="100%">
				<s:HGroup width="100%"
						  verticalAlign="middle">
					<s:BitmapImage width="16"
								   height="16"
								   id="exerciseLanguage"/>
					<s:Label id="diflevelLbl"
							 styleName="boldYellowLabel"/>
				</s:HGroup>
				<s:Label maxWidth="120"
						 maxDisplayedLines="1"
						 id="usernameLbl"/>
			</s:HGroup>
			<s:Label id="titleLbl"
					 width="100%"
					 maxDisplayedLines="3"
					 buttonMode="true"
					 click="viewExerciseClickHandler(event)"/>
		</s:VGroup>
	</s:BorderContainer>
</s:ItemRenderer>
