<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:hulstkamp="com.hulstkamp.*"
				creationComplete="completeHandler()"
				dataChange="dataChangeHandler()"
				xmlns:skins="skins.*"
				buttonMode="true">

	<s:layout>
		<s:VerticalLayout verticalAlign="middle"/>
	</s:layout>

	<s:BorderContainer id="container"
					   styleName="lightBorderContainer"
					   width="182"
					   height="225">
		<s:layout>
			<s:VerticalLayout verticalAlign="top"/>
		</s:layout>

		<s:Group width="180"
				 height="135">
			<s:BitmapImage id="thumbnail"
					  source="{data.thumbnail}"
					  width="180"
					  height="135"/>
			<s:TextInput text="{_timeFormatter.format(data.duration)}"
						 styleName="videoDurationLabel"
						 x="148"
						 y="0"
						 width="32"
						 height="16"
						 editable="false"
						 selectable="false"/>
		</s:Group>

		<s:VGroup horizontalAlign="right"
				  width="180"
				  height="88"
				  paddingLeft="4"
				  paddingRight="4"
				  paddingTop="4"
				  paddingBottom="4">
			<s:HGroup gap="2"
					  verticalAlign="middle"
					  horizontalAlign="left"
					  width="100%">
				<s:HGroup width="100%"
						  verticalAlign="middle">
					<mx:Image width="16"
							  height="16"
							  toolTip="{exerciseLanguage.source}"
							  source="{getFlagSource(data as ExerciseVO)}"
							  id="exerciseLanguage"/>
					<s:Label text="{getLevelCorrespondence(data.difficulty)}"
							 styleName="boldYellowLabel"/>
				</s:HGroup>
				<s:Label text="{data.userName}"
						 toolTip="{data.userName}"
						 maxWidth="120"
						 maxDisplayedLines="1"/>
			</s:HGroup>
			<s:Label id="title"
					 text="{data.title}"
					 toolTip="{data.title}"
					 width="100%"
					 maxDisplayedLines="3"/>
		</s:VGroup>
	</s:BorderContainer>

	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter"
						  formatString="{resourceManager.getString('myResources','DATE_FORMAT')}"/>
	</fx:Declarations>


	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			
			import control.URLManager;
			
			import model.DataModel;
			
			import modules.exercise.event.ExerciseEvent;
			import modules.exercise.event.SearchEvent;
			import modules.subtitle.event.SubtitleEvent;
			
			import mx.controls.LinkButton;
			import mx.controls.Text;
			import mx.formatters.NumberBaseRoundType;
			import mx.formatters.NumberFormatter;
			import mx.formatters.SwitchSymbolFormatter;
			
			import view.common.IconComboBox;
			import view.common.LicenseResource;
			import view.common.TimeFormatter;
			
			import vo.ExerciseRoleVO;
			import vo.ExerciseVO;
			import vo.LicenseVO;
			import vo.SubtitleAndSubtitleLinesVO;

			private const MAX_DESCRIPTION_CHARS:int=120;

			[Bindable]
			private var _data:Object;

			private var _creationComplete:Boolean=false;

			[Bindable]
			private var _licenseData:LicenseVO=new LicenseVO();

			[Bindable]
			private var _timeFormatter:TimeFormatter=new TimeFormatter();

			public function completeHandler():void
			{
				_data=data;
				_creationComplete=true;
			}

			public function dataChangeHandler():void
			{

				//setupReferenceComponent();
			}

			public function getLevelCorrespondence(avgDifficulty:Number):String
			{
				var numFormat:NumberFormatter=new NumberFormatter();
				numFormat.precision=0;
				numFormat.rounding=NumberBaseRoundType.NEAREST;
				var roundedAvgDifficulty:int=int(numFormat.format(avgDifficulty));
				switch (roundedAvgDifficulty)
				{
					case 1:
						return 'A1';
						break;
					case 2:
						return 'A2';
						break;
					case 3:
						return 'B1';
						break;
					case 4:
						return 'B2';
						break;
					case 5:
						return 'C1';
						break;
					default:
						return '';
						break;
				}
			}

			public function getFlagSource(temp:ExerciseVO):Class
			{
				var dm:DataModel=DataModel.getInstance();
				return dm.localesAndFlags.getCountryFlagClass(temp.language);
			}
		]]>
	</fx:Script>

</s:ItemRenderer>
