<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="modules.exercise.view.*"
		  width="100%"
		  implements="modules.IModuleInterface" 
		  preinitialize="preinitializeHandler(event)"
		  creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import control.URLChangeEvent;
			import control.URLManager;
			
			import flash.utils.getDefinitionByName;
			import flash.utils.getQualifiedClassName;
			
			import model.DataModel;
			
			import modules.IGroupInterface;
			import modules.exercise.event.ExerciseEvent;
			import modules.exercise.model.ExerciseModel;
			import modules.exercise.view.ExerciseList;
			import modules.exercise.view.Exercises;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.core.IVisualElement;
			import mx.core.IVisualElementContainer;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			
			import vo.ExerciseVO;

			public var modulename:String='exercises';

			[Bindable]
			private var viewstackIndex:uint;

			public static const INDEX:uint=0;
			public static const VIEW:uint=1;

			private var _creationComplete:Boolean;
			private var _initialUrl:Event;
			private var _moduleController:*;
			
			[Bindable]
			private var _urlmanager:URLManager=URLManager.getInstance();
			
			[Bindable]
			private var _model:DataModel=DataModel.getInstance();
			
			public function getModuleName():String
			{
				return modulename;
			}

			public function setDataBindings(data:* = null):void{	
				//_moduleController = new Object();	
				if(data){
					if(data['initialurl']){
						_initialUrl=data['initialurl'];
					}
				}
			}

			public function resetModule():void
			{
				_urlmanager.removeEventListener(URLChangeEvent.CHANGE, onURLChange);
				_urlmanager=null;
				
				this.removeEventListener(FlexEvent.PREINITIALIZE, preinitializeHandler);
				this.removeEventListener(FlexEvent.CREATION_COMPLETE, creationCompleteHandler);
				this.removeEventListener(FlexEvent.ADD, componentAddedHandler);
				this.removeEventListener(FlexEvent.UPDATE_COMPLETE, componentUpdateCompleteHandler);
				
				_moduleController = null;
				_model = null;
				resetViews();
			}

			public function resetViews():void
			{
				if (moduleViewstack)
				{
					var views:Array=moduleViewstack.getChildren();
					for each (var nc:NavigatorContent in views)
					{
						if (nc.deferredContentCreated)
						{
							var v:*=nc.getElementAt(0) as IGroupInterface;
							if (v)
								v.resetGroup();
						}
					}
				}
			}

			private function actionView(parameters:Object=null):void
			{
				if(parameters){
					var ex:ExerciseVO=new ExerciseVO();
					ex.exercisecode=parameters['id'];
					viewstackIndex=VIEW;
					new ExerciseEvent(ExerciseEvent.EXERCISE_SELECTED, ex).dispatch();
				} else {
					_urlmanager.redirect('/exercises');
				}
			}

			private function actionIndex(parameters:Object=null):void
			{
				trace("ActionIndex parameters: "+ObjectUtil.toString(parameters));
				if(parameters){
					exerciseIndex.sortFilter=parameters.hasOwnProperty('sort') ? parameters.sort : null;
					exerciseIndex.langFilter=parameters.hasOwnProperty('lang') ? parameters.lang : null;
					exerciseIndex.diffFilter=parameters.hasOwnProperty('difficulty') ? parameters.difficulty : 0;
					exerciseIndex.typeFilter=parameters.hasOwnProperty('type') ? parameters.type : -1;
					exerciseIndex.sitFilter=parameters.hasOwnProperty('situation') ? parameters.situation : 0;
					exerciseIndex.searchTerm=parameters.hasOwnProperty('q') ? parameters.q : null;
				}
				viewstackIndex=INDEX;
				new ExerciseEvent(ExerciseEvent.GET_RECORDABLE_EXERCISES, parameters).dispatch();
			}

			public function onURLChange(event:Event):void{
				if(!event) return;
				
				var evt:Object=Object(event);
				
				if(!evt.module || evt.module != modulename) return;
				
				//Reset the components before changing the foreground
				resetViews();
				
				switch (evt.action)
				{
					case 'view':
						actionView(evt.parameters);
						break;
					default:
						actionIndex(evt.parameters);
						break;
				}
			}
			
			protected function preinitializeHandler(event:FlexEvent):void
			{
				this.addEventListener(FlexEvent.ADD, componentAddedHandler, false, 0, true);
				this.addEventListener(FlexEvent.UPDATE_COMPLETE, componentUpdateCompleteHandler, false, 0, true);
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_creationComplete=true;
				_urlmanager.addEventListener(URLChangeEvent.CHANGE, onURLChange, false, 0, true);
				onURLChange(_initialUrl);
			}
			
			protected function componentAddedHandler(event:FlexEvent):void{
				
				this.visible=false;
			}
			
			protected function componentUpdateCompleteHandler(event:FlexEvent):void{
				checkPermissions();
			}
			
			protected function checkPermissions():void{
				this.visible=true;
			}
			
		]]>
	</fx:Script>

	<mx:ViewStack id="moduleViewstack"
				  selectedIndex="{ viewstackIndex }"
				  resizeToContent="true"
				  width="100%"
				  height="100%">
		<s:NavigatorContent id="index">
			<view:ExerciseList id="exerciseIndex"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="view">
			<view:Exercises id="exerciseView"/>
		</s:NavigatorContent>
	</mx:ViewStack>

</s:Module>
