<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="modules.create.view.*"
		  width="100%"
		  implements="modules.IModuleInterface" 
		  preinitialize="preinitializeHandler(event)"
		  creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.FrontController;
			
			import events.UserEvent;
			
			import control.BabeliaBrowserManager;
			
			import flash.utils.getDefinitionByName;
			
			import model.DataModel;
			
			import modules.create.command.GetLatestCreations;
			import modules.create.event.CreateEvent;
			import modules.exercise.view.IGroupInterface;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;

			public var modulename:String = 'create';
			
			[Bindable]
			private var _urlmanager:BabeliaBrowserManager=BabeliaBrowserManager.getInstance();
			
			[Bindable]
			private var _model:DataModel=DataModel.getInstance();
			
			[Bindable]
			private var _viewstackIndex:uint;
			
			private var _creationComplete:Boolean;
			
			public static const INDEX:uint=0;
			public static const MANAGE:uint=1;
			public static const EDIT:uint=2;
			
			private var changewatcher:ChangeWatcher;
			
			public function getModuleName():String{
				return modulename;
			}
			
			public function setDataBindings(data:* = null):void{
				
				FlexGlobals.topLevelApplication.appController.addCommand(UserEvent.RETRIEVE_USER_VIDEOS, getDefinitionByName("modules.create.command.RetrieveUserVideosCommand") as Class);
				FlexGlobals.topLevelApplication.appController.addCommand(UserEvent.DELETE_SELECTED_VIDEOS, getDefinitionByName("modules.create.command.DeleteSelectedVideosCommand") as Class);
				FlexGlobals.topLevelApplication.appController.addCommand(UserEvent.MODIFY_VIDEO_DATA, getDefinitionByName("modules.create.command.ModifyVideoDataCommand") as Class);

				FlexGlobals.topLevelApplication.appController.addCommand(CreateEvent.GET_LATEST_CREATIONS, getDefinitionByName("modules.create.command.GetLatestCreations") as Class);
				changewatcher=BindingUtils.bindSetter(onURLChange, _urlmanager, "actionFragment");
			}
			
			public function resetModule():void{
				changewatcher.unwatch();
				resetViews();
			}
			
			public function resetViews():void{
				if (createViewstack)
				{
					var views:Array=createViewstack.getChildren();
					for each (var nc:NavigatorContent in views)
					{
						if (nc.deferredContentCreated)
						{
							var v:*=nc.getElementAt(0) as IGroupInterface;
							if (v)
								v.resetGroup();
						}
					}
				}
			}
			
			public function onURLChange(value:String):void{
				if (_urlmanager.moduleName != modulename)
					return;
				
				resetViews();
				switch (_urlmanager.actionFragment)
				{
					case 'manage':
						actionManage(_urlmanager.targetFragment);
						break;
					case 'edit':
						actionEdit(_urlmanager.targetFragment);
						break;
					default:
						actionIndex();
						break;
				}
			}
			
			public function actionEdit(fragment:String):void{
				trace("create edit call");
				_viewstackIndex=EDIT;
			}
			
			public function actionManage(fragment:String):void{
				trace("create manage call");
				_viewstackIndex=MANAGE;
			}
			
			public function actionIndex(fragment:String = null):void{
				trace("create index call");
				_viewstackIndex=INDEX;
			}
			
			protected function preinitializeHandler(event:FlexEvent):void
			{
				//if(!_model.moduleMap.hasOwnProperty(modulename))
				//	_model.moduleMap[modulename] = new CourseModel();
				
				// The Event.ADDED and Event.ADDED_TO_STAGE events are dispatched before FlexEvent.PREINITIALIZE
				// that leaves only FlexEvent.ADD to know the component has been added as a child somewhere.
				this.addEventListener(FlexEvent.ADD, componentAddedHandler);
				this.addEventListener(FlexEvent.REMOVE, componentRemovedHandler);
				this.addEventListener(FlexEvent.UPDATE_COMPLETE, componentUpdateCompleteHandler);
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_creationComplete=true;
			}
			
			protected function componentAddedHandler(event:FlexEvent):void{
				this.visible=false;
			}
			
			protected function componentRemovedHandler(event:FlexEvent):void{
				
			}
			
			protected function componentUpdateCompleteHandler(event:FlexEvent):void{
				checkPermissions();
			}
			
			protected function checkPermissions():void{
				if (!DataModel.getInstance().isLoggedIn)
				{
					BabeliaBrowserManager.getInstance().updateURL('login');
					return;
				}
				this.visible=true;
			}
		]]>
	</fx:Script>
	
	<mx:ViewStack id="createViewstack"
				  selectedIndex="{ _viewstackIndex }"
				  resizeToContent="true"
				  width="100%"
				  height="100%">
		<s:NavigatorContent id="index">
			<view:CreateIndexView id="createIndex" width="100%"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="manage">
			<view:CreateManageView id="createManage" width="100%"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="edit">
			<view:ExerciseCreate id="createEdit" width="100%"/>
		</s:NavigatorContent>
	</mx:ViewStack>
	
</s:Module>
