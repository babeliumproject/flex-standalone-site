<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:userManagement="components.userManagement.*"
		  xmlns:view="modules.create.view.*"
		  width="100%"
		  paddingBottom="16"
		  paddingLeft="16"
		  paddingRight="16"
		  paddingTop="16"
		  creationComplete="creationCompleteHandler(event)" xmlns:skins="skins.*">
	<fx:Script>
		<![CDATA[
			import events.UserEvent;
			
			import spark.components.Button;
			
			import components.main.VideoPaginator;
			
			import model.DataModel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import view.common.CustomAlert;
			
			import vo.ExerciseVO;
			import vo.UserVO;

			[Bindable]
			private var dataModel:DataModel=DataModel.getInstance();

			private var paginationIdx:uint=1;
			
			private var _creationComplete:Boolean = false;

			[Bindable]
			private var userExerciseList:ArrayCollection;

			private var itemsToDelete:Array=new Array();

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				retrieveExercises();
				_creationComplete = true;
			}

			private function retrieveExercises():void
			{
				paginationIdx=1;
				new UserEvent(UserEvent.RETRIEVE_USER_VIDEOS).dispatch();
			}

			private function set userExerciseListRetrieved(value:Boolean):void
			{
				var dataProvider:ArrayCollection=dataModel.userVideoList;
				userExerciseList=dataProvider;
				createPagination(userExerciseGrid, userExerciseList, paginationIdx, userExercisePaginator, paginationButtonClickHandler);

			}

			public function createPagination(targetDatagrid:DataGrid, dataProvider:ArrayCollection, currentPageIndicator:uint, paginationContainer:HGroup, pageClickHandler:Function):void
			{
				VideoPaginator.createPaginationMenu(dataProvider.length, dataModel.pageSize, currentPageIndicator, dataModel.numberOfPagesNav, paginationContainer, pageClickHandler);
				refreshDataProvider(targetDatagrid, dataProvider, currentPageIndicator);
			}

			public function refreshDataProvider(targetDatagrid:DataGrid, dataProvider:ArrayCollection, currentPageIndicator:uint):void
			{
				var current:int=currentPageIndicator - 1;
				var pageSize:int=dataModel.pageSize;
				var dataTemp:ArrayCollection=new ArrayCollection(dataProvider.source.slice((current * pageSize), (current * pageSize) + pageSize));
				targetDatagrid.rowCount=dataTemp.length;
				targetDatagrid.dataProvider=dataTemp;
			}

			private function paginationButtonClickHandler(event:MouseEvent):void
			{
				paginationIdx=int((event.target as Button).id);
				createPagination(userExerciseGrid, userExerciseList, paginationIdx, userExercisePaginator, paginationButtonClickHandler);
			}

			protected function deleteExercisesButtonClickHandler(event:MouseEvent):void
			{
				itemsToDelete=new Array();
				for (var i:int=0; i < userExerciseList.length; i++)
				{
					if (userExerciseList[i].itemSelected == true)
					{
						itemsToDelete.push(userExerciseList[i]);
					}
				}
				if (itemsToDelete.length > 0)
					CustomAlert.confirm(resourceManager.getString('myResources', 'CONFIRM_VIDEO_DELETE'), Alert.YES | Alert.NO, FlexGlobals.topLevelApplication.parent, deleteSelectedExercisesChoiceHandler, Alert.NO);
			}

			private function deleteSelectedExercisesChoiceHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
					deleteSelectedExercises();
			}

			private function deleteSelectedExercises():void
			{
				new UserEvent(UserEvent.DELETE_SELECTED_VIDEOS, itemsToDelete).dispatch();
			}

			private function set deleteSelectedExercisesResult(value:Boolean):void
			{
				if (dataModel.selectedVideosDeleted)
				{
					itemsToDelete=new Array();
					retrieveExercises();
					dataModel.selectedVideosDeleted=false;
				}
			}

			public function resetComponent():void
			{
				paginationIdx=1;
				itemsToDelete=new Array();
				editCancelHandler(null);
				if(_creationComplete){
					retrieveExercises();
				}
			}
			
			public function editSelectedExercise(data:ExerciseVO):void{
				/*
				videoEditPanel.setInformation(data);
				videoListPanel.includeInLayout = false;
				videoListPanel.visible = false;
				videoEditPanel.includeInLayout = true;
				videoEditPanel.visible = true;
				*/
			}
			
			private function editCancelHandler(event:MouseEvent):void{
				/*
				videoListPanel.includeInLayout = true;
				videoListPanel.visible = true;
				videoEditPanel.includeInLayout = false;
				videoEditPanel.visible = false;
				videoEditPanel.resetComponent();
				*/
			}

			protected function searchButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
			}
		]]>
	</fx:Script>

	<fx:Binding source="{dataModel.userVideoListRetrieved}"
				destination="userExerciseListRetrieved"/>

	<fx:Binding source="{dataModel.selectedVideosDeleted}"
				destination="deleteSelectedExercisesResult"/>

	<s:VGroup id="videoListPanel"
			  width="100%"
			  height="100%">
		<s:Label id="myVideosTitle"
				 text="{resourceManager.getString('myResources','MY_VIDEOS')}"
				 styleName="sectionTitleLabel"/>
		<s:Line width="{myVideosTitle.width}">
			<s:stroke>
				<mx:SolidColorStroke weight="3"
									 color="{myVideosTitle.getStyle('color')}"/>
			</s:stroke>
		</s:Line>
		<s:Label text="{resourceManager.getString('myResources','MY_VIDEOS_DESCRIPTION')}"
				 paddingTop="10"
				 paddingBottom="10"/>

		<s:BorderContainer id="controlBar"
						   width="100%"
						   minHeight="0"
						   backgroundAlpha="0.5"
						   styleName="roundedBorderGreyBox">

			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"
									paddingBottom="8"
									paddingLeft="8"
									paddingRight="8"
									paddingTop="8"/>
			</s:layout>

			<skins:IconButton id="deleteExercisesButton"
					  click="deleteExercisesButtonClickHandler(event)"
					  label="{resourceManager.getString('myResources','DELETE')}"
					  styleName="btn-danger"/>
			<mx:VRule height="20"/>
			<s:Label id="exerciseCount"
					 paddingLeft="16"
					 paddingRight="16"
					 text="{userExerciseList.length > 1 ? StringUtil.substitute(resourceManager.getString('myResources','VIDEO_COUNT_MANY'),userExerciseList.length) : StringUtil.substitute(resourceManager.getString('myResources','VIDEO_COUNT_SINGLE'),userExerciseList.length)}"/>
			<!--
			<mx:VRule height="20"/>
			<s:Label text="{resourceManager.getString('myResources','SORT_BY')+':'}"/>
			<s:DropDownList id="sortOptions"/>
			<s:HGroup width="100%"
					  horizontalAlign="right">
				<s:TextInput id="searchMyVideos"/>
				<s:Button id="searchButton"
						  click="searchButton_clickHandler(event)"
						  label="{resourceManager.getString('myResources','SEARCH')}"/>
			</s:HGroup>
			-->
		</s:BorderContainer>

		<mx:DataGrid id="userExerciseGrid"
					 dataProvider="{userExerciseList}"
					 width="100%"
					 horizontalScrollPolicy="off"
					 verticalScrollPolicy="off"
					 headerHeight="0"
					 horizontalGridLines="true"
					 horizontalGridLineColor="0xaaaaaa"
					 contentBackgroundAlpha="0.0"
					 alternatingItemColors="{[]}"
					 selectable="false"
					 variableRowHeight="true">
			<mx:columns>

				<mx:DataGridColumn itemRenderer="modules.create.view.CreationItemRenderer"/>
			</mx:columns>
		</mx:DataGrid>
		<s:HGroup id="userExercisePaginator"
				  width="100%"
				  horizontalAlign="center"
				  gap="2"/>

	</s:VGroup>

	<!--
	<view:UserVideoInfoEdit id="videoEditPanel"
									  includeInLayout="false"
									  visible="false"
									  cancelClickHandler="{editCancelHandler}"/>
	-->
</s:VGroup>
