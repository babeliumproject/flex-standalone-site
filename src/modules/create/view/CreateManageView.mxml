<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:userManagement="components.userManagement.*"
		  xmlns:view="modules.create.view.*"
		  width="100%"
		  paddingBottom="16"
		  paddingLeft="16"
		  paddingRight="16"
		  paddingTop="16"
		  implements="modules.IPinnedGroupInterface"
		  creationComplete="onComplete(event)">
	<fx:Script>
		<![CDATA[
			import components.main.VideoPaginator;
			
			import events.UserEvent;
			
			import model.DataModel;
			
			import modules.create.event.CreateEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			
			import spark.components.Button;
			
			import utils.LocaleUtils;
			
			import view.common.CustomAlert;
			
			import vo.ExerciseVO;
			import vo.UserVO;

			private var dataModel:DataModel=DataModel.getInstance();

			private var paginationIdx:uint=1;
		
			private var userExerciseList:ArrayCollection;

			private var itemsToDelete:Array;
			
			private var commitOnly:Boolean=false;
			private var useWeakReference:Boolean=false;
			
			private var cw1:ChangeWatcher,cw2:ChangeWatcher,cw3:ChangeWatcher;

			protected function onComplete(event:FlexEvent):void
			{
				cw1=BindingUtils.bindSetter(userExerciseListRetrieved,dataModel,'userVideoListRetrieved',commitOnly,useWeakReference);
				cw2=BindingUtils.bindSetter(deleteSelectedExercisesResult,dataModel,'selectedVideosDeleted',commitOnly,useWeakReference);
				deleteExercisesButton.enabled=false;
				setupExerciseCounter();
			}
			
			protected function setupExerciseCounter():void{
				var code:String = 'VIDEO_COUNT_MANY';
				var count:int = userExerciseList ? userExerciseList.length : 0;
				if(count==1){
					code = 'VIDEO_COUNT_SINGLE';
				}
				if(cw3) cw3.unwatch();
				cw3=LocaleUtils.localizedTemplatePropertyBind(exerciseCount,'text','myResources',code,count);
			}
			
			public function resetGroup():void
			{
				paginationIdx=1;
				itemsToDelete=null;
				userExerciseList=null;
				deleteExercisesButton.enabled=false;
				
				//Reset related model data
				dataModel.userVideoList=null;
			}
			
			public function unpinGroup():void{
				if(cw1) cw1.unwatch();
				if(cw2) cw2.unwatch();
				if(cw3) cw3.unwatch();
				cw1=null;
				cw2=null;
				cw3=null;
				
				deleteExercisesButton.removeEventListener(MouseEvent.CLICK, deleteExercisesButtonClickHandler);
				
				this.removeEventListener(FlexEvent.CREATION_COMPLETE, onComplete);
			}

			private function userExerciseListRetrieved(value:Boolean):void
			{
				var dataProvider:ArrayCollection=dataModel.userVideoList;
				userExerciseList=dataProvider;
				setupExerciseCounter();
				deleteExercisesButton.enabled= userExerciseList ? true : false;
				createPagination(userExerciseGrid, userExerciseList, paginationIdx, userExercisePaginator, paginationButtonClickHandler);

			}
			
			private function deleteSelectedExercisesResult(value:Boolean):void
			{
				if (dataModel.selectedVideosDeleted)
				{
					itemsToDelete=null;
					retrieveExercises();
					dataModel.selectedVideosDeleted=false;
				}
			}

			public function createPagination(targetDatagrid:DataGrid, dataProvider:ArrayCollection, currentPageIndicator:uint, paginationContainer:HGroup, pageClickHandler:Function):void
			{
				VideoPaginator.createPaginationMenu(dataProvider.length, dataModel.pageSize, currentPageIndicator, dataModel.numberOfPagesNav, paginationContainer, pageClickHandler);
				refreshDataProvider(targetDatagrid, dataProvider, currentPageIndicator);
			}

			public function refreshDataProvider(targetDatagrid:DataGrid, dataProvider:ArrayCollection, currentPageIndicator:uint):void
			{
				var current:int=currentPageIndicator - 1;
				var pageSize:int=dataModel.pageSize;
				var dataTemp:ArrayCollection=new ArrayCollection(dataProvider.source.slice((current * pageSize), (current * pageSize) + pageSize));
				targetDatagrid.rowCount=dataTemp.length;
				targetDatagrid.dataProvider=dataTemp;
			}

			private function paginationButtonClickHandler(event:MouseEvent):void
			{
				paginationIdx=int((event.target as Button).id);
				createPagination(userExerciseGrid, userExerciseList, paginationIdx, userExercisePaginator, paginationButtonClickHandler);
			}

			protected function deleteExercisesButtonClickHandler(event:MouseEvent):void
			{
				itemsToDelete=new Array();
				for (var i:int=0; i < userExerciseList.length; i++)
				{
					if (userExerciseList[i].itemSelected == true)
					{
						itemsToDelete.push(userExerciseList[i]);
					}
				}
				if (itemsToDelete.length > 0)
					CustomAlert.confirm(ResourceManager.getInstance().getString('myResources', 'CONFIRM_VIDEO_DELETE'), Alert.YES | Alert.NO, FlexGlobals.topLevelApplication.parent, deleteSelectedExercisesChoiceHandler, Alert.NO);
			}

			private function deleteSelectedExercisesChoiceHandler(event:CloseEvent):void
			{
				
				if (event.detail == Alert.YES)
					deleteSelectedExercises();
			}

			private function deleteSelectedExercises():void
			{
				new CreateEvent(CreateEvent.DELETE_SELECTED_CREATIONS, itemsToDelete).dispatch();
			}

			private function retrieveExercises():void
			{
				paginationIdx=1;
				new CreateEvent(CreateEvent.LIST_CREATIONS).dispatch();
			}
			
		]]>
	</fx:Script>

	<s:VGroup id="videoListPanel"
			  width="100%"
			  height="100%">
		<s:Label id="myVideosTitle"
				 text="{ResourceManager.getInstance().getString('myResources','MY_VIDEOS')}"
				 styleName="h2"/>
		<s:Label text="{ResourceManager.getInstance().getString('myResources','MY_VIDEOS_DESCRIPTION')}"
				 paddingTop="10"
				 paddingBottom="10"/>

		<s:BorderContainer id="controlBar"
						   width="100%"
						   minHeight="0"
						   backgroundAlpha="0.5"
						   styleName="roundedBorderGreyBox">

			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"
									paddingBottom="8"
									paddingLeft="8"
									paddingRight="8"
									paddingTop="8"/>
			</s:layout>

			<s:Button id="deleteExercisesButton"
					  click="deleteExercisesButtonClickHandler(event)"
					  label="{ResourceManager.getInstance().getString('myResources','DELETE')}"
					  styleName="btn-danger"/>
			<mx:VRule height="20"/>
			<s:Label id="exerciseCount"
					 paddingLeft="16"
					 paddingRight="16"/>
		</s:BorderContainer>

		<mx:DataGrid id="userExerciseGrid"
					 width="100%"
					 horizontalScrollPolicy="off"
					 verticalScrollPolicy="off"
					 headerHeight="0"
					 horizontalGridLines="true"
					 horizontalGridLineColor="0xaaaaaa"
					 contentBackgroundAlpha="0.0"
					 alternatingItemColors="{[]}"
					 selectable="false"
					 variableRowHeight="true">
			<mx:columns>
				<mx:DataGridColumn itemRenderer="modules.create.view.CreationItemRenderer"/>
			</mx:columns>
		</mx:DataGrid>
		<s:HGroup id="userExercisePaginator"
				  width="100%"
				  horizontalAlign="center"
				  gap="2"/>
	</s:VGroup>
</s:VGroup>
