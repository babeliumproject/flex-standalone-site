<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:skins="skins.*"
		 xmlns:videoUpload="components.videoUpload.*"
		 xmlns:view="modules.create.view.*"
		 xmlns:common="view.common.*">
	
	<fx:Script>
		<![CDATA[
			import events.UploadEvent;
			
			import mx.resources.ResourceManager;
			
			import model.DataModel;


			
			private var fileUpload:FileUpload;
			private var filename:String;
			private var filesize:uint;
			
			
			public function get mediaName():String
			{
				return filename;
			}
			
			public function resetComponent():void
			{
				fileUpload=null;
				filename=null;
				filesize=0;
				updateUploadProgress();
				//uploadStatus.text='';
				uploadFilename.text='';
				chooseMediaTypeContainer.includeInLayout=true;
				chooseMediaTypeContainer.visible=true;
				uploadWidget.includeInLayout=false;
				uploadWidget.visible=false;
				errorMessageContainer.visible=false;
				errorMessageContainer.includeInLayout=false;
			}
			
			protected function uploadFile_clickHandler(event:MouseEvent):void
			{
				fileUpload = new FileUpload(DataModel.getInstance().maxFileSize, DataModel.getInstance().uploadURL);
				fileUpload.addEventListener(FileUploadEvent.FILE_SELECTED, uploadStart, false, 0, true);
				fileUpload.addEventListener(FileUploadEvent.IO_ERROR, uploadStart, false, 0, true);
				fileUpload.addEventListener(FileUploadEvent.SECURITY_ERROR, uploadStart, false, 0, true);
				fileUpload.addEventListener(FileUploadEvent.UPLOAD_ERROR, uploadStart, false, 0, true);
				fileUpload.addEventListener(FileUploadEvent.HTTP_STATUS_ERROR, uploadStart, false, 0, true);
				fileUpload.addEventListener(FileUploadEvent.UPLOAD_PROGRESS, uploadProgress, false, 0, true);
				fileUpload.addEventListener(FileUploadEvent.UPLOAD_COMPLETE, uploadStart, false, 0, true);
				fileUpload.addEventListener(FileUploadEvent.UPLOAD_COMPLETE_DATA, uploadStart, false, 0, true);
				
				fileUpload.browse();
			}
			
			protected function recordFile_clickHandler(event:MouseEvent):void
			{
				methodSelection.visible=false;
				methodSelection.includeInLayout=false;
				recFromWebcamBox.visible=true;
				recFromWebcamBox.includeInLayout=true;
			}
			
			protected function cancelUpload_clickHandler(event:MouseEvent):void
			{
				clearUpload();
				resetComponent();
			}
			
			protected function clearUpload():void
			{
				updateUploadProgress();
				new UploadEvent(UploadEvent.UPLOAD_CANCEL).dispatch();
			}
			
			protected function updateUploadProgress(percentLoaded:Number=0):void
			{
				uploadProgressBar.setProgress(percentLoaded, 100);
				uploadProgressBar.validateNow();
			}
			
			protected function uploadStart(event:FileUploadEvent):void
			{
				filename=fileUpload.fileName();
				filesize=fileUpload.fileSize();
				uploadFilename.text=filename;
				updateUploadProgress();
				chooseMediaTypeContainer.includeInLayout=false;
				chooseMediaTypeContainer.visible=false;
				uploadWidget.includeInLayout=true;
				uploadWidget.visible=true;
				cancelUpload.visible=true;
				fileUpload.upload();
			}
			
			protected function uploadProgress(event:FileUploadEvent):void
			{
				var bytesLoaded:int=event.bytesLoaded;
				var bytesTotal:int=event.bytesTotal;
				var percentLoaded:Number=Math.round((bytesLoaded / bytesTotal) * 100);
				updateUploadProgress(percentLoaded);
			}
			
			protected function uploadComplete(event:FileUploadEvent):void
			{
				//success, data, data.filename, data.filemimetype, error
				var messageXML:XML=new XML(event.data);
				if (messageXML.status == "success"){
					var uploadFileName:String = messageXML.response.filename;
				}
				else{
					var uploadErrors:String=messageXML.response.message;
				}
				
				
					//uploadStatus.text=resourceManager.getString('myResources', 'UPLOADSUCCESSFULUPLOAD');
					uploadProgressBar.label=ResourceManager.getInstance().getString('myResources', 'PROCESSING').toUpperCase() + ' ...';
					//cancelUpload.label=resourceManager.getString('myResources', 'DONE');
					cancelUpload.label='Save Changes';
					cancelUpload.enabled=false;
				
					displayUploadErrors();
				
			}
			
			protected function displayUploadErrors():void
			{
				chooseMediaTypeContainer.visible=false;
				chooseMediaTypeContainer.includeInLayout=false;
				//Reset this widget
				uploadWidget.visible=false;
				uploadWidget.includeInLayout=false;
				//Reset this widget
				errorMessage.text=DataModel.getInstance().uploadErrors;
				errorMessageContainer.visible=true;
				errorMessageContainer.includeInLayout=true;
				//Add a button to go back to choosemediatypecontainer
			}
			
			protected function cancelCaptureClickHandler(event:Event):void
			{
				recFromWebcamBox.resetComponent();
				recFromWebcamBox.includeInLayout=false;
				recFromWebcamBox.visible=false;
				methodSelection.visible=true;
				methodSelection.includeInLayout=true;
			}
			
			protected function uploadCaptureClickHandler(event:Event):void
			{
				
			}

			
		]]>
	</fx:Script>
	
	<s:BorderContainer id="chooseMediaTypeContainer"
					   styleName="lightBorderContainer"
					   width="640"
					   height="380">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		
		<s:VGroup id="methodSelection"
				  includeInLayout="true"
				  visible="true"
				  width="100%"
				  height="100%"
				  horizontalAlign="center"
				  verticalAlign="middle">
			<s:Label id="chooseMethod"
					 text="{resourceManager.getString('myResources','CHOOSE_MEDIA_ORIGIN')+':'}"
					 fontSize="20"/>
			<s:HGroup visible="true"
					  includeInLayout="true"
					  paddingTop="80">
				<skins:IconButton id="uploadFile"
								  styleName="btn-primary"
								  click="uploadFile_clickHandler(event)"
								  label="{resourceManager.getString('myResources','FILE')}"/>
				<skins:IconButton id="recordFile"
								  styleName="btn-primary"
								  click="recordFile_clickHandler(event)"
								  label="{resourceManager.getString('myResources','WEBCAM_CAPTURE')}"
								  buttonMode="true"/>
			</s:HGroup>
		</s:VGroup>
		
		<view:WebcamCapture id="recFromWebcamBox"
							streamsFolder="{DataModel.getInstance().exerciseStreamsFolder}"
							filePrefix="upld"
							includeInLayout="false"
							visible="false"
							width="100%"
							height="100%"
							cancelClickHandler="{cancelCaptureClickHandler}"
							uploadClickHandler="{uploadCaptureClickHandler}"/>
	</s:BorderContainer>
	
	<s:BorderContainer id="uploadWidget"
					   styleName="lightBorderContainer"
					   visible="false"
					   includeInLayout="false"
					   width="100%">
		<s:layout>
			<s:HorizontalLayout paddingBottom="10"
								paddingLeft="10"
								paddingRight="10"
								paddingTop="10"/>
		</s:layout>
		
		<s:Image source="resources/images/thumbs/nothumb.png"/>
		<s:VGroup width="100%">
			<s:HGroup verticalAlign="middle"
					  width="100%">
				<s:VGroup width="100%">
					<s:Label id="uploadFilename"/>
					<mx:ProgressBar id="uploadProgressBar"
									mode="manual"
									labelPlacement="center"
									label="{resourceManager.getString('myResources', 'UPLOADING').toUpperCase()+' ...'}"
									trackHeight="30"
									width="100%"/>
				</s:VGroup>
				<s:Button id="cancelUpload"
						  click="cancelUpload_clickHandler(event)"
						  label="{resourceManager.getString('myResources','CANCEL')}"
						  cornerRadius="1"
						  visible="false"
						  height="40"/>
			</s:HGroup>
			
		</s:VGroup>
	</s:BorderContainer>
	
	<s:BorderContainer id="errorMessageContainer"
					   styleName="lightBorderContainer"
					   visible="false"
					   includeInLayout="false"
					   width="100%"
					   minHeight="100">
		<s:layout>
			<s:HorizontalLayout paddingBottom="10"
								paddingLeft="10"
								paddingRight="10"
								paddingTop="10"
								verticalAlign="middle"
								horizontalAlign="center"/>
		</s:layout>
		
		<s:Label id="errorMessage"/>
	</s:BorderContainer>
	
</s:Group>
