<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:common="view.common.*"
		  xmlns:skins="skins.*"
		  width="100%"
		  creationComplete="completeHandler(event)"
		  xmlns:view="modules.create.view.*">


	<s:Label id="editVideoTitle"
			 text="{resourceManager.getString('myResources','EDIT_VIDEO_INFO')}"
			 styleName="sectionTitleLabel"/>
	<s:Line width="{editVideoTitle.width}">
		<s:stroke>
			<mx:SolidColorStroke weight="3"
								 color="{editVideoTitle.getStyle('color')}"/>
		</s:stroke>
	</s:Line>

	<s:BorderContainer id="chooseMediaTypeContainer"
					   styleName="lightBorderContainer"
					   width="100%">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>

		<s:Form width="100%">
			<s:FormItem label="{resourceManager.getString('myResources','TITLE')}"
						width="100%"
						required="true">
				<s:TextInput width="100%"
							 id="exerciseTitle"
							 styleName="frm-input"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','DESCRIPTION')}"
						width="100%"
						required="true">
				<mx:RichTextEditor width="100%"
								   id="exerciseDescription"
								   dropShadowVisible="false"
								   headerHeight="0"
								   fontWeight="normal"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','KEYWORDS')}"
						width="100%"
						toolTip="{resourceManager.getString('myResources','COMMA_SEPARATED_WORDS')}"
						required="true">
				<s:TextArea width="100%"
							heightInLines="3"
							id="exerciseKeywords"
							styleName="frm-textarea"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','DIFFICULTY_LEVEL')}"
						required="true"
						width="100%">
					<common:DifficultyLevelComboBox id="difficultySelector"
													change="onDifficultyChange(event)"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','LANGUAGE')}"
						required="true">
				<common:LanguageComboBox id="languageSelector"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources', 'EXERCISE_TYPE')}">
				<view:EnhancedDropDownList id="exerciseTypeDropdown"
										   skinClass="skins.BootstrapDropDownList"
										   cornerRadius="3"
										   borderColor="0xcccccc"
										   requireSelection="true"
										   resourceDataProvider="{dpExerciseType}"
										   sortItems="true"
										   change="onConditionalDropdownChange(event)"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','COMMUNICATION_SITUATION')}">
				<view:EnhancedDropDownList id="commSituationDropdow"
										   skinClass="skins.BootstrapDropDownList"
										   cornerRadius="3"
										   borderColor="0xcccccc"
										   requireSelection="true"
										   resourceDataProvider="{dpCommSituation}"
										   sortItems="true"
										   change="onConditionalDropdownChange(event)"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','COMMUNICATIVE_COMPETENCE')}"
						width="100%">
				<s:HGroup width="100%">
					<view:EnhancedDropDownList id="commCompetenceDropdow"
											   skinClass="skins.BootstrapDropDownList"
											   cornerRadius="3"
											   borderColor="0xcccccc"
											   requireSelection="true"
											   resourceDataProvider="{dpCommCompetence}"
											   sortItems="true"
											   change="onConditionalDropdownChange(event)"/>
					<skins:IconButton id="showDescriptorsButton"
									  styleName="btn-link"
									  label="{resourceManager.getString('myResources','DESCRIPTORS')}"
									  click="showHideDescriptorsClickHandler(event)"/>
				</s:HGroup>
				<s:VGroup id="descriptorContainer"
						  width="100%"
						  visible="false"
						  includeInLayout="false"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','LINGUISTIC_ASPECT')}">
				<view:EnhancedDropDownList id="lingAspectDropdown"
										   skinClass="skins.BootstrapDropDownList"
										   cornerRadius="3"
										   borderColor="0xcccccc"
										   requireSelection="true"
										   resourceDataProvider="{dpLingAspect}"
										   sortItems="true"/>
			</s:FormItem>		
		</s:Form>
	</s:BorderContainer>

	<s:HGroup width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle">
		<skins:IconButton id="saveButton"
						  styleName="btn-success"
						  label="{resourceManager.getString('myResources','SAVE_AND_CONTINUE')}"
						  click="saveChangesClickHandler(event)"/>
	</s:HGroup>

	<fx:Binding source="{DataModel.getInstance().exerciseDataRetrieved}"
				destination="setInformation"/>

	<fx:Binding source="{DataModel.getInstance().exerciseDataModified}"
				destination="videoDataModified"/>

	<fx:Declarations>
		<mx:StringValidator id="titleValidator"
							source="{exerciseTitle}"
							property="text"
							minLength="3"
							maxLength="80"/>
		<mx:StringValidator id="descriptionValidator"
							source="{exerciseDescription}"
							property="htmlText"
							minLength="3"/>
		<mx:StringValidator id="tagValidator"
							source="{exerciseKeywords}"
							property="text"
							minLength="3"
							maxLength="255"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import events.UserEvent;
			
			import skins.BootstrapCheckBox;
			
			import model.DataModel;
			import model.LocalesAndFlags;
			import model.ResourceSubscriber;
			
			import modules.create.event.CreateEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			import mx.validators.Validator;
			
			import spark.components.CheckBox;
			
			import view.common.CustomAlert;
			
			import vo.ExerciseVO;

			private var _dataModel:DataModel=DataModel.getInstance();
			private var _descriptors:Array;
			private var _localesAndFlags:LocalesAndFlags=DataModel.getInstance().localesAndFlags;

			// Holds a reference to the currently focussed control on the form.
			private var focussedFormControl:DisplayObject;

			[Bindable]
			public var formIsValid:Boolean=false;
			[Bindable]
			private var exerciseData:ExerciseVO;

			private function completeHandler(event:FlexEvent):void
			{
				exerciseTitle.addEventListener(Event.CHANGE, validateForm);
				exerciseDescription.addEventListener(Event.CHANGE, validateForm);
				exerciseKeywords.addEventListener(Event.CHANGE, validateForm);
			}

			public function resetComponent():void
			{
				//Reset the combobox components
				languageSelector.selectedIndex=0;
				difficultySelector.selectedIndex=0;

				//Reset the descriptors
				addLevelDescriptors(difficultySelector.selectedIndex + 1);
				descriptorContainer.visible=false;
				descriptorContainer.includeInLayout=false;

				//Reset the video form fields
				exerciseTitle.removeEventListener(Event.CHANGE, validateForm);
				exerciseDescription.removeEventListener(Event.CHANGE, validateForm);
				exerciseKeywords.removeEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=false;
				descriptionValidator.enabled=false;
				tagValidator.enabled=false;

				exerciseTitle.text="";
				exerciseDescription.htmlText="";
				exerciseKeywords.text="";
				exerciseTitle.addEventListener(Event.CHANGE, validateForm);
				exerciseDescription.addEventListener(Event.CHANGE, validateForm);
				exerciseKeywords.addEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=true;
				descriptionValidator.enabled=true;
				tagValidator.enabled=true;
			}


			private function validateForm(event:Event):void
			{
				focussedFormControl=event.target as DisplayObject;

				// Mark the form as valid to start with                
				formIsValid=true;

				validate(titleValidator);
				validate(descriptionValidator);
				validate(tagValidator);
				//validate(fileGridValidator);
			}

			private function validate(validator:Validator):Boolean
			{
				var validatorSource:DisplayObject=validator.source as DisplayObject;
				var suppressEvents:Boolean=(validatorSource != focussedFormControl);
				var event:ValidationResultEvent=validator.validate(null, suppressEvents);
				var currentControlIsValid:Boolean=(event.type == ValidationResultEvent.VALID);

				formIsValid=formIsValid && currentControlIsValid;

				return currentControlIsValid;
			}

			private function checkExternalUrl(url:String):Boolean
			{
				var pattern:RegExp=new RegExp("^http[s]?\:\\/\\/([^\\/]+)");
				var result:Object=pattern.exec(url);
				if (result == null || url.length >= 4096)
				{
					return (false);
				}
				return (true);
			}

			private function parseTags(tags:String):String
			{
				return tags;
			}

			private function fieldHasData(fieldText:String):Boolean
			{
				var fieldData:String=fieldText.replace(/[ ,\;.\:\-_?¿¡!€$']*/, "");
				return (fieldData.length < 1) ? false : true;
			}

			private function onDifficultyChange(event:ListEvent):void
			{
				var dispatchingItem:DifficultyLevelComboBox=DifficultyLevelComboBox(event.target);
				var levelIndex:int=dispatchingItem.selectedIndex;
				if (levelIndex != -1)
				{
					if (!_descriptors)
						getDescriptorCodesFromResourceFile();
					addLevelDescriptors(levelIndex + 1);
				}
			}

			private function getDescriptorCodesFromResourceFile():void
			{
				var resources:Object=resourceManager.getResourceBundle("en_US", "myResources").content;
				//var descriptorPattern:RegExp=/D\d{3}_(\w{2})_(\w{2})\d{2}/;
				
				/* D1_1_08_1
				 * 	D: Descriptor
				 *  1: Difficulty level (A1, A2, B1, B2, C)
				 *  1: Communication situation (Everyday life & tourism, Studies, Work)
				 *  08: Communicative competence (Staying at a hotel, Sightseeing, ...)
				 *  1: Number of descriptor
				 */
				var descriptorPattern:RegExp=/D(\d)_(\d)_(\d{2})_(\d)/;
				
				for (var item:Object in resources)
				{
					var key:String=item as String;
					//Filter the strings that have to do with the descriptors
					var matches:Array=key.match(descriptorPattern);
					if (matches && matches.length)
					{
						if (!_descriptors)
							_descriptors=new Array();
						_descriptors[key]=matches[1];
					}
				}
				trace("Descriptors in resource file: "+ObjectUtil.toString(_descriptors));
			}

			private function addLevelDescriptors(level:uint):void
			{
				//First remove the previous elements of the container
				removeLevelDescriptors();
				//Then add the new set of elements
				for (var item:String in _descriptors)
				{
					//Get only the descriptors of the chosen difficulty level
					if (_descriptors[item] == level)
					{
						var chkBox:CheckBox=new CheckBox();
						chkBox.id=item;
						chkBox.setStyle('skinClass',BootstrapCheckBox);
						chkBox.percentWidth=100;
						chkBox.label=resourceManager.getString("myResources", chkBox.id);
						ResourceSubscriber.getInstance().subscribeElement(chkBox, "label", "myResources", item);
						descriptorContainer.addElement(chkBox);
					}
				}
			}

			private function removeLevelDescriptors():void
			{
				if (descriptorContainer.numElements)
				{
					ResourceSubscriber.getInstance().unsubscribeContainerElements(descriptorContainer);
					descriptorContainer.removeAllElements();
				}
			}

			private function selectPreviousDescriptors(savedDescriptors:*):void
			{
				var containsSaved:Boolean=false;
				if (savedDescriptors)
				{
					var savedDescCollection:ArrayCollection=new ArrayCollection(savedDescriptors);
					for (var i:int=0; i < descriptorContainer.numElements; i++)
					{
						var item:IVisualElement=descriptorContainer.getElementAt(i);
						if ((item is CheckBox))
						{
							var descriptor:String=(item as CheckBox).id;
							if (savedDescCollection.contains(descriptor))
							{
								(item as CheckBox).selected=true;
								containsSaved=true;
							}
						}
					}
				}
				if (containsSaved)
				{
					descriptorContainer.visible=true;
					descriptorContainer.includeInLayout=true;
				}
			}

			private function showHideDescriptorsClickHandler(e:MouseEvent):void
			{
				descriptorContainer.visible=!descriptorContainer.visible;
				descriptorContainer.includeInLayout=!descriptorContainer.includeInLayout;
			}

			private function saveChangesClickHandler(event:MouseEvent):void
			{

				var validUrl:Boolean=true;
				if (fieldHasData(exerciseTitle.text) && fieldHasData(exerciseDescription.htmlText) && fieldHasData(exerciseKeywords.text))
				{
					exerciseData.title=exerciseTitle.text;
					exerciseData.description=exerciseDescription.htmlText;
					exerciseData.tags=parseTags(exerciseKeywords.text);
					exerciseData.language=languageSelector.selectedItem.code;
					exerciseData.difficulty=difficultySelector.selectedIndex + 1;

					//If the user chose any level descriptors, those must be saved too
					var descriptors:Array=new Array();
					for (var i:int=0; i < descriptorContainer.numElements; i++)
					{
						var item:IVisualElement=descriptorContainer.getElementAt(i);
						if ((item is CheckBox) && (item as CheckBox).selected)
						{
							var descriptor:String=(item as CheckBox).id;
							descriptors.push(descriptor);
						}
					}
					exerciseData.descriptors=descriptors;

					new CreateEvent(CreateEvent.SAVE_EXERCISE, exerciseData).dispatch();
				}
				else
					CustomAlert.error(resourceManager.getString('myResources', 'FILL_THE_REQUIRED_FIELDS'));
			}

			public function set setInformation(value:Boolean):void
			{
				//resetComponent();
				var data:ExerciseVO=DataModel.getInstance().exerciseData;
				exerciseData=data;
				exerciseTitle.text=exerciseData.title;
				exerciseDescription.htmlText=exerciseData.description;
				exerciseKeywords.text=exerciseData.tags;
				languageSelector.dataProvider=_localesAndFlags.availableLanguages;
				languageSelector.selectedItem=_localesAndFlags.getLocaleAndFlagGivenLocaleCode(exerciseData.language);
				difficultySelector.selectedIndex=exerciseData.difficulty - 1;
				difficultySelector.dispatchEvent(new ListEvent(ListEvent.CHANGE));

				//The previous function should have created the descriptors of the selected level
				selectPreviousDescriptors(exerciseData.descriptors);

			}

			private function set videoDataModified(value:Boolean):void
			{
				if (DataModel.getInstance().exerciseDataModified == true)
				{
					CustomAlert.info(resourceManager.getString('myResources', 'VIDEO_DATA_SUCCESSFULLY_MODIFIED'));
					//cancelButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					DataModel.getInstance().exerciseDataModified=false;
				}
			}

			public function languageComboBoxLabelFunction(item:Object):String
			{
				var locale:String=String(item.code);
				var upperLocale:String=locale.toUpperCase();
				return resourceManager.getString('myResources', 'LOCALE_' + upperLocale);
			}

			protected function onConditionalDropdownChange(event:Event):void
			{

			}

			[Bindable]
			private var dpExerciseType:ArrayCollection=new ArrayCollection(['FREE_CONTEXT', 'CONVERSATION', 'STORYTELLING', 'DUBBING', 'ERROR_DETECTION', 'TRANSLATION', 'READING']);
			[Bindable]
			private var dpCommSituation:ArrayCollection=new ArrayCollection([{'code': 1, 'label': 'EVERYDAY_LIFE_AND_TOURISM'}, {'code': 2, 'label': 'WORK'}, {'code': 3, 'label': 'STUDIES'}]);
			[Bindable]
			private var dpCommCompetence:ArrayCollection=new ArrayCollection(['DEALING_WITH_EMERGENCY_SITUATIONS', 'DESCRIBING_EXPERIENCES', 'DEVELOPING_AN_ARGUMENT', 'GENERAL_WORK', 'GETTING_STAYING_WELL', 'GIVING_PRESENTATIONS', 'GOING_OUT_TO_EAT', 'GOING_SHOPPING', 'MAKING_A_TRIP', 'MAKING_ARRANGEMENTS', 'PARTICIPATING_IN_AN_INTERVIEW', 'PARTICIPATING_IN_CLASS', 'PARTICIPATING_IN_MEETINGS', 'PUBLIC_SPEAKING', 'SIGHTSEEING', 'SOCIALIZING', 'SPEAKING_ABOUT_ONESELF', 'STAYING_AT_A_HOTEL', 'TELEPHONING', 'USING_FINANCIAL_AND_POSTAL_SERVICES']);

			[Bindable]
			private var dpLingAspect:ArrayCollection=new ArrayCollection(['VERB', 'NOUN', 'PRONOUNS', 'ADVERB_ADJECTIVE', 'FORMS_OF_QUESTIONS', 'NEGATION', 'VOCABULARY', 'PRONUNCIATION']);

			[Bindable]
			private var dpleve:ArrayCollection=new ArrayCollection([ResourceManager.getInstance().getString('myResources', 'LEVEL_A1'), ResourceManager.getInstance().getString('myResources', 'LEVEL_A2'), ResourceManager.getInstance().getString('myResources', 'LEVEL_B1'), ResourceManager.getInstance().getString('myResources', 'LEVEL_B2'), ResourceManager.getInstance().getString('myResources', 'LEVEL_C1')]);

			[Bindable]
			private var dpD:ArrayCollection=new ArrayCollection(DataModel.getInstance().localesAndFlags.availableLanguages);
		]]>
	</fx:Script>
</s:VGroup>
