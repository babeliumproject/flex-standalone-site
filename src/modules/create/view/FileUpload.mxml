<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:videoUpload="components.videoUpload.*"
		  xmlns:videoSlice="components.videoSlice.*"
		  xmlns:common="view.common.*"
		  xmlns:skins="skins.*"
		  creationComplete="onComplete()">
	
	<fx:Declarations>
		<mx:StringValidator id="titleValidator"
							source="{videoTitle}"
							property="text"
							minLength="3"
							maxLength="80"/>
		<mx:StringValidator id="descriptionValidator"
							source="{videoDescription}"
							property="text"
							minLength="3"
							maxLength="512"/>
		<mx:StringValidator id="tagValidator"
							source="{videoTags}"
							property="text"
							minLength="3"
							maxLength="255"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import control.BabeliaBrowserManager;
			
			import events.EvaluationEvent;
			import events.UploadEvent;
			import events.UserEvent;
			import events.VideoSliceEvent;
			
			import flash.events.*;
			import flash.net.*;
			
			import model.DataModel;
			import model.ResourceSubscriber;
			
			import modules.create.event.CreateEvent;
			import modules.exercise.event.ExerciseEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.CheckBox;
			import mx.core.IVisualElement;
			import mx.events.*;
			import mx.managers.*;
			import mx.resources.IResourceBundle;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectProxy;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import skins.IconButtonSkin;
			
			import view.common.*;
			
			import vo.CreditHistoryVO;
			import vo.EvaluationVO;
			import vo.ExerciseLevelVO;
			import vo.ExerciseVO;
			
			private var _dataModel:DataModel = DataModel.getInstance();
			private var _descriptors:Array;

			private var red5VideoData:ExerciseVO;
			private var red5VideoLevel:ExerciseLevelVO;


			private var checkStatusTimer:Timer;


			[Bindable]
			public var formIsValid:Boolean=false;

			// Holds a reference to the currently focussed control on the form.
			private var focussedFormControl:DisplayObject;

			// Initalize
			private function onComplete():void
			{

				//Retrieve all the available descriptor codes and store them in an associative array for convenience
				getDescriptorCodesFromResourceFile();

				videoTitle.addEventListener(Event.CHANGE, validateForm);
				videoDescription.addEventListener(Event.CHANGE, validateForm);
				videoTags.addEventListener(Event.CHANGE, validateForm);
				addLevelDescriptors(_dataModel.localesAndFlags.getLevelCorrespondence(difficultySelector.selectedIndex+1));

				if (DataModel.getInstance().loggedUser != null && DataModel.getInstance().loggedUser.isAdmin)
				{
					new UserEvent(UserEvent.GET_USERS).dispatch();
				}

			}

			protected function gotoMediaUpload(event:MouseEvent):void
			{
				//Validate the form
				var exercisedata:ExerciseVO = new ExerciseVO();
				
				//Attempt to save the data as draft.
				new CreateEvent(CreateEvent.CREATEUPDATE_EXERCISE, exercisedata).dispatch();
			}

			public function set createUpdateExerciseResult(value:Boolean):void{
				//Go to next step of exercise creation
				BabeliaBrowserManager.getInstance().updateURL('create','edit','id=<exerciseid>&a=mediaupload');
			}


			private function parseTags(tags:String):String
			{
				return tags;
			}

			private function fieldHasData(fieldText:String):Boolean
			{
				var fieldData:String=fieldText.replace(/[ ,\;.\:\-_?¿¡!€$']*/, "");
				return (fieldData.length < 1) ? false : true;
			}		
			
			private function onDifficultyChange(event:ListEvent):void{
				var dispatchingItem:DifficultyLevelComboBox=DifficultyLevelComboBox(event.target);
				var levelIndex:int = dispatchingItem.selectedIndex;
				if (levelIndex != -1)
				{
					addLevelDescriptors(_dataModel.localesAndFlags.getLevelCorrespondence(levelIndex+1));
				}
			}
			
			private function getDescriptorCodesFromResourceFile():void{
				var resources:Object = resourceManager.getResourceBundle("en_US","myResources").content;
				var descriptorPattern:RegExp = /D\d{3}_(\w{2})_(\w{2})\d{2}/;
				for (var item:Object in resources){
					var key:String = item as String;
					//Filter the strings that have to do with the descriptors
					var matches:Array = key.match(descriptorPattern);
					if(matches && matches.length){
						if(!_descriptors)
							_descriptors = new Array();
						_descriptors[key] = matches[1];
					}
				}
			}
			
			private function addLevelDescriptors(levelcode:String):void{
				//First remove the previous elements of the container
				removeLevelDescriptors();
				//Then add the new set of elements
				for (var item:Object in _descriptors){
					//Get only the descriptors of the chosen difficulty level
					if(_descriptors[item] == levelcode){
						var chkBox:CheckBox = new CheckBox();
						chkBox.id=item as String;
						chkBox.percentWidth=100;
						
						chkBox.label=resourceManager.getString("myResources",chkBox.id);
						ResourceSubscriber.getInstance().subscribeElement(chkBox, "label", "myResources", item as String);
						descriptorContainer.addElement(chkBox);					
						/*
						BindingUtils.bindProperty(
							chkBox,
							"label",
							resourceManager,
							{ name: "getString", getter: function(resourceManager:IResourceManager):String { return resourceManager.getString("myResources",item as String);} }
						);
						*/
					}
				}
			}
			
			private function removeLevelDescriptors():void{
				if(descriptorContainer.numElements){
					ResourceSubscriber.getInstance().unsubscribeContainerElements(descriptorContainer);
					descriptorContainer.removeAllElements();
				}
			}
			
			private function showHideDescriptorsClickHandler(e:MouseEvent):void{
				descriptorContainer.visible = !descriptorContainer.visible;
				descriptorContainer.includeInLayout = !descriptorContainer.includeInLayout;
			}

			
			
			private function set onUploadCompleteData(value:Boolean):void
			{
				if (DataModel.getInstance().uploadFinishedData)
				{
					if (DataModel.getInstance().uploadErrors == '')
					{
						
						red5VideoData=new ExerciseVO();
						red5VideoData.title=videoTitle.text;
						red5VideoData.description=videoDescription.text;
						red5VideoData.tags=parseTags(videoTags.text);
						red5VideoData.language=languageSelector.selectedItem.code;
						red5VideoData.name=DataModel.getInstance().uploadFileName;
						
						//red5VideoData.license=String(mediaUploadForm.licenseSelector.selectedItem.code).toLowerCase();
						//red5VideoData.reference=mediaUploadForm.referenceUrl.text;
						
						//Since when uploading we only have this difficulty, it reflects the average difficulty of the exercise
						red5VideoData.avgDifficulty=difficultySelector.selectedIndex + 1;
						
						//If the user chose any level descriptors, those must be saved too
						var descriptors:Array=new Array();
						for(var i:int=0; i<descriptorContainer.numElements; i++){
							var item:IVisualElement = descriptorContainer.getElementAt(i);
							if((item is CheckBox) && (item as CheckBox).selected){
								var descriptor:String = (item as CheckBox).id;
								descriptors.push(descriptor);
							}
						}
						red5VideoData.descriptors=descriptors;
						
						if(CONFIG::noPracticeUpload){
							if(DataModel.getInstance().loggedUser.isAdmin){
								if(uploadTypeGroup.selection == uploadType2){
									red5VideoData.status = "evaluation-video";
								}
							} else {
								red5VideoData.status = "evaluation-video";
							}
						}
						
						new CreateEvent(CreateEvent.UNPROCESSED, red5VideoData).dispatch();
					}
		

					DataModel.getInstance().uploadFinishedData=false;
				}
			}
			
			private function set onUnprocessedExerciseComplete(value:Boolean):void
			{
				if (DataModel.getInstance().unprocessedExerciseSaved)
				{
					resetComponent();
					DataModel.getInstance().unprocessedExerciseSaved=false;
				}
			}

			private function saveRecordedExercise():void
			{

				var validUrl:Boolean=true;
				if (fieldHasData(videoTitle.text) && fieldHasData(videoDescription.text) && fieldHasData(videoTags.text))
				{
					red5VideoData=new ExerciseVO();
					red5VideoData.title=videoTitle.text;
					red5VideoData.description=videoDescription.text;
					red5VideoData.tags=parseTags(videoTags.text);
					red5VideoData.language=languageSelector.selectedItem.code;
					//red5VideoData.name=mediaUploadForm.mediaName;

					//red5VideoData.license=String(mediaUploadForm.licenseSelector.selectedItem.code).toLowerCase();
					//red5VideoData.reference=mediaUploadForm.referenceUrl.text;

					//Since when uploading we only have this difficulty, it reflects the average difficulty of the exercise
					red5VideoData.avgDifficulty=difficultySelector.selectedIndex + 1;
					
					//If the user chose any level descriptors, those must be saved too
					var descriptors:Array=new Array();
					for(var i:int=0; i<descriptorContainer.numElements; i++){
						var item:IVisualElement = descriptorContainer.getElementAt(i);
						if((item is CheckBox) && (item as CheckBox).selected){
							var descriptor:String = (item as CheckBox).id;
							descriptors.push(descriptor);
						}
					}
					red5VideoData.descriptors=descriptors;
					
					if(CONFIG::noPracticeUpload){
						if(DataModel.getInstance().loggedUser.isAdmin){
							if(uploadTypeGroup.selection == uploadType2){
								red5VideoData.status = "evaluation-video";
							}
						} else {
							red5VideoData.status = "evaluation-video";
						}
					}

					var historic:CreditHistoryVO=new CreditHistoryVO();
					//historic.videoExerciseName=mediaUploadForm.recFromWebcamBox.recordingFileName;
					DataModel.getInstance().historicData=historic;

					new CreateEvent(CreateEvent.WEBCAM, red5VideoData).dispatch();
				}
				else
					CustomAlert.error(resourceManager.getString('myResources', 'MESSAGE_FILL_THE_REQUIRED_FIELDS'));
			}

			private function resetComponent():void
			{

				//Reset the combobox components
				if (languageSelector.initialized)
					languageSelector.selectedIndex=0;
				difficultySelector.selectedIndex=0;
			
				//Reset the descriptors
				addLevelDescriptors(_dataModel.localesAndFlags.getLevelCorrespondence(difficultySelector.selectedIndex+1));

				//Reset the video form fields
				videoTitle.removeEventListener(Event.CHANGE, validateForm);
				videoDescription.removeEventListener(Event.CHANGE, validateForm);
				videoTags.removeEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=false;
				descriptionValidator.enabled=false;
				tagValidator.enabled=false;

				videoTitle.text="";
				videoDescription.text="";
				videoTags.text="";
				videoTitle.addEventListener(Event.CHANGE, validateForm);
				videoDescription.addEventListener(Event.CHANGE, validateForm);
				videoTags.addEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=true;
				descriptionValidator.enabled=true;
				tagValidator.enabled=true;
				
				descriptorContainer.visible = false;
				descriptorContainer.includeInLayout = false;
			}


			private function validateForm(event:Event):void
			{
				focussedFormControl=event.target as DisplayObject;

				// Mark the form as valid to start with                
				formIsValid=true;

				validate(titleValidator);
				validate(descriptionValidator);
				validate(tagValidator);
				//validate(fileGridValidator);
			}

			private function validate(validator:Validator):Boolean
			{
				// Get a reference to the component that is the
				// source of the validator.
				var validatorSource:DisplayObject=validator.source as DisplayObject;

				// Suppress events if the current control being validated is not
				// the currently focussed control on the form. This stops the user
				// from receiving visual validation cues on other form controls.
				var suppressEvents:Boolean=(validatorSource != focussedFormControl);

				// Carry out validation. Returns a ValidationResultEvent.
				// Passing null for the first parameter makes the validator 
				// use the property defined in the property tag of the
				// <mx:Validator> tag.
				var event:ValidationResultEvent=validator.validate(null, suppressEvents);

				// Check if validation passed and return a boolean value accordingly.
				var currentControlIsValid:Boolean=(event.type == ValidationResultEvent.VALID);

				// Update the formIsValid flag
				formIsValid=formIsValid && currentControlIsValid;

				return currentControlIsValid;
			}

			private function checkExternalUrl(url:String):Boolean
			{
				var pattern:RegExp=new RegExp("^http[s]?\:\\/\\/([^\\/]+)");
				var result:Object=pattern.exec(url);
				if (result == null || url.length >= 4096)
				{
					return (false);
				}
				return (true);
			}

			private function set onTabChange(value:Boolean):void
			{
				resetComponent();
			}
			
		]]>
	</fx:Script>

	
	<fx:Binding source="{DataModel.getInstance().unprocessedExerciseSaved}"
				destination="this.onUnprocessedExerciseComplete"/>
	
	<fx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="this.onTabChange"/>

		<s:VGroup width="100%"
				  height="100%">
			<s:Label id="sectionTitle"
					 text="{'1. Label the exercise'}"
					 styleName="sectionTitleLabel"/>
			<mx:Form width="100%"
					 styleName="roundedBlueBorderBox">
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_TITLE')}"
							 width="100%"
							 styleName="boldLabel"
							 required="true">
					<s:TextInput width="100%"
								 id="videoTitle"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_DESCRIPTION')}"
							 width="100%"
							 styleName="boldLabel"
							 required="true">
					<!--<mx:TextArea width="100%"
								 id="videoDescription"
								 maxChars="500"/>-->
					<mx:RichTextEditor width="100%"
									   id="videoDescription"
									   dropShadowVisible="false"
									   headerHeight="0"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_TAGS')}"
							 width="100%"
							 styleName="boldLabel"
							 toolTip="{resourceManager.getString('myResources','COMMA_SEPARATED_WORDS')}"
							 required="true">
					<mx:TextArea width="100%"
								 id="videoTags"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_DIFFICULTY_LEVEL')}"
							 styleName="boldLabel"
							 required="true"
							 width="100%">
					<s:HGroup width="100%">
						<common:DifficultyLevelComboBox id="difficultySelector" change="onDifficultyChange(event)"/>
						<skins:IconButton styleName="commonLinkButton" label="{resourceManager.getString('myResources','DESCRIPTORS')}" click="showHideDescriptorsClickHandler(event)" visible="true"/>
					</s:HGroup>
					<s:VGroup id="descriptorContainer" width="100%" visible="false" includeInLayout="false"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_LANGUAGE')}"
							 styleName="boldLabel"
							 required="true">
					<common:LanguageComboBox id="languageSelector"/>
				</mx:FormItem>		
			</mx:Form>
		</s:VGroup>
	
		<s:Button id="gotomediaupload"
				  label="Save and continue"
				  styleName="bigBlueButton"
				  click="gotoMediaUpload(event)"/>
</s:VGroup>
