<?xml version="1.0" encoding="utf-8"?>
<s:Form xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:common="view.common.*"
		xmlns:videoUpload="components.videoUpload.*"
		xmlns:view="modules.create.view.*"
		xmlns:skins="skins.*">

	<fx:Script>
		<![CDATA[
			import control.URLManager;

			import events.UploadEvent;

			import model.DataModel;

			import modules.create.event.CreateEvent;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;

			import spark.components.ButtonBar;
			import spark.events.IndexChangeEvent;
			import spark.layouts.HorizontalAlign;
			import spark.layouts.VerticalAlign;

			import view.common.CustomAlert;

			public static const STATUS_UNDEF:int=0;
			public static const STATUS_ENCODING:int=1;
			public static const STATUS_READY:int=2;
			public static const STATUS_DUPLICATED:int=3;
			public static const STATUS_ERROR:int=4;

			public static const LEVEL_UNDEF:int=0;
			public static const LEVEL_PRIMARY:int=1;
			public static const LEVEL_MODEL:int=2;

			public static const MEDIA_TYPE_AUDIO:String='audio';
			public static const MEDIA_TYPE_VIDEO:String='video';

			private var filereference:FileReference;
			private var filename:String;
			private var filesize:uint;

			public function get mediaName():String
			{
				return filename;
			}

			public function resetComponent():void
			{
				filereference=null;
				filename=null;
				filesize=0;
				updateUploadProgress();
				licenseSelector.selectedIndex=0;
				referenceUrl.text='';
				//uploadStatus.text='';
				uploadFilename.text='';
				chooseMediaTypeContainer.includeInLayout=true;
				chooseMediaTypeContainer.visible=true;
				uploadWidget.includeInLayout=false;
				uploadWidget.visible=false;
				errorMessageContainer.visible=false;
				errorMessageContainer.includeInLayout=false;
			}

			protected function uploadFile_clickHandler(event:MouseEvent):void
			{
				new UploadEvent(UploadEvent.UPLOAD_BROWSE).dispatch();
			}

			protected function recordFile_clickHandler(event:MouseEvent):void
			{
				methodSelection.visible=false;
				methodSelection.includeInLayout=false;
				recFromWebcamBox.visible=true;
				recFromWebcamBox.includeInLayout=true;
			}

			protected function cancelUpload_clickHandler(event:MouseEvent):void
			{
				clearUpload();
				resetComponent();
			}

			protected function clearUpload():void
			{
				updateUploadProgress();
				new UploadEvent(UploadEvent.UPLOAD_CANCEL).dispatch();
			}

			protected function updateUploadProgress(percentLoaded:Number=0):void
			{
				uploadProgressBar.setProgress(percentLoaded, 100);
				uploadProgressBar.validateNow();
			}

			protected function set uploadStart(start:Boolean):void
			{
				filereference=DataModel.getInstance().uploadFileReference;
				filename=filereference.name;
				filesize=filereference.size;
				uploadFilename.text=filename;
				updateUploadProgress();
				DataModel.getInstance().uploadFileSelected=false;
				chooseMediaTypeContainer.includeInLayout=false;
				chooseMediaTypeContainer.visible=false;
				uploadWidget.includeInLayout=true;
				uploadWidget.visible=true;
				cancelUpload.visible=true;
				new UploadEvent(UploadEvent.UPLOAD_START).dispatch();
			}

			protected function set uploadProgress(progress:Boolean):void
			{
				var bytesLoaded:int=DataModel.getInstance().uploadBytesLoaded;
				var bytesTotal:int=DataModel.getInstance().uploadBytesTotal;
				var percentLoaded:Number=Math.round((bytesLoaded / bytesTotal) * 100);
				updateUploadProgress(percentLoaded);
			}

			protected function set uploadComplete(complete:Boolean):void
			{
				if (DataModel.getInstance().uploadErrors == '')
				{
					//uploadStatus.text=resourceManager.getString('myResources', 'UPLOADSUCCESSFULUPLOAD');
					uploadProgressBar.label=resourceManager.getString('myResources', 'PROCESSING').toUpperCase() + ' ...';
					//cancelUpload.label=resourceManager.getString('myResources', 'DONE');
					cancelUpload.label='Save Changes';
					cancelUpload.enabled=false;
				}
				else
				{
					displayUploadErrors();
				}
				clearUpload();
			}

			protected function set mediaRetrieved(value:Boolean):void
			{
				var media:ArrayCollection=DataModel.getInstance().exerciseMedia;
				if (media)
				{
					for each (var item:Object in media)
					{
						if (parseInt(item.level) == LEVEL_PRIMARY)
						{
							var primarycontainer:BorderContainer=new BorderContainer();
							var layout:HorizontalLayout=new HorizontalLayout();
							layout.paddingBottom=layout.paddingTop=layout.paddingLeft=layout.paddingRight=10;
							layout.verticalAlign=VerticalAlign.MIDDLE;
							layout.horizontalAlign=HorizontalAlign.CENTER;
							primarycontainer.percentWidth=100;
							primarycontainer.styleName='lightBorderContainer';
							primarycontainer.visible=true;
							primarycontainer.includeInLayout=true;
							primarycontainer.minHeight=100;
							primarycontainer.layout=layout;

							var titlelabel:Label=new Label();
							titlelabel.text='Primary media';
							primarycontainer.addElement(titlelabel);

							var statuslabel:Label=new Label();

							switch (parseInt(item.status))
							{
								case STATUS_UNDEF:
								case STATUS_ENCODING:
									statuslabel.text='Status: Processing...';
									break;
								case STATUS_READY:
									statuslabel.text='Status: Ready';
									var filename:Label=new Label();
									filename.text='Filename: ' + item.filename;
									primarycontainer.addElement(filename);
									if (item.type == MEDIA_TYPE_VIDEO)
									{
										var thumbbar:ButtonBar=new ButtonBar();
										thumbbar.requireSelection=true;
										thumbbar.dataProvider=new ArrayCollection([{'url': '1.jpg', 'label': 'Set as default'}, {'url': '2.jpg', 'label': 'Set as default'}, {'url': '3.jpg', 'label': 'Set as default'}]);
										thumbbar.selectedIndex=item.defaultthumbnail - 1;
										thumbbar.addEventListener(IndexChangeEvent.CHANGE, setDefaultThumbnail, false, 0, true);
										primarycontainer.addElement(thumbbar);
									}
									var subtitlestatus:Label=new Label();
									subtitlestatus.text='Subtitle status: Not subtitled';

									var substat:int=parseInt(item.subtitlestatus);
									var subtitlemedia:Button=new Button();
									subtitlemedia.label='Add subtitles';
									if (substat == 1)
									{
										subtitlemedia.label='Edit subtitles';
										subtitlestatus.text='Subtitle status: Draft';
									}
									if (substat == 2)
									{
										subtitlemedia.label='Improve subtitles';
										subtitlestatus.text='Subtitle status: Complete';
									}

									subtitlemedia.addEventListener(MouseEvent.CLICK, subtitleMediaClickHandler, false, 0, true);
									primarycontainer.addElement(subtitlestatus);
									primarycontainer.addElement(subtitlemedia);
									var deletemedia:Button=new Button();
									deletemedia.label='Delete';
									primarycontainer.addElement(deletemedia);
									break;
								case STATUS_DUPLICATED:
									statuslabel.text='Status: Duplicated';
									break;
								default:
									statuslabel.text='Status: Error. Invalid media';
									break;
							}

							primarycontainer.addElement(statuslabel);

							this.addElement(primarycontainer);
						}
						else if (item.level == LEVEL_MODEL)
						{
							var modelcontainer:BorderContainer=new BorderContainer();
							var layout1:HorizontalLayout=new HorizontalLayout();
							layout1.paddingBottom=layout.paddingTop=layout.paddingLeft=layout.paddingRight=10;
							layout1.verticalAlign=VerticalAlign.MIDDLE;
							layout1.horizontalAlign=HorizontalAlign.CENTER;
							modelcontainer.percentWidth=100;
							modelcontainer.styleName='lightBorderContainer';
							modelcontainer.visible=true;
							modelcontainer.includeInLayout=true;
							modelcontainer.minHeight=100;
							modelcontainer.layout=layout1;

							var statuslabel1:Label=new Label();

							switch (item.status)
							{
								case 0:
								case 1:
									statuslabel1.text='Status: Processing...';
									break;
								case 2:
									statuslabel1.text='Status: Ready';
									var filename1:Label=new Label();
									filename1.text=item.filename;
									modelcontainer.addElement(filename1);
									if (item.type == MEDIA_TYPE_VIDEO)
									{
										var thumbbar1:ButtonBar=new ButtonBar();
										thumbbar1.requireSelection=true;
										thumbbar1.dataProvider=new ArrayCollection([{'url': '1.jpg', 'label': 'Set as default'}, {'url': '2.jpg', 'label': 'Set as default'}, {'url': '3.jpg', 'label': 'Set as default'}]);
										thumbbar1.selectedIndex=item.thumbnailnum - 1;
										thumbbar1.addEventListener(IndexChangeEvent.CHANGE, setDefaultThumbnail, false, 0, true);
										modelcontainer.addElement(thumbbar1);
									}

									var subtitlemedia1:Button=new Button();
									if (item.subtitlestatus == 0)
										subtitlemedia1.label='Add subtitles';
									if (item.subtitlestatus == 1)
										subtitlemedia1.label='Edit subtitles';

									subtitlemedia1.addEventListener(MouseEvent.CLICK, subtitleMediaClickHandler, false, 0, true);
									modelcontainer.addElement(subtitlemedia1);
									var deletemedia1:Button=new Button();
									deletemedia1.label='Delete';
									modelcontainer.addElement(deletemedia1);
									break;
								case 3:
									statuslabel1.text='Status: Duplicated';
									break;
								default:
									statuslabel1.text='Status: Error. Invalid media';
									break;
							}

							modelcontainer.addElement(statuslabel1);

							this.addElement(modelcontainer);
						}
					}
				}
				availableMedia.includeInLayout=true;
				availableMedia.visible=true;
				availableMediaLabel.percentWidth=100;
				availableMediaLabel.text=ObjectUtil.toString(DataModel.getInstance().exerciseMedia);

			}

			protected function displayUploadErrors():void
			{
				chooseMediaTypeContainer.visible=false;
				chooseMediaTypeContainer.includeInLayout=false;
				//Reset this widget
				uploadWidget.visible=false;
				uploadWidget.includeInLayout=false;
				//Reset this widget
				errorMessage.text=DataModel.getInstance().uploadErrors;
				errorMessageContainer.visible=true;
				errorMessageContainer.includeInLayout=true;
				//Add a button to go back to choosemediatypecontainer
			}

			protected function cancelCaptureClickHandler(event:Event):void
			{
				recFromWebcamBox.resetComponent();
				recFromWebcamBox.includeInLayout=false;
				recFromWebcamBox.visible=false;
				methodSelection.visible=true;
				methodSelection.includeInLayout=true;
			}

			protected function uploadCaptureClickHandler(event:Event):void
			{

			}

			private function setDefaultThumbnail(event:IndexChangeEvent):void
			{
				if (event.eventPhase != EventPhase.AT_TARGET)
					return;
				var mediaid:String=(event.target as ButtonBar).id;
				var num:int=(event.newIndex) + 1;
				var params:Object=new Object();
				params.num=num;
				params.mediaid=mediaid;
				new CreateEvent(CreateEvent.SET_DEFAULT_THUMBNAIL, params).dispatch();
			}

			private function subtitleMediaClickHandler(event:MouseEvent):void
			{
				var mediaid:int=(event.target as Object).id as int;
				URLManager.getInstance().redirect('/subtitle/edit/' + mediaid);
			}

			protected function deleteMediaButtonClickHandler(event:MouseEvent):void
			{
				CustomAlert.confirm(resourceManager.getString('myResources', 'CONFIRM_VIDEO_DELETE'), Alert.YES | Alert.NO, FlexGlobals.topLevelApplication.parent, deleteMediaCloseHandler, Alert.NO);
			}

			private function deleteMediaCloseHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
					deleteMedia();
			}

			private function deleteMedia():void
			{
				var mediaid:int=-1;
				new CreateEvent(CreateEvent.DELETE_MEDIA, mediaid).dispatch();
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().uploadFileSelected}"
				destination="this.uploadStart"/>
	<fx:Binding source="{DataModel.getInstance().uploadProgressUpdated}"
				destination="this.uploadProgress"/>
	<fx:Binding source="{DataModel.getInstance().uploadFinishedData}"
				destination="this.uploadComplete"/>

	<fx:Binding source="{DataModel.getInstance().exerciseMediaRetrieved}"
				destination="this.mediaRetrieved"/>

	<s:FormHeading label="{resourceManager.getString('myResources','UPLOAD_MEDIA')}"
				   styleName="sectionTitleLabel"/>

	<s:BorderContainer id="chooseMediaTypeContainer"
					   styleName="lightBorderContainer"
					   width="640"
					   height="380">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>

		<s:VGroup id="methodSelection"
				  includeInLayout="true"
				  visible="true"
				  width="100%"
				  height="100%"
				  horizontalAlign="center"
				  verticalAlign="middle">
			<s:Label id="chooseMethod"
					 text="{resourceManager.getString('myResources','CHOOSE_MEDIA_ORIGIN')+':'}"
					 fontSize="20"/>
			<s:HGroup visible="true"
					  includeInLayout="true"
					  paddingTop="80">
				<skins:IconButton id="uploadFile"
								  styleName="btn-primary"
								  click="uploadFile_clickHandler(event)"
								  label="{resourceManager.getString('myResources','FILE')}"/>
				<skins:IconButton id="recordFile"
								  styleName="btn-primary"
								  click="recordFile_clickHandler(event)"
								  label="{resourceManager.getString('myResources','WEBCAM_CAPTURE')}"
								  buttonMode="true"/>
			</s:HGroup>
		</s:VGroup>

		<view:WebcamCapture id="recFromWebcamBox"
							streamsFolder="{DataModel.getInstance().exerciseStreamsFolder}"
							filePrefix="upld"
							includeInLayout="false"
							visible="false"
							width="100%"
							height="100%"
							cancelClickHandler="{cancelCaptureClickHandler}"
							uploadClickHandler="{uploadCaptureClickHandler}"/>
	</s:BorderContainer>

	<s:BorderContainer id="uploadWidget"
					   styleName="lightBorderContainer"
					   visible="false"
					   includeInLayout="false"
					   width="100%">
		<s:layout>
			<s:HorizontalLayout paddingBottom="10"
								paddingLeft="10"
								paddingRight="10"
								paddingTop="10"/>
		</s:layout>

		<s:Image source="resources/images/thumbs/nothumb.png"/>
		<s:VGroup width="100%">
			<s:HGroup verticalAlign="middle"
					  width="100%">
				<s:VGroup width="100%">
					<s:Label id="uploadFilename"/>
					<mx:ProgressBar id="uploadProgressBar"
									mode="manual"
									labelPlacement="center"
									label="{resourceManager.getString('myResources', 'UPLOADING').toUpperCase()+' ...'}"
									trackHeight="30"
									width="100%"/>
				</s:VGroup>
				<s:Button id="cancelUpload"
						  click="cancelUpload_clickHandler(event)"
						  label="{resourceManager.getString('myResources','CANCEL')}"
						  cornerRadius="1"
						  visible="false"
						  height="40"/>
			</s:HGroup>
			<!--<s:Label id="uploadStatus"/>-->
			<s:FormItem label="{resourceManager.getString('myResources','SPECIFY_LICENSE')}"
						styleName="boldLabel"
						required="true">
				<common:LicenseComboBox id="licenseSelector"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','AUTHORS_NAME_URL')}"
						styleName="boldLabel"
						toolTip="{resourceManager.getString('myResources','VIDEO_OWNER_AUTHOR')}"
						width="100%">
				<s:TextInput width="100%"
							 id="referenceUrl"/>
			</s:FormItem>
		</s:VGroup>
	</s:BorderContainer>

	<s:BorderContainer id="errorMessageContainer"
					   styleName="lightBorderContainer"
					   visible="false"
					   includeInLayout="false"
					   width="100%"
					   minHeight="100">
		<s:layout>
			<s:HorizontalLayout paddingBottom="10"
								paddingLeft="10"
								paddingRight="10"
								paddingTop="10"
								verticalAlign="middle"
								horizontalAlign="center"/>
		</s:layout>

		<s:Label id="errorMessage"/>
	</s:BorderContainer>

	<s:BorderContainer id="availableMedia"
					   styleName="lightBorderContainer"
					   visible="false"
					   includeInLayout="false"
					   width="100%"
					   minHeight="100">
		<s:layout>
			<s:HorizontalLayout paddingBottom="10"
								paddingLeft="10"
								paddingRight="10"
								paddingTop="10"
								verticalAlign="middle"
								horizontalAlign="center"/>
		</s:layout>

		<s:Label id="availableMediaLabel"/>
	</s:BorderContainer>

	<!--
	<s:HGroup width="100%">
		<s:Image id="warningIcon"
				  source="resources/images/about_section_title_icon.png"/>
		<s:VGroup width="100%">
			<mx:Text htmlText="{ StringUtil.substitute(resourceManager.getString('myResources', 'UPLOAD_LIMITS_INFO'), DataModel.getInstance().maxFileSize/1048576, DataModel.getInstance().minExerciseDuration, DataModel.getInstance().maxExerciseDuration) }"
					 fontSize="14"
					 width="100%"/>
			<mx:Text htmlText="{ StringUtil.substitute(resourceManager.getString('myResources', 'UPLOAD_LIMITS_REASONING'), DataModel.getInstance().maxExerciseDuration) }"
					 width="100%"/>
		</s:VGroup>
	</s:HGroup>
	-->
</s:Form>
