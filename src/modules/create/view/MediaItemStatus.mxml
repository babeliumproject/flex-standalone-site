<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="100%"
				   styleName="lightBorderContainer"
				   minHeight="100">

	<s:layout>
		<s:VerticalLayout paddingBottom="10"
						  paddingLeft="10"
						  paddingRight="10"
						  paddingTop="10"
						  verticalAlign="middle"
						  horizontalAlign="left"/>
	</s:layout>

	<s:Label id="mediaLevel" text="Media"/>

	<s:BitmapImage id="poster"/>

	<s:Label id="statuslabel" text="Status"/>

	<s:Button id="subtitlemediaBtn"
			  click="subtitleMediaClickHandler(event)"
			  styleName="btn-primary"
			  label="{ResourceManager.getInstance().getString('myResources','ADD_SUBTITLES')}"/>
	<s:ButtonBar id="thumbSelectBtnbar"
				 requireSelection="true"
				 change="setDefaultThumbnail(event)"/>
	<s:Button id="deleteMediaBtn"
			  click="deleteMediaButtonClickHandler(event)"
			  styleName="btn-danger"
			  label="{ResourceManager.getInstance().getString('myResources','DELETE')}"/>


	<fx:Script>
		<![CDATA[
			import control.URLManager;
			
			import modules.create.event.CreateEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;
			
			import view.common.CustomAlert;

			public static const STATUS_UNDEF:int=0;
			public static const STATUS_ENCODING:int=1;
			public static const STATUS_READY:int=2;
			public static const STATUS_DUPLICATED:int=3;
			public static const STATUS_ERROR:int=4;

			public static const LEVEL_UNDEF:int=0;
			public static const LEVEL_PRIMARY:int=1;
			public static const LEVEL_MODEL:int=2;

			public static const MEDIA_TYPE_AUDIO:String='audio';
			public static const MEDIA_TYPE_VIDEO:String='video';
			
			private var _data:Object;

			private function setDefaultThumbnail(event:IndexChangeEvent):void
			{
				if (event.eventPhase != EventPhase.AT_TARGET)
					return;
				var mediaid:String=(event.target as ButtonBar).id;
				var num:int=(event.newIndex) + 1;
				var params:Object=new Object();
				params.num=num;
				params.mediaid=mediaid;
				new CreateEvent(CreateEvent.SET_DEFAULT_THUMBNAIL, params).dispatch();
			}

			private function subtitleMediaClickHandler(event:MouseEvent):void
			{
				var mediaid:int=(event.target as Object).id as int;
				URLManager.getInstance().redirect('/subtitle/edit/' + mediaid);
			}

			protected function deleteMediaButtonClickHandler(event:MouseEvent):void
			{
				CustomAlert.confirm(resourceManager.getString('myResources', 'CONFIRM_VIDEO_DELETE'), Alert.YES | Alert.NO, FlexGlobals.topLevelApplication.parent, deleteMediaCloseHandler, Alert.NO);
			}

			private function deleteMediaCloseHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
					deleteMedia();
			}

			private function deleteMedia():void
			{
				var mediaid:int=-1;
				new CreateEvent(CreateEvent.DELETE_MEDIA, mediaid).dispatch();
			}
			
			private function initCompleteHandler(event:FlexEvent):void{
				if(!event.eventPhase == EventPhase.AT_TARGET) return;
				if(_data) this.setDataInternal(_data);
			}
			
			private function setDataInternal(data:Object):void{
				if (data && data.hasOwnProperty('status'))
				{
					var status:int = parseInt(data.status);
					trace("Data: "+ObjectUtil.toString(data));
					switch (status)
					{
						case STATUS_UNDEF:
						case STATUS_ENCODING:
							statuslabel.text='Status: Processing...';
							break;
						case STATUS_READY:
							statuslabel.text='Status: Ready';
							
							if (data.type == MEDIA_TYPE_VIDEO)
							{
								poster.source=data.posterurl;
								thumbSelectBtnbar.dataProvider=new ArrayCollection([{'url': '1.jpg', 'label': 'Set as default'}, {'url': '2.jpg', 'label': 'Set as default'}, {'url': '3.jpg', 'label': 'Set as default'}]);
								thumbSelectBtnbar.selectedIndex=data.defaultthumbnail - 1;
							}
							var subtitlestatus:Label=new Label();
							subtitlestatus.initialize();
							subtitlestatus.text='Subtitle status: Not subtitled';
							
							var substat:int=parseInt(data.subtitlestatus);
							if (substat == 1)
							{
								subtitlemediaBtn.label='Edit subtitles';
								subtitlestatus.text='Subtitle status: Draft';
							}
							if (substat == 2)
							{
								subtitlemediaBtn.label='Edit subtitles';
								subtitlestatus.text='Subtitle status: Complete';
							}
							
							break;
						case STATUS_DUPLICATED:
							statuslabel.text='Status: Duplicated';
							break;
						default:
							statuslabel.text='Status: Error. Invalid media';
							break;
					}
				}
			}

			public function setData(data:Object):void
			{
				if(_data === data) return;
				
				_data = data;			
				if(!this.initialized){
					this.addEventListener(FlexEvent.CREATION_COMPLETE, initCompleteHandler, false, 0, true);
				} else {
					this.setDataInternal(_data);
				}
			}
		]]>
	</fx:Script>

</s:BorderContainer>
