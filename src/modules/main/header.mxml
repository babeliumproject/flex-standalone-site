<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
		  height="60"
		  cornerRadius="0"
		  borderStyle="none"
		  headerHeight="0"
		  borderThicknessBottom="0"
		  borderThicknessTop="0"
		  borderThicknessRight="0"
		  borderThicknessLeft="0"
		  backgroundAlpha="0.0"
		  layout="horizontal"
		  creationComplete="init()">
<mx:Metadata>
        [ResourceBundle("myResources")]
    </mx:Metadata>
	<mx:Script>
		<![CDATA[
			import modules.userManagement.RestorePassForm;
			
			import business.LoginDelegate;
			import com.adobe.crypto.SHA1;
			import events.LoginEvent;
			import events.UserEvent;
			import events.VideoStopEvent;
			import events.ViewChangeEvent;
			import flash.events.Event;
			import flash.utils.clearInterval;
			import flash.utils.setInterval;
			import model.DataModel;
			import modules.userManagement.LoginForm;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.ResourceEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import vo.LoginVO;
			
			//Login related members
			public var loginPop:LoginForm;
			public var restorePop:RestorePassForm;

			private var closingEvent:Event;

			private var interval:uint;
			private var intervalLoops:int;

			private var rememberSO:SharedObject;
			
			private var locales:Array = DataModel.getInstance().locales; 
			
			//The keyCode for ENTER key
			public static const ENTER_KEY:int = 13;

			public function init():void
			{
				//First, check if any user cookie is present and if so, make the login
				rememberSO=SharedObject.getLocal("babeliaData");
				if (rememberSO.data.username != undefined && rememberSO.data.hash != undefined)
				{
					
					processCachedLogin();
				}
				else
				{
					//Since our user isn't signed in we hide the users cp
					userCP.visible=false;
				}
			}

			private function signInClickHandler():void
			{
				//Create and show login popup
				showLogin();
			}
			
			private function checkPressedKey(e:KeyboardEvent):void{
				if (e.keyCode == ENTER_KEY){
					processLogin(null);
				}
			}

			private function showLogin():void
			{
				loginPop=LoginForm(PopUpManager.createPopUp(parent, LoginForm, true));
				loginPop.title="Please enter your login information.";
				loginPop.showCloseButton=true;
				PopUpManager.centerPopUp(loginPop);

				loginPop.addEventListener("close", hideLogin);
				loginPop["cancelButton"].addEventListener("click", hideLogin);
				loginPop["okButton"].addEventListener("click", processLogin);
				loginPop["restorePassword"].addEventListener("click", showRestorePass);
				
				//We add a key listener so that we can push enter to processLogin
				loginPop.addEventListener(KeyboardEvent.KEY_DOWN, checkPressedKey);
			}

			private function hideLogin(event:Event):void
			{
				PopUpManager.removePopUp(loginPop);
			}
			
			private function showRestorePass(event:Event):void
			{
				hideLogin(null);
				DataModel.getInstance().restorePassErrorMessage = "";
				restorePop=RestorePassForm(PopUpManager.createPopUp(parent, RestorePassForm, true));
				restorePop.title="Please enter your username or email.";
				restorePop.showCloseButton=true;
				PopUpManager.centerPopUp(restorePop);

				restorePop.addEventListener("close", hideRestorePass);
				restorePop["cancelButton"].addEventListener("click", hideRestorePass);
				restorePop["okButton"].addEventListener("click", processRestorePass);
			}

			private function hideRestorePass(event:Event):void
			{
				PopUpManager.removePopUp(restorePop);
			}
			
			private function set passRecoveryDone(flag:Boolean):void
			{
				hideRestorePass(null);
			}
			
			private function processRestorePass(event:Event):void
			{
				var user:LoginVO=new LoginVO(restorePop.username.text, "");
				new LoginEvent(LoginEvent.RESTORE_PASS, user).dispatch();
			}

			private function processLogin(event:Event):void
			{
				//Encrypt our password for security
				var passHash:String=SHA1.hash(loginPop.password.text);
				var user:LoginVO=new LoginVO(loginPop.username.text, passHash);
				new LoginEvent(LoginEvent.PROCESS_LOGIN, user).dispatch();
			}

			private function processCachedLogin():void
			{
				var cachedUser:LoginVO=new LoginVO(rememberSO.data.username, rememberSO.data.hash);
				new LoginEvent(LoginEvent.PROCESS_LOGIN, cachedUser).dispatch();
			}

			private function signUpClickHandler():void
			{
				// Stop videos if some one is playing
				new VideoStopEvent().dispatch();
				//Change contentViewStack to sign up page
				new ViewChangeEvent(ViewChangeEvent.VIEW_REGISTER_MODULE).dispatch();
			}

			private function accountClickHandler():void
			{
				// Stop videos if some one is playing
				new VideoStopEvent().dispatch();
				//Change contentViewStack to account page
				new ViewChangeEvent(ViewChangeEvent.VIEW_ACCOUNT_MODULE).dispatch();
			}

			private function signOutClickHandler():void
			{
				//Since our user isn't signed in we hide the users cp
				new LoginEvent(LoginEvent.SIGN_OUT, null).dispatch();
				// Stop videos if some one is playing
				new VideoStopEvent().dispatch();
				// Redirecting to home
				new ViewChangeEvent(ViewChangeEvent.VIEW_HOME_MODULE).dispatch();
				anonymousCP.visible=true;
				userCP.visible=false;
				rememberSO.clear();
			}

			private function set loggedSuccessfully(upd:Boolean):void
			{
				if (DataModel.getInstance().isSuccessfullyLogged)
				{
					if ((rememberSO.data.username == undefined || rememberSO.data.hash == undefined) && loginPop != null)
					{
						//The user wants the application to remember him/her
						if (loginPop.rememberUser.selected)
						{
							var cacheHash:String=SHA1.hash(loginPop.password.text);
							rememberSO.data.username=loginPop.username.text;
							rememberSO.data.hash=cacheHash;
							rememberSO.flush();
						}
						PopUpManager.removePopUp(loginPop);
						loginPop.username.text="";
						loginPop.password.text="";
					}
					anonymousCP.visible=false;
					userCPName.label=DataModel.getInstance().loggedUser.name;
					uCrds.label=DataModel.getInstance().loggedUser.creditCount.toString();
					userCP.visible=true;
					DataModel.getInstance().isSuccessfullyLogged = false;
				}
			}

			private function set wrongLogin(upd:Boolean):void
			{
				loginPop.errorInfo.text=DataModel.getInstance().loginErrorMessage;
				DataModel.getInstance().loginErrorMessage="";
			}

			private function blinkCredits():void
			{
				if (intervalLoops <= 20)
				{
					if (uCrds.visible)
					{
						uCrds.visible=false;
						intervalLoops++;
					}
					else
					{
						uCrds.visible=true;
						intervalLoops++;
					}
				}
				else
				{
					uCrds.visible=true;
					clearInterval(interval);
				}
			}

			private function set creditsUpdated(retr:Boolean):void
			{
				uCrds.label=DataModel.getInstance().loggedUser.creditCount.toString();
				intervalLoops=0;
				interval=setInterval(blinkCredits, 300);
				DataModel.getInstance().creditUpdateRetrieved=false;
			}
           
           
         
		private function localeComboBox_initializeHandler(event:Event):void  {
			localeComboBox.selectedIndex=locales.indexOf(resourceManager.localeChain[0]);
        }

   	private function localeComboBox_changeHandler(event:Event):void{
        	rememberSO.data.idioma=localeComboBox.selectedItem;
            var newLocale:String =String(localeComboBox.selectedItem);

            if (resourceManager.getLocales().indexOf(newLocale) != -1)
            {
                completeHandler(null);
            }
            else
            {
     var resourceModuleURL:String = "Resources_" +newLocale + ".swf";
     var eventDispatcher:IEventDispatcher=resourceManager.loadResourceModule(resourceModuleURL);
                eventDispatcher.addEventListener(
                ResourceEvent.COMPLETE, completeHandler);
            }
        }
        
        private function completeHandler(event:ResourceEvent):void{
         resourceManager.localeChain = [localeComboBox.selectedItem ];
        }
        
         private function faultHandler(fault:FaultEvent):void
         {
            Alert.show(fault.fault.faultString + "\n" + fault.fault.faultDetail, fault.fault.faultCode.toString());
         }
			
			
		]]>
	</mx:Script>

	<mx:Binding source="{DataModel.getInstance().isSuccessfullyLogged}"
				destination="this.loggedSuccessfully"/>
	<mx:Binding source="{!DataModel.getInstance().loginErrorMessage}"
				destination="this.wrongLogin"/>
	<mx:Binding source="{DataModel.getInstance().creditUpdateRetrieved}"
				destination="this.creditsUpdated"/>
	<mx:Binding source="{DataModel.getInstance().passRecoveryDone}"
				destination="this.passRecoveryDone"/>

	<mx:HBox width="30%"
			 height="100%">
		<mx:Image width="300"
				  height="60"
				  source="resources/images/banner.png"/>
	</mx:HBox>
	<mx:HBox width="70%"
			 height="100%"
			 horizontalAlign="right"
			 verticalAlign="middle">
		<mx:Canvas>
			<mx:HBox id="anonymousCP"
					 x="0"
					 y="0"
					 width="360"
					 height="60"
					 horizontalAlign="right"
					 verticalAlign="middle"
					 visible="true">
				<mx:LinkButton label="{resourceManager.getString('myResources', 'ENTRAR')}"
							   fontFamily="Arial"
							   fontSize="12"
							   fontWeight="normal"
							   click="signInClickHandler()"
							   enabled="{!DataModel.getInstance().recordingExercise}"/>
				<mx:LinkButton label="{resourceManager.getString('myResources', 'REGISTRAR')}"
							   fontFamily="Arial"
							   fontSize="12"
							   click="signUpClickHandler()"
							   enabled="{!DataModel.getInstance().recordingExercise}"/>
			</mx:HBox>
			<mx:HBox id="userCP"
					 x="0"
					 y="0"
					 width="360"
					 height="60"
					 horizontalAlign="right"
					 verticalAlign="middle"
					 visible="false">
				<mx:HBox cornerRadius="4"
						 borderStyle="solid"
						 backgroundColor="#9AA3B9"
						 borderColor="#FFFFFF"
						 alpha="1.0"
						 borderThickness="0"
						 horizontalAlign="center"
						 verticalAlign="middle"
						 paddingLeft="6"
						 paddingRight="6"
						 height="60%">
					<mx:Label text="Credits:"
							  fontFamily="Arial"
							  fontSize="12"
							  fontWeight="bold"/>
					<mx:LinkButton id="uCrds"
								   label="uCrds"
								   fontFamily="Arial"
								   fontSize="14"
								   fontWeight="bold"
								   color="#FFFFFF"
								   themeColor="#FFFFFF"/>
				</mx:HBox>
				<mx:VRule height="20"/>
				<mx:LinkButton id="userCPName"
							   label="UserName"
							   fontFamily="Arial"
							   fontSize="12"/>
				<mx:LinkButton label="Account"
							   fontFamily="Arial"
							   fontSize="12"
							   click="accountClickHandler()"
							   enabled="{!DataModel.getInstance().recordingExercise}"/>
				<mx:LinkButton label="Sign Out"
							   fontFamily="Arial"
							   fontSize="12"
							   click="signOutClickHandler()"
							   enabled="{!DataModel.getInstance().recordingExercise}"/>
			</mx:HBox>
		</mx:Canvas>
		<mx:Canvas>
		   <mx:HBox>
				<mx:VRule height="20"/>
			<mx:ComboBox id="localeComboBox" text="Selecione el idioma" dataProvider="{DataModel.getInstance().locales}"
                 initialize="localeComboBox_initializeHandler(event)"
                 change="localeComboBox_changeHandler(event)"/>
			</mx:HBox>
		</mx:Canvas>
	</mx:HBox>
</mx:Panel>
