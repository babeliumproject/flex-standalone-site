<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ns1="modules.videoUpload.*"
		 creationComplete="onComplete()"
		 fontFamily="Arial"
		 fontSize="12"
		 paddingLeft="8"
		 paddingRight="8"
		 paddingTop="8"
		 paddingBottom="8"
		 xmlns:common="view.common.*">

	<mx:Script>
		<![CDATA[
			import events.EvaluationEvent;
			import events.ExerciseEvent;
			import events.UploadEvent;
			
			import flash.events.*;
			import flash.net.*;
			
			import model.DataModel;
			
			import mx.controls.*;
			import mx.events.*;
			import mx.managers.*;
			import mx.validators.Validator;
			
			import view.common.*;
			
			import vo.CreditHistoryVO;
			import vo.EvaluationVO;
			import vo.ExerciseLevelVO;
			import vo.ExerciseVO;

			private var _strUploadUrl:String;

			private var addFileReference:FileReference;

			//private var _refUploadFile:FileReference;
			private var _arrUploadFiles:Array;

			//private var _numCurrentUpload:Number=0;

			private var youtubeVideoData:ExerciseVO;
			private var youtubeVideoLevel:ExerciseLevelVO;

			private var red5VideoData:ExerciseVO;
			private var red5VideoLevel:ExerciseLevelVO;


			private var checkStatusTimer:Timer;

			[Bindable]
			public var formIsValid:Boolean=false;

			// Holds a reference to the currently focussed 
			// control on the form.
			private var focussedFormControl:DisplayObject;

			// Set uploadUrl
			public function set uploadUrl(strUploadUrl:String):void
			{
				_strUploadUrl=strUploadUrl;
			}

			// Initalize
			private function onComplete():void
			{
				_arrUploadFiles=new Array();
				enableUI();
				uploadCheck();

				videoTitle.addEventListener(Event.CHANGE, validateForm);
				videoDescription.addEventListener(Event.CHANGE, validateForm);
				videoTags.addEventListener(Event.CHANGE, validateForm);

			}

			private function addFiles():void
			{
				clearUpload();
				new UploadEvent(UploadEvent.UPLOAD_BROWSE).dispatch();
			}

			// Called when a file is selected
			public function set fileSelected(selected:Boolean):void
			{
				addFileReference=DataModel.getInstance().uploadFileReference;
				_arrUploadFiles.pop();
				_arrUploadFiles.push({name: addFileReference.name, size: formatFileSize(addFileReference.size), file: addFileReference});
				listFiles.dataProvider=_arrUploadFiles;
				listFiles.selectedIndex=_arrUploadFiles.length - 1;

				updateProgBar();
				uploadCheck();
				DataModel.getInstance().uploadFileSelected=false;
			}

			// Called to format number to file size
			private function formatFileSize(numSize:Number):String
			{
				var strReturn:String;
				numSize=Number(numSize / 1024);
				strReturn=String(numSize.toFixed(1) + " KB");
				if (numSize > 1024)
				{
					numSize=numSize / 1024;
					strReturn=String(numSize.toFixed(2) + " MB");
					if (numSize > 1024)
					{
						numSize=numSize / 1024;
						strReturn=String(numSize.toFixed(2) + " GB");
					}
				}
				return strReturn;
			}

			// Called to check if there is at least one file to upload
			private function uploadCheck():void
			{
				if (_arrUploadFiles.length == 0)
				{
					btnUpload.enabled=false;
					listFiles.verticalScrollPolicy="off";
				}
				else
				{
					btnUpload.enabled=true;
					listFiles.verticalScrollPolicy="off";
				}
			}

			// Disable UI control
			private function disableUI():void
			{
				btnAdd.enabled=false;
				btnUpload.enabled=false;
				btnCancel.enabled=true;
				listFiles.enabled=false;
				listFiles.verticalScrollPolicy="off";
			}

			// Enable UI control
			private function enableUI():void
			{
				btnAdd.enabled=true;
				btnUpload.enabled=true;
				btnCancel.enabled=false;
				listFiles.enabled=true;
				listFiles.verticalScrollPolicy="off";
			}

			private function startUpload():void
			{
				if (_arrUploadFiles.length > 0)
				{
					disableUI();
					uploadInformationLabel.text=resourceManager.getString('myResources', 'LABEL_UPLOADSTATUS_UPLOADINPROGRESS');
					new UploadEvent(UploadEvent.UPLOAD_START).dispatch();
				}
			}



			private function parseTags(tags:String):String
			{
				return tags;
			}

			private function clearUpload():void
			{
				updateProgBar();
				enableUI();
				new UploadEvent(UploadEvent.UPLOAD_CANCEL).dispatch();
			}

			private function onUploadCanceled():void
			{
				clearUpload();
			}

			private function set onUploadProgress(update:Boolean):void
			{
				var bytesLoaded:int=DataModel.getInstance().uploadBytesLoaded;
				var bytesTotal:int=DataModel.getInstance().uploadBytesTotal;
				var numPerc:Number=Math.round((bytesLoaded / bytesTotal) * 100);
				updateProgBar(bytesLoaded, bytesTotal, numPerc);
				DataModel.getInstance().uploadProgressUpdated=false;

			}

			// Update progBar
			private function updateProgBar(bytesLoaded:Number=0, bytesTotal:Number=0, numPerc:Number=0):void
			{
				if (addFileReference != null)
				{
					var strLabel:String="Uploaded " + formatFileSize(0) + " of " + formatFileSize(addFileReference.size);
					strLabel=(numPerc > 0 && numPerc < 100) ? "Uploaded " + formatFileSize(bytesLoaded) + " of " + formatFileSize(bytesTotal) : strLabel;
					strLabel=(numPerc == 100) ? "Upload Complete - Transfer commencing..." : strLabel;
					strLabel=(_arrUploadFiles.length == 0) ? "" : strLabel;
				}
				else
				{
					numPerc=0;
					strLabel="";
				}
				progBar.label=strLabel;

				progBar.setProgress(numPerc, 100);
				progBar.validateNow();
			}

			private function set onUploadCompleteData(value:Boolean):void
			{
				if (DataModel.getInstance().uploadFinishedData)
				{
					if (DataModel.getInstance().uploadErrors == '')
					{
						uploadInformationLabel.text=resourceManager.getString('myResources', 'LABEL_UPLOADSTATUS_SUCCESSFULUPLOAD');

						/*
						   youtubeVideoData=new ExerciseVO();
						   youtubeVideoData.title=videoTitle.text;
						   youtubeVideoData.description=videoDescription.text;
						   youtubeVideoData.tags=parseTags(videoTags.text);
						   youtubeVideoData.language=languageComboBox.selectedLabel;
						   youtubeVideoData.name=DataModel.getInstance().uploadFileReference.name;

						   youtubeVideoLevel = new ExerciseLevelVO();
						   youtubeVideoLevel.suggestedLevel = dificultyComboBox.selectedIndex+1;
						 */

						red5VideoData=new ExerciseVO();
						red5VideoData.title=videoTitle.text;
						red5VideoData.description=videoDescription.text;
						red5VideoData.tags=parseTags(videoTags.text);
						red5VideoData.language=languageSelector.selectedItem.code;
						red5VideoData.name=DataModel.getInstance().uploadFileReference.name;
						red5VideoData.userId=DataModel.getInstance().loggedUser.id;

						red5VideoData.license=String(licenseSelector.selectedItem.code).toLowerCase();
						red5VideoData.reference=referenceUrl.text;

						//Since when uploading we only have this difficulty, it reflects the average difficulty of the exercise
						red5VideoData.avgDifficulty = difficultySelector.selectedIndex + 1;

						new ExerciseEvent(ExerciseEvent.ADD_UNPROCESSED_EXERCISE, red5VideoData).dispatch();
						/*
						   new UploadEvent(UploadEvent.YOUTUBE_UPLOAD, youtubeVideoData).dispatch();
						 */
					}
					else
						uploadInformationLabel.text=DataModel.getInstance().uploadErrors;
					DataModel.getInstance().uploadFinishedData=false;
					clearUpload();
				}
			}

			/*
			   private function set onYoutubeTransferComplete(value:Boolean):void
			   {
			   if (DataModel.getInstance().youtubeTransferComplete == true)
			   {
			   checkStatusTimer=new Timer(30000, 0);
			   checkStatusTimer.addEventListener(TimerEvent.TIMER, onTimer);
			   checkStatusTimer.start();
			   DataModel.getInstance().youtubeTransferComplete=false;
			   }
			   }

			   private function onTimer(event:TimerEvent):void
			   {
			   var checkExercise:ExerciseVO=DataModel.getInstance().newYoutubeData;
			   new UploadEvent(UploadEvent.YOUTUBE_CHECK_VIDEO_STATUS, checkExercise).dispatch();
			   }


			   private function set onYoutubeProcessingComplete(value:Boolean):void
			   {
			   uploadInformationLabel.text=resourceManager.getString('myResources', 'LABEL_UPLOADSTATUS_UPLOADFINISHED');
			   checkStatusTimer.stop();
			   DataModel.getInstance().youtubeProcessingComplete=false;
			   youtubeVideoData.userId=DataModel.getInstance().loggedUser.id;
			   youtubeVideoData.source="Youtube";

			   _arrUploadFiles.pop();
			   listFiles.dataProvider=_arrUploadFiles;
			   clearUpload();
			   resetComponent();

			   new ExerciseEvent(ExerciseEvent.ADD_EXERCISE, youtubeVideoData).dispatch();
			   }

			   private function set onYoutubeProcessUpdate(value:Boolean):void
			   {
			   uploadInformationLabel.text=DataModel.getInstance().youtubeProcessMessage;
			   DataModel.getInstance().youtubeProcessUpdate=false;
			   }
			 */

			private function set onUnprocessedExerciseComplete(value:Boolean):void
			{
				if (DataModel.getInstance().unprocessedExerciseSaved)
				{
					_arrUploadFiles.pop();
					listFiles.dataProvider=_arrUploadFiles;
					clearUpload();
					resetComponent();

					//Enable automatic evaluation if the option was selected
					if (DataModel.getInstance().loggedUser.isAdmin && autoevaluateCheckbox.selected)
						enableAutoevaluation(DataModel.getInstance().historicData.videoExerciseId);

					DataModel.getInstance().unprocessedExerciseSaved=false;
				}
				//uploadInformationLabel.text="Successful Upload. You can check your exercises' status on Account:My Exercises";
			}

			private function changeUploadMethod(event:ItemClickEvent):void
			{
				if (event.currentTarget.selectedValue == "updChoice")
				{
					uploadMethodViewStack.selectedChild=uploadFileBox;
					uploadMethodViewStack.visible=true;
					recFromWebcamBox.visible=false;

				}
				else if (event.currentTarget.selectedValue == "recChoice")
				{
					recFromWebcamBox.visible=true;
					uploadMethodViewStack.selectedChild=recUploadBox;
					uploadMethodViewStack.visible=true;
				}
			}

			private function saveRecordedExercise():void
			{

				var validUrl:Boolean=true;
				if (videoTitle.text != '' && videoDescription.text != '' && videoTags.text != '')
				{
					red5VideoData=new ExerciseVO();
					red5VideoData.title=videoTitle.text;
					red5VideoData.description=videoDescription.text;
					red5VideoData.tags=parseTags(videoTags.text);
					red5VideoData.language=languageSelector.selectedItem.code;
					red5VideoData.name=recFromWebcamBox.recordingFileName;
					red5VideoData.userId=DataModel.getInstance().loggedUser.id;

					red5VideoData.license=String(licenseSelector.selectedItem.code).toLowerCase();
					red5VideoData.reference=referenceUrl.text;

					//Since when uploading we only have this difficulty, it reflects the average difficulty of the exercise
					red5VideoData.avgDifficulty = difficultySelector.selectedIndex + 1;

					var historic:CreditHistoryVO=new CreditHistoryVO();
					historic.videoExerciseName=recFromWebcamBox.recordingFileName;
					DataModel.getInstance().historicData=historic;

					new ExerciseEvent(ExerciseEvent.ADD_WEBCAM_EXERCISE, red5VideoData).dispatch();
				}
				else
					CustomAlert.error(resourceManager.getString('myResources', 'MESSAGE_FILL_THE_REQUIRED_FIELDS'));
			}

			private function resetComponent():void
			{
				addFileReference=null;

				languageSelector.selectedIndex=0;
				difficultySelector.selectedIndex=0;
				licenseSelector.selectedIndex=0;

				recFromWebcamBox.resetComponent();

				videoTitle.removeEventListener(Event.CHANGE, validateForm);
				videoDescription.removeEventListener(Event.CHANGE, validateForm);
				videoTags.removeEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=false;
				descriptionValidator.enabled=false;
				tagValidator.enabled=false;

				videoTitle.text="";
				videoDescription.text="";
				videoTags.text="";
				referenceUrl.text="";
				videoTitle.addEventListener(Event.CHANGE, validateForm);
				videoDescription.addEventListener(Event.CHANGE, validateForm);
				videoTags.addEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=true;
				descriptionValidator.enabled=true;
				tagValidator.enabled=true;
			}


			private function validateForm(event:Event):void
			{
				focussedFormControl=event.target as DisplayObject;

				// Mark the form as valid to start with                
				formIsValid=true;

				validate(titleValidator);
				validate(descriptionValidator);
				validate(tagValidator);
				//validate(fileGridValidator);
			}

			private function validate(validator:Validator):Boolean
			{
				// Get a reference to the component that is the
				// source of the validator.
				var validatorSource:DisplayObject=validator.source as DisplayObject;

				// Suppress events if the current control being validated is not
				// the currently focussed control on the form. This stops the user
				// from receiving visual validation cues on other form controls.
				var suppressEvents:Boolean=(validatorSource != focussedFormControl);

				// Carry out validation. Returns a ValidationResultEvent.
				// Passing null for the first parameter makes the validator 
				// use the property defined in the property tag of the
				// <mx:Validator> tag.
				var event:ValidationResultEvent=validator.validate(null, suppressEvents);

				// Check if validation passed and return a boolean value accordingly.
				var currentControlIsValid:Boolean=(event.type == ValidationResultEvent.VALID);

				// Update the formIsValid flag
				formIsValid=formIsValid && currentControlIsValid;

				return currentControlIsValid;
			}

			private function checkExternalUrl(url:String):Boolean
			{
				var pattern:RegExp=new RegExp("^http[s]?\:\\/\\/([^\\/]+)");
				var result:Object=pattern.exec(url);
				if (result == null || url.length >= 4096)
				{
					return (false);
				}
				return (true);
			}
			
			private function set onTabChange(value:Boolean):void{
				resetComponent();
			}


			private function enableAutoevaluation(exerciseId:int):void
			{
				var requestData:EvaluationVO=new EvaluationVO();
				requestData.exerciseId=exerciseId;
				requestData.transcriptionSystem=transcSystemSelector.transcriptionSystemComboBox.selectedItem.data;
				requestData.userId=DataModel.getInstance().loggedUser.id;
				new EvaluationEvent(EvaluationEvent.ENABLE_TRANSCRIPTION_TO_EXERCISE, requestData).dispatch();
			}

			private function set onAutoevaluationEnableError(value:Boolean):void
			{
				if (DataModel.getInstance().enableAutoevalToExerciseError != "")
				{
					CustomAlert.error(resourceManager.getString('myResources', 'MESSAGE_AUTOMATIC_EVALUATION_NOT_SUPPORTED'));
					DataModel.getInstance().enableAutoevalToExerciseError="";
				}
			}
		]]>
	</mx:Script>

	<mx:Binding source="{DataModel.getInstance().uploadFileSelected}"
				destination="this.fileSelected"/>
	<mx:Binding source="{DataModel.getInstance().uploadProgressUpdated}"
				destination="this.onUploadProgress"/>
	<mx:Binding source="{DataModel.getInstance().uploadFinishedData}"
				destination="this.onUploadCompleteData"/>
	<!--
		 <mx:Binding source="{DataModel.getInstance().uploadFinished}"
		 destination="this.onUploadComplete"/>
		 <mx:Binding source="{DataModel.getInstance().youtubeTransferComplete}"
		 destination="this.onYoutubeTransferComplete"/>
		 <mx:Binding source="{DataModel.getInstance().youtubeProcessingComplete}"
		 destination="this.onYoutubeProcessingComplete"/>
		 <mx:Binding source="{DataModel.getInstance().youtubeProcessUpdate}"
		 destination="this.onYoutubeProcessUpdate"/>
	-->
	<mx:Binding source="{DataModel.getInstance().unprocessedExerciseSaved}"
				destination="this.onUnprocessedExerciseComplete"/>
	<mx:Binding source="{DataModel.getInstance().enableAutoevalToExerciseError}"
				destination="this.onAutoevaluationEnableError"/>
	<mx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="this.onTabChange"/>
	
	<mx:Label text="{resourceManager.getString('myResources','LABEL_UPLOAD_NEW_EXERCISE')}"
			  fontWeight="bold"
			  fontFamily="Arial"
			  fontSize="18"/>
	<mx:HBox width="100%">
		<mx:VBox width="100%">
			<mx:Form width="100%"
					 borderStyle="solid"
					 borderThickness="2">
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_TITLE')}"
							 width="100%"
							 fontWeight="bold"
							 required="true">
					<mx:TextInput width="100%"
								  id="videoTitle"
								  fontWeight="normal"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_DESCRIPTION')}"
							 width="100%"
							 fontWeight="bold"
							 required="true">
					<mx:TextArea width="100%"
								 id="videoDescription"
								 fontWeight="normal"
								 maxChars="500"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_TAGS')}"
							 width="100%"
							 fontWeight="bold"
							 toolTip="Comma separated words"
							 required="true">
					<mx:TextArea width="100%"
								 id="videoTags"
								 fontWeight="normal"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_DIFFICULTY_LEVEL')}"
							 fontWeight="bold"
							 required="true">
					<common:DifficultyLevelComboBox id="difficultySelector"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_LANGUAGE')}"
							 fontWeight="bold"
							 required="true">
					<common:LanguageComboBox id="languageSelector"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_SPECIFY_LICENSE')}"
							 fontWeight="bold"
							 required="true">
					<common:LicenseComboBox id="licenseSelector"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_VIDEO_OWNER_AUTHOR')}"
							 fontWeight="bold"
							 toolTip="{resourceManager.getString('myResources','TOOLTIP_VIDEO_OWNER_AUTHOR')}"
							 width="100%">
					<mx:TextInput width="100%"
								  id="referenceUrl"
								  fontWeight="normal"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_CHOOSE_UPLOADING_METHOD')}"
							 fontWeight="bold">
					<mx:RadioButtonGroup id="uploadOptionsGroup"
										 itemClick="changeUploadMethod(event)"/>
					<mx:RadioButton id="uploadChoice"
									value="updChoice"
									label="{resourceManager.getString('myResources','LABEL_UPLOAD_FILE')}"
									group="{uploadOptionsGroup}"/>
					<mx:RadioButton id="recordChoice"
									value="recChoice"
									label="{resourceManager.getString('myResources','LABEL_UPLOAD_STREAMING')}"
									group="{uploadOptionsGroup}"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_AUTOMATIC_EVALUATION')}"
							 fontWeight="bold"
							 visible="{DataModel.getInstance().loggedUser.isAdmin}"
							 height="67">
					<mx:CheckBox label="{resourceManager.getString('myResources','LABEL_ADD_AUTOMATIC_EVALUATION_IF_POSSIBLE')}"
								 id="autoevaluateCheckbox"/>
					<mx:FormItem label="{resourceManager.getString('myResources','LABEL_CHOOSE_TRANSCRIPTION_SYSTEM')}"
								 fontWeight="bold">
						<common:TranscriptionSystemComboBox id="transcSystemSelector"/>
					</mx:FormItem>
				</mx:FormItem>
			</mx:Form>

			<mx:ViewStack id="uploadMethodViewStack"
						  width="100%"
						  visible="false">

				<mx:VBox id="uploadFileBox"
						 borderStyle="solid"
						 borderThickness="2"
						 width="100%"
						 paddingBottom="4"
						 paddingTop="4"
						 paddingLeft="4"
						 paddingRight="4">
					<mx:HBox width="100%"
							 height="60"
							 verticalAlign="middle"
							 horizontalAlign="center">
						<mx:DataGrid id="listFiles"
									 allowMultipleSelection="false"
									 rowCount="1"
									 verticalScrollPolicy="off"
									 draggableColumns="false"
									 resizableColumns="false"
									 sortableColumns="false"
									 change="validateForm(event)">
							<mx:columns>
								<mx:DataGridColumn headerText="{resourceManager.getString('myResources','COLUMNLABEL_FILE')}"
												   dataField="name"
												   width="400"
												   wordWrap="true"/>
								<mx:DataGridColumn headerText="{resourceManager.getString('myResources','COLUMNLABEL_SIZE')}"
												   dataField="size"
												   width="75"
												   textAlign="right"/>
							</mx:columns>
						</mx:DataGrid>
						<mx:HBox width="100%"
								 height="100%"
								 horizontalAlign="right"
								 verticalAlign="middle"
								 paddingRight="12">
							<mx:Button id="btnAdd"
									   toolTip="{resourceManager.getString('myResources','TOOLTIP_ADD_FILES')}"
									   click="addFiles()"
									   icon="@Embed(source='../../resources/images/add.png')"
									   label="{resourceManager.getString('myResources','BUTTON_BROWSE')}"/>
						</mx:HBox>
					</mx:HBox>
					<mx:Label paddingLeft="12"
							  paddingRight="12"
							  text="{resourceManager.getString('myResources','LABEL_UPLOADSTATUS_NOACTIVITY')}"
							  width="100%"
							  id="uploadInformationLabel"
							  fontWeight="bold"/>
					<mx:ControlBar horizontalAlign="center"
								   verticalAlign="middle"
								   width="100%">
						<mx:ProgressBar id="progBar"
										mode="manual"
										label=""
										labelPlacement="center"
										width="100%"/>
						<mx:Button id="btnCancel"
								   toolTip="{resourceManager.getString('myResources','TOOLTIP_CANCEL_UPLOAD')}"
								   icon="@Embed(source='../../resources/images/cancel.png')"
								   width="26"
								   click="onUploadCanceled()"/>
						<mx:Button label="{resourceManager.getString('myResources','BUTTON_UPLOAD')}"
								   toolTip="{resourceManager.getString('myResources','TOOLTIP_UPLOAD_FILES')}"
								   id="btnUpload"
								   click="startUpload()"
								   enabled="{formIsValid}"
								   icon="@Embed(source='../../resources/images/bullet_go.png')"/>
					</mx:ControlBar>
				</mx:VBox>

				<mx:VBox id="recUploadBox"
						 borderStyle="solid"
						 borderThickness="2"
						 width="100%"
						 paddingBottom="8"
						 paddingTop="8"
						 paddingLeft="8"
						 paddingRight="8">
					<mx:Text width="100%"
							 height="100%"
							 text="{resourceManager.getString('myResources','TEXT_RECORD_VIDEO_UPLOAD')}"
							 selectable="false"/>
					<mx:Spacer/>
					<mx:Button id="saveWebcamRecord"
							   label="{resourceManager.getString('myResources','BUTTON_SAVE_STREAMING_UPLOAD')}"
							   enabled="{recFromWebcamBox.recordingFileName != null  &amp;&amp; !recFromWebcamBox.isRecording}"
							   click="saveRecordedExercise()"/>
				</mx:VBox>

			</mx:ViewStack>
		</mx:VBox>
		<ns1:TempVideoRecording id="recFromWebcamBox"
								visible="false"
								streamsFolder="{DataModel.getInstance().exerciseStreamsFolder}"
								filePrefix="upld"/>
	</mx:HBox>


	<mx:StringValidator id="titleValidator"
						source="{videoTitle}"
						property="text"
						minLength="3"
						maxLength="80"/>
	<mx:StringValidator id="descriptionValidator"
						source="{videoDescription}"
						property="text"
						minLength="3"
						maxLength="512"/>
	<mx:StringValidator id="tagValidator"
						source="{videoTags}"
						property="text"
						minLength="3"
						maxLength="255"/>


</mx:VBox>
