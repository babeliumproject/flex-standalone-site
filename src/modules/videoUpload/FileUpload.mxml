<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:ns1="modules.videoUpload.*"
		  xmlns:ns2="modules.videoSlice.*"
		  xmlns:common="view.common.*"
		  xmlns:skins="skins.*"
		  creationComplete="onComplete()">

	<fx:Script>
		<![CDATA[
			import events.EvaluationEvent;
			import events.ExerciseEvent;
			import events.UploadEvent;
			import events.UserEvent;
			import events.VideoSliceEvent;
			
			import flash.events.*;
			import flash.net.*;
			
			import model.DataModel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.*;
			import mx.events.*;
			import mx.managers.*;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import skins.IconButtonSkin;
			
			import view.common.*;
			
			import vo.CreditHistoryVO;
			import vo.EvaluationVO;
			import vo.ExerciseLevelVO;
			import vo.ExerciseVO;

			private var _strUploadUrl:String;

			private var addFileReference:FileReference;

			private var _arrUploadFiles:Array;

			private var red5VideoData:ExerciseVO;
			private var red5VideoLevel:ExerciseLevelVO;


			private var checkStatusTimer:Timer;


			[Bindable]
			public var formIsValid:Boolean=false;

			// Holds a reference to the currently focussed control on the form.
			private var focussedFormControl:DisplayObject;

			// Set uploadUrl
			public function set uploadUrl(strUploadUrl:String):void
			{
				_strUploadUrl=strUploadUrl;
			}

			// Initalize
			private function onComplete():void
			{
				_arrUploadFiles=new Array();
				enableUI();
				uploadCheck();

				videoTitle.addEventListener(Event.CHANGE, validateForm);
				videoDescription.addEventListener(Event.CHANGE, validateForm);
				videoTags.addEventListener(Event.CHANGE, validateForm);

				if (DataModel.getInstance().loggedUser.isAdmin)
				{
					new UserEvent(UserEvent.GET_USERS).dispatch();
				}

			}

			private function addFiles():void
			{
				clearUpload();
				new UploadEvent(UploadEvent.UPLOAD_BROWSE).dispatch();
			}

			// Called when a file is selected
			public function set fileSelected(selected:Boolean):void
			{
				addFileReference=DataModel.getInstance().uploadFileReference;
				_arrUploadFiles.pop();
				_arrUploadFiles.push({name: addFileReference.name, size: formatFileSize(addFileReference.size), file: addFileReference});
				listFiles.dataProvider=_arrUploadFiles;
				listFiles.selectedIndex=_arrUploadFiles.length - 1;

				updateProgBar();
				uploadCheck();
				DataModel.getInstance().uploadFileSelected=false;
			}

			// Called to format number to file size
			private function formatFileSize(numSize:Number):String
			{
				var strReturn:String;
				numSize=Number(numSize / 1024);
				strReturn=String(numSize.toFixed(1) + " KB");
				if (numSize > 1024)
				{
					numSize=numSize / 1024;
					strReturn=String(numSize.toFixed(2) + " MB");
					if (numSize > 1024)
					{
						numSize=numSize / 1024;
						strReturn=String(numSize.toFixed(2) + " GB");
					}
				}
				return strReturn;
			}

			// Called to check if there is at least one file to upload
			private function uploadCheck():void
			{
				if (_arrUploadFiles.length == 0)
				{
					btnUpload.enabled=false;
				}
				else
				{
					btnUpload.enabled=true;
				}
			}

			// Disable UI control
			private function disableUI():void
			{
				btnAdd.enabled=false;
				btnUpload.enabled=false;
				btnCancel.enabled=true;
				listFiles.enabled=false;
			}

			// Enable UI control
			private function enableUI():void
			{
				btnAdd.enabled=true;
				btnUpload.enabled=true;
				btnCancel.enabled=false;
				listFiles.enabled=true;
			}

			private function startUpload():void
			{
				if (fieldHasData(videoTitle.text) && fieldHasData(videoDescription.text) && fieldHasData(videoTags.text) && _arrUploadFiles.length > 0)
				{
					disableUI();
					uploadInformationLabel.text=resourceManager.getString('myResources', 'LABEL_UPLOADSTATUS_UPLOADINPROGRESS');
					new UploadEvent(UploadEvent.UPLOAD_START).dispatch();
				}
				else
					CustomAlert.error(resourceManager.getString('myResources', 'MESSAGE_FILL_THE_REQUIRED_FIELDS'));
			}



			private function parseTags(tags:String):String
			{
				return tags;
			}

			private function fieldHasData(fieldText:String):Boolean
			{
				var fieldData:String=fieldText.replace(/[ ,\;.\:\-_?¿¡!€$']*/, "");
				return (fieldData.length < 1) ? false : true;
			}

			private function clearUpload():void
			{
				updateProgBar();
				enableUI();
				new UploadEvent(UploadEvent.UPLOAD_CANCEL).dispatch();
			}

			private function onUploadCanceled():void
			{
				clearUpload();
			}

			private function set onUploadProgress(update:Boolean):void
			{
				var bytesLoaded:int=DataModel.getInstance().uploadBytesLoaded;
				var bytesTotal:int=DataModel.getInstance().uploadBytesTotal;
				var numPerc:Number=Math.round((bytesLoaded / bytesTotal) * 100);
				updateProgBar(bytesLoaded, bytesTotal, numPerc);
				DataModel.getInstance().uploadProgressUpdated=false;

			}

			// Update progBar
			private function updateProgBar(bytesLoaded:Number=0, bytesTotal:Number=0, numPerc:Number=0):void
			{
				if (addFileReference != null)
				{
					var strLabel:String="Uploaded " + formatFileSize(0) + " of " + formatFileSize(addFileReference.size);
					strLabel=(numPerc > 0 && numPerc < 100) ? "Uploaded " + formatFileSize(bytesLoaded) + " of " + formatFileSize(bytesTotal) : strLabel;
					strLabel=(numPerc == 100) ? "Upload Complete - Transfer commencing..." : strLabel;
					strLabel=(_arrUploadFiles.length == 0) ? "" : strLabel;
				}
				else
				{
					numPerc=0;
					strLabel="";
				}
				progBar.label=strLabel;

				progBar.setProgress(numPerc, 100);
				progBar.validateNow();
			}

			private function set onUploadCompleteData(value:Boolean):void
			{
				if (DataModel.getInstance().uploadFinishedData)
				{
					if (DataModel.getInstance().uploadErrors == '')
					{
						uploadInformationLabel.text=resourceManager.getString('myResources', 'LABEL_UPLOADSTATUS_SUCCESSFULUPLOAD');

						red5VideoData=new ExerciseVO();
						red5VideoData.title=videoTitle.text;
						red5VideoData.description=videoDescription.text;
						red5VideoData.tags=parseTags(videoTags.text);
						red5VideoData.language=languageSelector.selectedItem.code;
						red5VideoData.name=DataModel.getInstance().uploadFileName;

						red5VideoData.license=String(licenseSelector.selectedItem.code).toLowerCase();
						red5VideoData.reference=referenceUrl.text;

						//Since when uploading we only have this difficulty, it reflects the average difficulty of the exercise
						red5VideoData.avgDifficulty=difficultySelector.selectedIndex + 1;
						
						if(CONFIG::noPracticeUpload){
							if(DataModel.getInstance().loggedUser.isAdmin){
								if(uploadTypeGroup.selection == uploadType2){
									red5VideoData.status = "evaluation-video";
								}
							} else {
								red5VideoData.status = "evaluation-video";
							}
						}
						
						new ExerciseEvent(ExerciseEvent.ADD_UNPROCESSED_EXERCISE, red5VideoData).dispatch();
					}
					else
						uploadInformationLabel.text=DataModel.getInstance().uploadErrors;
					DataModel.getInstance().uploadFinishedData=false;
					clearUpload();
				}
			}

			private function set onUnprocessedExerciseComplete(value:Boolean):void
			{
				if (DataModel.getInstance().unprocessedExerciseSaved)
				{
					_arrUploadFiles.pop();
					listFiles.dataProvider=_arrUploadFiles;
					clearUpload();
					resetComponent();

					//Enable automatic evaluation if the option was selected
					if (DataModel.getInstance().loggedUser.isAdmin && autoevaluateCheckbox.selected)
						enableAutoevaluation(DataModel.getInstance().historicData.videoExerciseId);

					DataModel.getInstance().unprocessedExerciseSaved=false;
				}
			}

			private function changeUploadMethod(event:ItemClickEvent):void
			{
				if (event.currentTarget.selectedValue == "updChoice")
				{
					uploadFileBox.includeInLayout=true;
					uploadFileBox.minHeight=0;
					uploadFileBox.height=150;
					uploadFileBox.visible=true;
					recFromWebcamBox.visible=false;
					recUploadBox.visible=false;
					vSliceWidget.visible=false;
					sliceButtons.visible=false;
					sliceButtons.includeInLayout=false;

				}
				else if (event.currentTarget.selectedValue == "recChoice")
				{
					webcamWidget.includeInLayout=true;
					recFromWebcamBox.visible=true;
					recUploadBox.visible=true;
					uploadFileBox.minHeight=0;
					uploadFileBox.height=0;
					uploadFileBox.visible=false;
					vSliceWidget.visible=false;
					sliceButtons.visible=false;
				}
				else if (event.currentTarget.selectedValue == "ytChoice")
				{
					webcamWidget.includeInLayout=false;
					recFromWebcamBox.visible=false;
					recUploadBox.visible=false;
					uploadFileBox.includeInLayout=false;
					uploadFileBox.minHeight=0;
					uploadFileBox.height=0;
					uploadFileBox.visible=false;
					vSliceWidget.visible=true;
				}
			}

			private function saveRecordedExercise():void
			{

				var validUrl:Boolean=true;
				if (fieldHasData(videoTitle.text) && fieldHasData(videoDescription.text) && fieldHasData(videoTags.text))
				{
					red5VideoData=new ExerciseVO();
					red5VideoData.title=videoTitle.text;
					red5VideoData.description=videoDescription.text;
					red5VideoData.tags=parseTags(videoTags.text);
					red5VideoData.language=languageSelector.selectedItem.code;
					red5VideoData.name=recFromWebcamBox.recordingFileName;

					red5VideoData.license=String(licenseSelector.selectedItem.code).toLowerCase();
					red5VideoData.reference=referenceUrl.text;

					//Since when uploading we only have this difficulty, it reflects the average difficulty of the exercise
					red5VideoData.avgDifficulty=difficultySelector.selectedIndex + 1;
					
					if(CONFIG::noPracticeUpload){
						if(DataModel.getInstance().loggedUser.isAdmin){
							if(uploadTypeGroup.selection == uploadType2){
								red5VideoData.status = "evaluation-video";
							}
						} else {
							red5VideoData.status = "evaluation-video";
						}
					}

					var historic:CreditHistoryVO=new CreditHistoryVO();
					historic.videoExerciseName=recFromWebcamBox.recordingFileName;
					DataModel.getInstance().historicData=historic;

					new ExerciseEvent(ExerciseEvent.ADD_WEBCAM_EXERCISE, red5VideoData).dispatch();
				}
				else
					CustomAlert.error(resourceManager.getString('myResources', 'MESSAGE_FILL_THE_REQUIRED_FIELDS'));
			}

			private function resetComponent():void
			{
				//Reset the file-based upload components
				addFileReference=null;

				_arrUploadFiles.pop();
				listFiles.dataProvider=_arrUploadFiles;
				clearUpload();

				//Reset the combobox components
				languageSelector.selectedIndex=0;
				difficultySelector.selectedIndex=0;
				licenseSelector.selectedIndex=0;

				//Reset the webcam-based upload components
				recFromWebcamBox.resetComponent();

				//Reset the video form fields
				videoTitle.removeEventListener(Event.CHANGE, validateForm);
				videoDescription.removeEventListener(Event.CHANGE, validateForm);
				videoTags.removeEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=false;
				descriptionValidator.enabled=false;
				tagValidator.enabled=false;

				videoTitle.text="";
				videoDescription.text="";
				videoTags.text="";
				referenceUrl.text="";
				videoTitle.addEventListener(Event.CHANGE, validateForm);
				videoDescription.addEventListener(Event.CHANGE, validateForm);
				videoTags.addEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=true;
				descriptionValidator.enabled=true;
				tagValidator.enabled=true;

				uploadOptionsGroup.selectedValue=null;
				uploadChoice.selected=false;
				recordChoice.selected=false;
				uploadFileBox.visible=false;
				recFromWebcamBox.visible=false;
				vSliceWidget.visible=false;
			}


			private function validateForm(event:Event):void
			{
				focussedFormControl=event.target as DisplayObject;

				// Mark the form as valid to start with                
				formIsValid=true;

				validate(titleValidator);
				validate(descriptionValidator);
				validate(tagValidator);
				//validate(fileGridValidator);
			}

			private function validate(validator:Validator):Boolean
			{
				// Get a reference to the component that is the
				// source of the validator.
				var validatorSource:DisplayObject=validator.source as DisplayObject;

				// Suppress events if the current control being validated is not
				// the currently focussed control on the form. This stops the user
				// from receiving visual validation cues on other form controls.
				var suppressEvents:Boolean=(validatorSource != focussedFormControl);

				// Carry out validation. Returns a ValidationResultEvent.
				// Passing null for the first parameter makes the validator 
				// use the property defined in the property tag of the
				// <mx:Validator> tag.
				var event:ValidationResultEvent=validator.validate(null, suppressEvents);

				// Check if validation passed and return a boolean value accordingly.
				var currentControlIsValid:Boolean=(event.type == ValidationResultEvent.VALID);

				// Update the formIsValid flag
				formIsValid=formIsValid && currentControlIsValid;

				return currentControlIsValid;
			}

			private function checkExternalUrl(url:String):Boolean
			{
				var pattern:RegExp=new RegExp("^http[s]?\:\\/\\/([^\\/]+)");
				var result:Object=pattern.exec(url);
				if (result == null || url.length >= 4096)
				{
					return (false);
				}
				return (true);
			}

			private function set onTabChange(value:Boolean):void
			{
				resetComponent();
			}

			private function changeUploadType(event:ItemClickEvent):void
			{

			}

			/**
			 * Autoevaluation related functions
			 */
			private function enableAutoevaluation(exerciseId:int):void
			{
				var requestData:EvaluationVO=new EvaluationVO();
				requestData.exerciseId=exerciseId;
				requestData.transcriptionSystem=transcSystemSelector.transcriptionSystemComboBox.selectedItem.data;
				new EvaluationEvent(EvaluationEvent.ENABLE_TRANSCRIPTION_TO_EXERCISE, requestData).dispatch();
			}

			private function set onAutoevaluationEnableError(value:Boolean):void
			{
				if (DataModel.getInstance().enableAutoevalToExerciseError != "")
				{
					CustomAlert.error(resourceManager.getString('myResources', 'MESSAGE_AUTOMATIC_EVALUATION_NOT_SUPPORTED'));
					DataModel.getInstance().enableAutoevalToExerciseError="";
				}
			}

			/**
			 * Video slice related functions
			 */
			private function identifySearchType():void
			{

				var searchInput:String=sliceSearch.text;

				if (searchInput != "")
				{
					//TextField is not empty
					var urlType:String=new String("http://www.youtube.com/watc");
					var urlType2:String=new String("http://www.youtube.com/user");
					var temp:String=searchInput.substr(0, 27);

					if (urlType == temp)
					{
						//Search Input is normal video URL
						urlSearch(searchInput);

					}
					else if (urlType2 == temp)
					{
						//Search Input is user channel video URL
						userSearch(searchInput);

					}
					else
					{
						CustomAlert.error(ResourceManager.getInstance().getString('myResources', 'VALID_URL_ALERT'));
					}

				}
				else
				{
					CustomAlert.error(ResourceManager.getInstance().getString('myResources', 'VALID_URL_ALERT'));
				}

			}

			private function urlSearch(searchInput:String):void
			{

				DataModel.getInstance().urlSearch=searchInput;
				DataModel.getInstance().tempVideoSlice.watchUrl=searchInput;
				new VideoSliceEvent(VideoSliceEvent.SEARCH_URL).dispatch();

			}

			private function userSearch(searchInput:String):void
			{

				DataModel.getInstance().userSearch=searchInput;
				new VideoSliceEvent(VideoSliceEvent.SEARCH_USER).dispatch();
			}

			public function set onRetrieveVideoComplete(value:Boolean):void
			{

				if (DataModel.getInstance().retrieveVideoComplete)
				{

					VP.setYoutubeVideoId(DataModel.getInstance().tempVideoSlice.name);
					VP.visible=true;

					DataModel.getInstance().retrieveVideoComplete=false;

				}
			}

			public function set onRetrieveUserVideoComplete(value:Boolean):void
			{

				if (DataModel.getInstance().retrieveUserVideoComplete)
				{

					VP.setYoutubeVideoId(DataModel.getInstance().tempVideoSlice.name);
					VP.visible=true;

					DataModel.getInstance().retrieveUserVideoComplete=false;

				}
			}

			public function set onSlicePreviewComplete(value:Boolean):void
			{

				if (DataModel.getInstance().slicePreview)
				{

					requestInfo.visible=true;
					sliceButtons.visible=true;

				}
				else
				{
					sliceButtons.visible=false;
					requestInfo.visible=false;
				}
			}

			public function set onSliceCreationComplete(value:Boolean):void
			{

				if (DataModel.getInstance().sliceComplete)
				{

					infoMessage.visible=false;
				}
			}

			private function cancelSlice():void
			{

				DataModel.getInstance().slicePreview=false;
				requestInfo.visible=false;
				resetComponent();
			}

			private function saveSlice():void
			{

				DataModel.getInstance().tempExercise.name=DataModel.getInstance().tempVideoSlice.name;
				DataModel.getInstance().tempExercise.title=videoTitle.text;
				DataModel.getInstance().tempExercise.description=videoDescription.text;
				DataModel.getInstance().tempExercise.tags=parseTags(videoTags.text);
				DataModel.getInstance().tempExercise.avgDifficulty=difficultySelector.selectedIndex;
				DataModel.getInstance().tempExercise.language=languageSelector.selectedLabel;
				DataModel.getInstance().tempExercise.source="Youtube";
				DataModel.getInstance().tempExercise.userId=DataModel.getInstance().loggedUser.id;
				//DataModel.getInstance().tempExercise.userId = 1;
				DataModel.getInstance().tempExercise.license="cc-by";
				DataModel.getInstance().tempExercise.reference="http://www.youtube.com";
				DataModel.getInstance().tempExercise.status="Unsliced";

				new VideoSliceEvent(VideoSliceEvent.CREATE_SLICE).dispatch();
				infoMessage.visible=true;
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().uploadFileSelected}"
				destination="this.fileSelected"/>
	<fx:Binding source="{DataModel.getInstance().uploadProgressUpdated}"
				destination="this.onUploadProgress"/>
	<fx:Binding source="{DataModel.getInstance().uploadFinishedData}"
				destination="this.onUploadCompleteData"/>
	<fx:Binding source="{DataModel.getInstance().unprocessedExerciseSaved}"
				destination="this.onUnprocessedExerciseComplete"/>
	<fx:Binding source="{DataModel.getInstance().enableAutoevalToExerciseError}"
				destination="this.onAutoevaluationEnableError"/>
	<fx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="this.onTabChange"/>
	<fx:Binding source="{DataModel.getInstance().retrieveVideoComplete}"
				destination="this.onRetrieveVideoComplete"/>
	<fx:Binding source="{DataModel.getInstance().retrieveUserVideoComplete}"
				destination="this.onRetrieveUserVideoComplete"/>
	<fx:Binding source="{DataModel.getInstance().slicePreview}"
				destination="this.onSlicePreviewComplete"/>
	<fx:Binding source="{DataModel.getInstance().sliceComplete}"
				destination="this.onSliceCreationComplete"/>

	<s:BorderContainer styleName="sectionInfoBox"
					   width="100%"
					   minHeight="0">
		<s:layout>
			<s:VerticalLayout paddingTop="16"/>
		</s:layout>
		<s:Label text="{resourceManager.getString('myResources','LABEL_UPLOAD_NEW_EXERCISE')}"
				 styleName="sectionInfoTitleLabel"
				 paddingLeft="16"
				 paddingRight="16"/>
		<s:Label text="{resourceManager.getString('myResources','UPLOAD_SECTION_DESCRIPTION')}"
				 paddingBottom="16"
				 paddingLeft="16"
				 paddingRight="16"/>
		<skins:HorizontalSeparatorLine width="100%"/>
	</s:BorderContainer>


	<s:HGroup width="100%"
			  paddingBottom="16"
			  paddingLeft="16"
			  paddingRight="16"
			  paddingTop="16">
		<s:VGroup width="100%"
				  height="100%">
			<mx:Form width="100%"
					 styleName="roundedBlueBorderBox"
					 label="{resourceManager.getString('myResources','UPLOAD_EXERCISE_TYPE')}"
					 visible="{DataModel.getInstance().loggedUser.isAdmin &amp;&amp; CONFIG::noPracticeUpload}"
					 includeInLayout="{DataModel.getInstance().loggedUser.isAdmin &amp;&amp; CONFIG::noPracticeUpload}">
				<mx:FormItem label="{resourceManager.getString('myResources','UPLOAD_EXERCISE_TYPE')}"
							 styleName="boldLabel">
					<s:RadioButtonGroup id="uploadTypeGroup"
										itemClick="changeUploadType(event)"/>
					<s:RadioButton id="uploadType1"
								   value="upldType1"
								   label="{resourceManager.getString('myResources','UPLOAD_PRACTICE_EXERCISE')}"
								   selected="true"
								   group="{uploadTypeGroup}"/>
					<s:RadioButton id="uploadType2"
								   value="upldType2"
								   label="{resourceManager.getString('myResources','UPLOAD_EVALUATION_EXERCISE')}"
								   group="{uploadTypeGroup}"/>
				</mx:FormItem>
			</mx:Form>
			<mx:Form width="100%"
					 styleName="roundedBlueBorderBox">
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_TITLE')}"
							 width="100%"
							 styleName="boldLabel"
							 required="true">
					<s:TextInput width="100%"
								 id="videoTitle"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_DESCRIPTION')}"
							 width="100%"
							 styleName="boldLabel"
							 required="true">
					<mx:TextArea width="100%"
								 id="videoDescription"
								 maxChars="500"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_TAGS')}"
							 width="100%"
							 styleName="boldLabel"
							 toolTip="{resourceManager.getString('myResources','COMMA_SEPARATED_WORDS')}"
							 required="true">
					<mx:TextArea width="100%"
								 id="videoTags"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_DIFFICULTY_LEVEL')}"
							 styleName="boldLabel"
							 required="true">
					<common:DifficultyLevelComboBox id="difficultySelector"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_LANGUAGE')}"
							 styleName="boldLabel"
							 required="true">
					<common:LanguageComboBox id="languageSelector"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_SPECIFY_LICENSE')}"
							 styleName="boldLabel"
							 required="true">
					<common:LicenseComboBox id="licenseSelector"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_VIDEO_OWNER_AUTHOR')}"
							 styleName="boldLabel"
							 toolTip="{resourceManager.getString('myResources','TOOLTIP_VIDEO_OWNER_AUTHOR')}"
							 width="100%">
					<s:TextInput width="100%"
								 id="referenceUrl"/>
				</mx:FormItem>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_CHOOSE_UPLOADING_METHOD')}"
							 styleName="boldLabel">
					<s:RadioButtonGroup id="uploadOptionsGroup"
										itemClick="changeUploadMethod(event)"/>
					<s:RadioButton id="uploadChoice"
								   value="updChoice"
								   label="{resourceManager.getString('myResources','LABEL_UPLOAD_FILE')}"
								   group="{uploadOptionsGroup}"/>
					<s:RadioButton id="recordChoice"
								   value="recChoice"
								   label="{resourceManager.getString('myResources','LABEL_UPLOAD_STREAMING')}"
								   group="{uploadOptionsGroup}"/>
					<s:RadioButton id="youtubeChoice"
								   value="ytChoice"
								   label="{resourceManager.getString('myResources','LABEL_UPLOAD_YOUTUBE')}"
								   group="{uploadOptionsGroup}"
								   includeInLayout="{CONFIG::unstable ? true : false}"
								   visible="{CONFIG::unstable ? true : false}"/>
				</mx:FormItem>

				<!-- Now we only let the automatic transcription widget to appear in the unstable release.
					 Previously we checked the user was an admin to enable this feature using DataModel.getInstance().loggedUser.isAdmin in both "visible" and "includeInLayout" attributes. -->
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_AUTOMATIC_EVALUATION')}"
							 styleName="boldLabel"
							 visible="{ CONFIG::unstable }"
							 includeInLayout="{ CONFIG::unstable }"
							 height="67">
					<s:CheckBox label="{resourceManager.getString('myResources','LABEL_ADD_AUTOMATIC_EVALUATION_IF_POSSIBLE')}"
								id="autoevaluateCheckbox"/>
					<mx:FormItem label="{resourceManager.getString('myResources','LABEL_CHOOSE_TRANSCRIPTION_SYSTEM')}"
								 styleName="boldLabel">
						<common:TranscriptionSystemComboBox id="transcSystemSelector"/>
					</mx:FormItem>
				</mx:FormItem>

				<mx:Spacer height="16"/>
				<s:HGroup width="100%">
					<mx:Image id="groupLogo"
							  source="resources/images/about_section_title_icon.png"/>
					<s:VGroup width="100%">
						<mx:Text htmlText="{ StringUtil.substitute(resourceManager.getString('myResources', 'UPLOAD_LIMITS_INFO'), DataModel.getInstance().maxFileSize/1048576, DataModel.getInstance().minExerciseDuration, DataModel.getInstance().maxExerciseDuration) }"
								 fontSize="14"/>
						<mx:Text htmlText="{ StringUtil.substitute(resourceManager.getString('myResources', 'UPLOAD_LIMITS_REASONING'), DataModel.getInstance().maxExerciseDuration) }"
								 width="100%"/>
					</s:VGroup>

				</s:HGroup>
			</mx:Form>

			<!-- Part of the Video Slice widget -->
			<s:VGroup id="sliceButtons"
					  visible="false"
					  includeInLayout="{CONFIG::unstable ? true : false}">
				<mx:Text id="requestInfo"
						 visible="false"
						 text="{resourceManager.getString('myResources','SLICEREQUEST_TEXT')}"
						 fontSize="12"
						 width="100%"/>
				<mx:Spacer height="20"/>
				<s:HGroup>
					<mx:Button label="{resourceManager.getString('myResources','BUTTON_UPLOAD')}"
							   toolTip="{resourceManager.getString('myResources','TOOLTIP_UPLOAD_FILES')}"
							   id="sliceUpload"
							   click="saveSlice()"
							   enabled="{formIsValid}"
							   icon="@Embed(source='../../resources/images/bullet_go.png')"/>

					<mx:Button id="sliceCancel"
							   toolTip="{resourceManager.getString('myResources','TOOLTIP_CANCEL_UPLOAD')}"
							   icon="@Embed(source='../../resources/images/cancel.png')"
							   width="26"
							   click="cancelSlice()"/>
				</s:HGroup>
				<mx:Spacer height="10"/>
				<mx:Label id="infoMessage"
						  text="{resourceManager.getString('myResources','SLICEPROGRESS_TEXT')}"
						  fontWeight="bold"
						  visible="false"/>

			</s:VGroup>

			<!-- File Upload widget -->
			<s:VGroup id="uploadFileBox"
					  styleName="roundedBlueBorderBox"
					  width="100%"
					  minHeight="0"
					  height="0"
					  visible="false">
				<s:HGroup width="100%"
						  height="60"
						  horizontalAlign="center"
						  verticalAlign="middle">
					<mx:DataGrid id="listFiles"
								 allowMultipleSelection="false"
								 rowCount="1"
								 draggableColumns="false"
								 resizableColumns="false"
								 sortableColumns="false"
								 change="validateForm(event)">
						<mx:columns>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources','COLUMNLABEL_FILE')}"
											   dataField="name"
											   width="400"
											   wordWrap="true"/>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources','COLUMNLABEL_SIZE')}"
											   dataField="size"
											   width="75"
											   textAlign="right"/>
						</mx:columns>
					</mx:DataGrid>
					<s:HGroup width="100%"
							  height="100%"
							  horizontalAlign="right"
							  verticalAlign="middle"
							  paddingRight="12">
						<skins:IconButton id="btnAdd"
										  toolTip="{resourceManager.getString('myResources','TOOLTIP_ADD_FILES')}"
										  click="addFiles()"
										  label="{resourceManager.getString('myResources','BUTTON_BROWSE')}"
										  skinClass="skins.IconButtonSkin"
										  icon="@Embed('/resources/images/add.png')"/>
					</s:HGroup>
				</s:HGroup>
				<s:Label paddingLeft="12"
						 paddingRight="12"
						 text="{resourceManager.getString('myResources','LABEL_UPLOADSTATUS_NOACTIVITY')}"
						 width="100%"
						 id="uploadInformationLabel"
						 fontWeight="bold"/>
				<mx:ControlBar horizontalAlign="center"
							   verticalAlign="middle"
							   width="100%">
					<mx:ProgressBar id="progBar"
									mode="manual"
									label=""
									labelPlacement="center"
									width="100%"/>
					<skins:IconButton id="btnCancel"
									  toolTip="{resourceManager.getString('myResources','TOOLTIP_CANCEL_UPLOAD')}"
									  width="26"
									  click="onUploadCanceled()"
									  skinClass="skins.IconButtonSkin"
									  icon="@Embed('/resources/images/cancel.png')"/>
					<skins:IconButton label="{resourceManager.getString('myResources','BUTTON_UPLOAD')}"
									  toolTip="{resourceManager.getString('myResources','TOOLTIP_UPLOAD_FILES')}"
									  id="btnUpload"
									  click="startUpload()"
									  enabled="{formIsValid}"
									  skinClass="skins.IconButtonSkin"
									  icon="@Embed('/resources/images/bullet_go.png')"/>
				</mx:ControlBar>
			</s:VGroup>
		</s:VGroup>

		<!-- Wecbam recording widget -->
		<s:VGroup id="webcamWidget">
			<ns1:TempVideoRecording id="recFromWebcamBox"
									visible="false"
									streamsFolder="{DataModel.getInstance().exerciseStreamsFolder}"
									filePrefix="upld"/>
			<s:VGroup id="recUploadBox"
					  styleName="roundedBlueBorderBox"
					  width="{recFromWebcamBox.width}"
					  visible="false">
				<mx:Text width="{recFromWebcamBox.width-22}"
						 text="{resourceManager.getString('myResources','TEXT_RECORD_VIDEO_UPLOAD')}"
						 selectable="false"/>
				<mx:Spacer/>
				<s:Button id="saveWebcamRecord"
						  label="{resourceManager.getString('myResources','BUTTON_SAVE_STREAMING_UPLOAD')}"
						  enabled="{recFromWebcamBox.recordingFileName != null  &amp;&amp; !recFromWebcamBox.isRecording}"
						  buttonMode="true"
						  click="saveRecordedExercise()"/>
			</s:VGroup>

		</s:VGroup>

		<!-- Video Slice widget -->
		<s:VGroup id="vSliceWidget"
				  visible="false"
				  includeInLayout="{CONFIG::unstable ? true : false}"
				  width="100%">
			<mx:Label text="{resourceManager.getString('myResources','TITLE_URLSEARCH')}"
					  fontSize="12"
					  fontWeight="bold"/>
			<mx:HBox>
				<mx:TextInput width="200"
							  id="sliceSearch"/>
				<mx:Button label="{resourceManager.getString('myResources','BUTTON_SEARCH')}"
						   click="identifySearchType()"/>
			</mx:HBox>

			<ns2:AS3Player id="VP"
						   visible="false"/>

		</s:VGroup>

	</s:HGroup>

	<fx:Declarations>
		<mx:StringValidator id="titleValidator"
							source="{videoTitle}"
							property="text"
							minLength="3"
							maxLength="80"/>
		<mx:StringValidator id="descriptionValidator"
							source="{videoDescription}"
							property="text"
							minLength="3"
							maxLength="512"/>
		<mx:StringValidator id="tagValidator"
							source="{videoTags}"
							property="text"
							minLength="3"
							maxLength="255"/>
	</fx:Declarations>


</s:VGroup>
