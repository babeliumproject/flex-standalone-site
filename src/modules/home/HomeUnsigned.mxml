<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%"
		  creationComplete="onComplete()"
		  xmlns:skins="skins.*" xmlns:videoPlayer="modules.videoPlayer.*">

	<fx:Script>
		<![CDATA[
			import events.MessageOfTheDayEvent;

			import model.DataModel;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.controls.Text;
			import mx.utils.ObjectUtil;

			import skins.IconButtonVerticalSkin;

			import spark.components.NavigatorContent;

			private const SLIDE_CHANGE_DELAY:uint=10000; //10 seconds

			[Bindable]
			private var selectedIndex:int=0;

			[Bindable]
			private var messageArray:ArrayCollection=new ArrayCollection();

			private var slideTimer:Timer;

			protected function onComplete():void
			{
				slideTimer=new Timer(SLIDE_CHANGE_DELAY, 0);
				slideTimer.addEventListener(TimerEvent.TIMER, onTimerTick);
				getUnsignedMessagesOfTheDay();
			}

			protected function onTimerTick(event:TimerEvent):void
			{
				var slideCount:int=appDescriptionViewStack.numChildren;
				if (slideCount > 0)
				{
					var currentlySelectedIndex:int=appDescriptionViewStack.selectedIndex;
					if (currentlySelectedIndex < (slideCount - 1))
						selectedIndex=currentlySelectedIndex + 1;
					else
						selectedIndex=0;
				}
			}

			public function getUnsignedMessagesOfTheDay():void
			{
				if (!DataModel.getInstance().isLoggedIn)
					new MessageOfTheDayEvent(MessageOfTheDayEvent.UNSIGNED_MESSAGES_OF_THE_DAY, DataModel.getInstance().currentlyActiveLocale).dispatch();
			}

			protected function set onUnsignedMessagesOfTheDayRetrieved(value:Boolean):void
			{
				if (!DataModel.getInstance().isLoggedIn)
				{
					messageArray=DataModel.getInstance().messagesOfTheDayData;
					if (messageArray.length > 0)
					{
						slideTimer.stop();
						appDescriptionViewStack.removeAllChildren();
						callLater(addMessagesToContainer);
					}
					else
					{
						unsignedMotdBox.includeInLayout=false;
						unsignedMotdBox.visible=false;
					}
				}

			}

			protected function addMessagesToContainer():void
			{
				for each (var messageData:Object in messageArray)
				{
					var navc:NavigatorContent=new NavigatorContent();
					navc.addElement(generateMessageBox(messageData));
					appDescriptionViewStack.addChild(navc);
				}
				selectedIndex=0;
				slideTimer.start();
				unsignedMotdBox.includeInLayout=true;
				unsignedMotdBox.visible=true;
			}

			protected function generateMessageBox(messageData:Object):HGroup
			{
				var messageImage:Image=new Image();
				messageImage.source=messageData.resourceUrl;
				messageImage.width=240;
				messageImage.height=180;
				messageImage.scaleContent=true;

				var titleLabel:Label=new Label();
				titleLabel.text=messageData.title;
				titleLabel.styleName="sectionInfoTitleLabel";

				var messageText:Text=new Text();
				messageText.text=messageData.message;
				messageText.percentWidth=100;
				messageText.percentHeight=100;

				var messageVBox:VGroup=new VGroup();
				messageVBox.percentWidth=100;
				messageVBox.percentHeight=100;
				messageVBox.setStyle("verticalAlign", "middle");
				messageVBox.addElement(titleLabel);
				messageVBox.addElement(messageText);

				var motdBox:HGroup=new HGroup();
				motdBox.percentWidth=100;
				motdBox.setStyle("verticalAlign", "middle");
				motdBox.addElement(messageImage);
				motdBox.addElement(messageVBox);

				return motdBox;
			}

			public function set onLanguageChanged(value:Boolean):void
			{
				getUnsignedMessagesOfTheDay();
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().messagesOfTheDayRetrieved}"
				destination="onUnsignedMessagesOfTheDayRetrieved"/>

	<fx:Binding source="{DataModel.getInstance().languageChanged}"
				destination="onLanguageChanged"/>


	<s:BorderContainer id="unsignedMotdBox"
					   styleName="sectionInfoBox"
					   minHeight="0"
					   width="100%"
					   minWidth="1000"
					   includeInLayout="false"
					   visible="false">
		<s:layout>
			<s:VerticalLayout paddingTop="16"
							  paddingLeft="16"
							  paddingRight="16"
							  paddingBottom="16"/>
		</s:layout>
		<s:HGroup id="descriptionPaginationUnsigned"/>
		<mx:ViewStack id="appDescriptionViewStack"
					  selectedIndex="{selectedIndex}"
					  width="100%"
					  minWidth="1000"
					  resizeToContent="true">
		</mx:ViewStack>

		<!--
			 <s:HGroup horizontalAlign="right"
			 width="100%">
			 <s:Button label="Join us!"/>
			 </s:HGroup>
		-->
	</s:BorderContainer>
	<skins:IconButton skinClass="skins.IconButtonVerticalSkin"
					  gradientColors="[#ffffff, #e3bb03]"
					  gradientColorsOver="[#a2b342, #895472]"
					  icon="@Embed('resources/images/upload_icon.png')"
					  color="#b09002"
					  fontWeight="bold"
					  borderWeight="1"
					  borderColors="#FFFFFF"
					  label="{resourceManager.getString('myResources','LABEL_UPLOAD')}"/>
</s:VGroup>
