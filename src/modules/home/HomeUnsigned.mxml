<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%"
		  creationComplete="onComplete()"
		  xmlns:skins="skins.*"
		  xmlns:videoPlayer="modules.videoPlayer.*">

	<fx:Script>
		<![CDATA[
			import events.MessageOfTheDayEvent;
			
			import model.DataModel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Text;
			import mx.events.IndexChangedEvent;
			import mx.utils.ObjectUtil;
			
			import skins.IconButtonVerticalSkin;
			import skins.StepTabBarSkin;
			
			import spark.components.NavigatorContent;

			private const SLIDE_CHANGE_DELAY:uint=10000; //10 seconds

			[Bindable]
			private var selectedIndex:int=0;

			[Bindable]
			private var messageArray:ArrayCollection=new ArrayCollection();

			[Bindable]
			public var streamSource:String=DataModel.getInstance().streamingResourcesPath;

			private var slideTimer:Timer;
			
			private var staticMotd:StaticUnsignedMotd;
			
			[Bindable]
			private var howToVideoArray:ArrayCollection = new ArrayCollection(new Array('config','record','evaluate','subtitle'));

			protected function onComplete():void
			{
				slideTimer=new Timer(SLIDE_CHANGE_DELAY, 0);
				slideTimer.addEventListener(TimerEvent.TIMER, onTimerTick);
				getUnsignedMessagesOfTheDay();
			}

			protected function onTimerTick(event:TimerEvent):void
			{
				var slideCount:int=appDescriptionViewStack.numChildren;
				if (slideCount > 0)
				{
					var currentlySelectedIndex:int=appDescriptionViewStack.selectedIndex;
					if (currentlySelectedIndex < (slideCount - 1))
						selectedIndex=currentlySelectedIndex + 1;
					else
						selectedIndex=0;
				}
			}

			public function getUnsignedMessagesOfTheDay():void
			{
				if (!DataModel.getInstance().isLoggedIn)
					new MessageOfTheDayEvent(MessageOfTheDayEvent.UNSIGNED_MESSAGES_OF_THE_DAY, DataModel.getInstance().currentlyActiveLocale).dispatch();
			}

			protected function set onUnsignedMessagesOfTheDayRetrieved(value:Boolean):void
			{
				if (!DataModel.getInstance().isLoggedIn)
				{
					messageArray=DataModel.getInstance().messagesOfTheDayData;
					if (messageArray.length > 0)
					{
						slideTimer.stop();
						appDescriptionViewStack.removeAllChildren();
						callLater(addMessagesToContainer);
					}
					else
					{
						var navc:NavigatorContent=new NavigatorContent();
						staticMotd = new StaticUnsignedMotd();
						navc.addElement(staticMotd);
						appDescriptionViewStack.addChild(navc);
						navc.label=appDescriptionViewStack.numChildren.toString();
					}
				}

			}

			protected function addMessagesToContainer():void
			{
				var navcs:NavigatorContent=new NavigatorContent();
				staticMotd = new StaticUnsignedMotd();
				navcs.addElement(staticMotd);
				appDescriptionViewStack.addChild(navcs);
				navcs.label=appDescriptionViewStack.numChildren.toString();
				for (var i:uint=0; i < messageArray.length; i++)
				{
					var navc:NavigatorContent=new NavigatorContent();
					navc.addElement(generateMessageBox(messageArray[i]));
					appDescriptionViewStack.addChild(navc);
					navc.label=appDescriptionViewStack.numChildren.toString();
				}
				selectedIndex=0;
				slideTimer.start();
			}

			protected function generateMessageBox(messageData:Object):HGroup
			{
				var messageImage:Image=new Image();
				messageImage.source=messageData.resourceUrl;
				messageImage.width=240;
				messageImage.height=180;
				messageImage.scaleContent=true;

				var titleLabel:Label=new Label();
				titleLabel.text=messageData.title;
				titleLabel.styleName="sectionInfoTitleLabel";

				var messageText:Text=new Text();
				messageText.text=messageData.message;
				messageText.percentWidth=100;
				messageText.percentHeight=100;

				var messageVBox:VGroup=new VGroup();
				messageVBox.percentWidth=100;
				messageVBox.percentHeight=100;
				messageVBox.setStyle("verticalAlign", "middle");
				messageVBox.addElement(titleLabel);
				messageVBox.addElement(messageText);

				var motdBox:HGroup=new HGroup();
				motdBox.percentWidth=100;
				motdBox.setStyle("verticalAlign", "middle");
				motdBox.addElement(messageImage);
				motdBox.addElement(messageVBox);

				return motdBox;
			}

			public function set onLanguageChanged(value:Boolean):void
			{
				getUnsignedMessagesOfTheDay();
			}


			protected function steptabbar_clickHandler(event:MouseEvent):void
			{
				slideTimer.reset();
				slideTimer.start();
			}

			protected function howToVideosVS_changeHandler(event:IndexChangedEvent):void
			{
				var newIndex:uint=event.newIndex;
				switch (newIndex)
				{
					case howToVideosVS.getChildIndex(howToConfDevNavContent):
						//howToVideoPlayer.videoSource="config";
						howToVideoLabel.text=resourceManager.getString('myResources', 'HOW_TO_CONFIGURE_YOUR_DEVICES');
						break;
					case howToVideosVS.getChildIndex(howToPractLangNavContent):
						//howToVideoPlayer.videoSource="record";
						howToVideoLabel.text=resourceManager.getString('myResources', 'HOW_TO_PRACTICE_A_LANGUAGE');
						break;
					case howToVideosVS.getChildIndex(howToAssessUsersNavContent):
						//howToVideoPlayer.videoSource="evaluate";
						howToVideoLabel.text=resourceManager.getString('myResources', 'HOW_ASSESS_OTHER_USERS_WORK');
						break;
					case howToVideosVS.getChildIndex(howToSubtitleNavContent):
						//howToVideoPlayer.videoSource="subtitle";
						howToVideoLabel.text=resourceManager.getString('myResources', 'HOW_TO_SUBTITLE_A_VIDEO');
						break;
					default:
						break;
				}
			}
			
			private function set onTabChange(value:Boolean):void{
				howToVideoPlayer.stopVideo();
				howToVideosVS.selectedIndex = 0;
				staticMotd.staticUnsignedMotdVp.stopVideo();
			}
			
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().messagesOfTheDayRetrieved}"
				destination="onUnsignedMessagesOfTheDayRetrieved"/>

	<fx:Binding source="{DataModel.getInstance().languageChanged}"
				destination="onLanguageChanged"/>
	<fx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="onTabChange"/>


	<s:BorderContainer id="unsignedMotdBox"
					   styleName="sectionInfoBox"
					   minHeight="0"
					   width="100%"
					   minWidth="1000">
		<s:layout>
			<s:VerticalLayout paddingTop="16"/>
		</s:layout>

		<s:HGroup width="100%"
				  horizontalAlign="center">
			<skins:StepTabBar styleName="paginationWhiteBlueButton"
							  dataProvider="{appDescriptionViewStack}"
							  click="steptabbar_clickHandler(event)"/>
		</s:HGroup>

		<s:HGroup id="descriptionPaginationUnsigned"
				  paddingLeft="16"
				  paddingRight="16"/>
		<mx:ViewStack id="appDescriptionViewStack"
					  selectedIndex="{selectedIndex}"
					  width="100%"
					  minWidth="1000"
					  resizeToContent="true"
					  paddingLeft="16"
					  paddingRight="16"
					  paddingBottom="16">
		</mx:ViewStack>
		<skins:HorizontalSeparatorLine width="100%"/>
	</s:BorderContainer>

	<s:HGroup paddingTop="16"
			  paddingLeft="16"
			  paddingRight="16">
		<s:BitmapImage source="@Embed('/resources/images/icon_foot.png')"/>
		<s:VGroup>
			<s:Label id="stepByStepTitle"
					 text="{resourceManager.getString('myResources','STEP_BY_STEP')}"
					 styleName="sectionTitleLabel"/>
			<s:Line width="{stepByStepTitle.width}">
				<s:stroke>
					<mx:SolidColorStroke weight="3"
										 color="#268caa"/>
				</s:stroke>
			</s:Line>
		</s:VGroup>
	</s:HGroup>

	<s:VGroup width="100%"
			  horizontalAlign="center"
			  paddingTop="16"
			  paddingLeft="16"
			  paddingRight="16"
			  paddingBottom="16">


		<s:HGroup width="100%"
				  horizontalAlign="center"
				  paddingBottom="16">
			<skins:StepTabBar styleName="paginationWhiteBlueButton"
							  dataProvider="{howToVideosVS}"/>
		</s:HGroup>

		<mx:ViewStack id="howToVideosVS"
					  change="howToVideosVS_changeHandler(event)">
			<s:NavigatorContent id="howToConfDevNavContent"
								label="1">
			</s:NavigatorContent>

			<s:NavigatorContent id="howToPractLangNavContent"
								label="2">
			</s:NavigatorContent>

			<s:NavigatorContent id="howToAssessUsersNavContent"
								label="3">
			</s:NavigatorContent>

			<s:NavigatorContent id="howToSubtitleNavContent"
								label="4">
			</s:NavigatorContent>
		</mx:ViewStack>

		<s:Label id="howToVideoLabel"
				 text="{resourceManager.getString('myResources','HOW_TO_CONFIGURE_YOUR_DEVICES')}"
				 styleName="exerciseTitleLabel"/>
		<videoPlayer:VideoPlayerBabelia id="howToVideoPlayer"
										skin="white"
										seek="true"
										autoPlay="true"
										subtitles="true"
										autoScale="false"
										arrows="false"
										width="800"
										height="{Math.floor(howToVideoPlayer.width * 9 / 16)}"
										streamSource="{streamSource}"
										videoSource="{howToVideoArray.getItemAt(howToVideosVS.selectedIndex)}"
										controlsEnabled="false"/>


	</s:VGroup>

</s:VGroup>
