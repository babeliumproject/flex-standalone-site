<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ns1="modules.configuration.microphone.*"
		 styleName="padding10AllSidesBox"
		 width="100%"
		 height="100%"
		 creationComplete="onComplete()">

	<mx:Script>
		<![CDATA[
			import flash.sampler.getInvocationCount;

			import model.DataModel;

			import modules.configuration.ConfigurationResultEvent;
			import modules.configuration.OflaDemoRed5Sentences;
			import modules.configuration.ShowStatusMessage;

			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;

			import view.common.CustomAlert;
			import view.common.PrivacyRights;

			public var mic:Microphone;
			public var rec:Boolean=false;
			public var timerRec:Timer;
			public var timerPlay:Timer;
			public var timerSound:Timer;
			public var onMic:Boolean=false;
			public var oflaDemoRed5Sentences:OflaDemoRed5Sentences;

			private var privacyRights:PrivacyRights;
			private var _micCamEnabled:Boolean;

			private function onComplete():void
			{
				oflaDemoRed5Sentences=new OflaDemoRed5Sentences();
				oflaDemoRed5Sentences.connect();
				initTimers();
			}

			private function recStart():void
			{
				//Reset previous connections to record several files
				oflaDemoRed5Sentences.closeNetStreamObjects();
				prepareDevices();

			} //recStart()

			private function playStart():void
			{
				if (rec && onMic)
				{ //Rec file exists
					DataModel.getInstance().playing=true;
					initCont();
					statusTextFunc("Playing");
					oflaDemoRed5Sentences.play('audio');
					timerPlay.start();
				}
				else if (rec)
				{ //Recording without signal
					CustomAlert.error(resourceManager.getString('myResources', 'CONFIGURATION_NO_MIC_SIGNAL'));
				}
				else
				{ //Recording file doesn't exist
					CustomAlert.error(resourceManager.getString('myResources', 'CONFIGURATION_NO_FILE_EXISTS'));
				}
			}

			private function timerRecFunc(event:TimerEvent):void
			{
				var denb:int
				denb=timerRec.currentCount
				if (timerRec.currentCount <= 10)
				{
					recordProgressBar.setProgress(10 - denb, 10);
					recordProgressBar.label=denb + "/10 " + "seconds";
						//contador.text=denb.toString();
						//statusText.text=statusText.text + ".";
				}
				else if (timerRec.currentCount > 10)
				{
					DataModel.getInstance().recording=false;
					oflaDemoRed5Sentences.rec_ns.attachAudio(null);
					hideInfo();
					rec=true;
					timerRec.reset(); //Prepare for the next recording

					/*
					   If no signal was detected during the 10 second recording, ConfigurationResultEvent.MICROPHONE_RESULT event
					   is dispatched with false value so that the result panel displays an issue with the microphone.
					 */
					if (!onMic)
					{
						var ev:ConfigurationResultEvent=new ConfigurationResultEvent(ConfigurationResultEvent.MICROPHONE_RESULT, false);
						dispatchEvent(ev);
					}
				}
			}

			private function timerPlayFunc(event:TimerEvent):void
			{
				var denb:int;
				denb=timerPlay.currentCount;
				if (timerPlay.currentCount <= 10)
				{
					recordProgressBar.setProgress(denb, 10);
						//contador.text=denb.toString();
						//statusText.text=statusText.text + ".";
				}
				else if (timerPlay.currentCount > 10)
				{
					DataModel.getInstance().playing=false;
					var ev:ConfigurationResultEvent=new ConfigurationResultEvent(ConfigurationResultEvent.MICROPHONE_RESULT, true);
					dispatchEvent(ev);
					hideInfo();
					timerPlay.reset(); //Prepare for the next playback
				}
			}

			private function initTimers():void
			{
				//This timer is used for audio recording
				timerRec=new Timer(1000, 0);
				timerRec.addEventListener(TimerEvent.TIMER, timerRecFunc);
				//This timer is used for audio playback
				timerPlay=new Timer(1000, 0);
				timerPlay.addEventListener(TimerEvent.TIMER, timerPlayFunc);
			}

			private function initCont():void
			{
				//contador.text="0";
				//contador.visible=true;
				recordProgressBar.setProgress(0, 10);
			}

			private function hideInfo():void
			{
				statusText.visible=false;

			}

			private function statusTextFunc(s:String):void
			{
				statusText.text=s;
				statusText.visible=true;
			}

			private function onMicActivity(e:ActivityEvent):void
			{
				timerSound=new Timer(20, 0);
				timerSound.addEventListener(TimerEvent.TIMER, soundDetect);
				timerSound.start();
			}

			private function soundDetect(e:TimerEvent):void
			{
				/*
				   The audio only FLV file is only generated if ActivityEvent.ACTIVITY is dispatched and
				   the sound signal is good enough to be distinguished from noise.

				   The aforementioned file should be created only once, and statusText text should be
				   initialized once. This is controlled with the boolean variable onMic (which is
				   important to reset if want the subsequent recordings to work properly).
				 */
				if (!onMic && mic.activityLevel > 10)
				{
					oflaDemoRed5Sentences.publish('audio');
					statusTextFunc("Recording");
					onMic=true;
				}
			}

			private function prepareRecording():void
			{
				onMic=false;
				barraSonido.giveMicrophone(mic);
				mic.addEventListener(ActivityEvent.ACTIVITY, onMicActivity);
				oflaDemoRed5Sentences.rec_ns.attachAudio(mic);
				statusText.visible=true;
				DataModel.getInstance().audioRec=true;
				DataModel.getInstance().recording=true;
				timerRec.start();
				initCont();
			}

			private function prepareDevices():void
			{
				if (PrivacyRights.microphoneReady())
				{
					_micCamEnabled=DataModel.getInstance().micCamAllowed;
					configureDevices();
				}
				else
				{
					privacyRights=PrivacyRights(PopUpManager.createPopUp(Application.application.parent, PrivacyRights, true));
					privacyRights.addEventListener(CloseEvent.CLOSE, privacyBoxClosed);
					PopUpManager.centerPopUp(privacyRights);
				}
			}

			private function configureDevices():void
			{
				mic=DataModel.getInstance().microphone;

				mic.setUseEchoSuppression(true);
				mic.gain=40;
				mic.setSilenceLevel(0, 60000);
				mic.rate=44;

				prepareRecording();
			}

			private function privacyBoxClosed(event:Event):void
			{
				PopUpManager.removePopUp(privacyRights);
				_micCamEnabled=DataModel.getInstance().micCamAllowed;
				if (_micCamEnabled && PrivacyRights.microphoneFound)
				{
					configureDevices();
				}
				else
				{
					CustomAlert.error("In order to record something you must 'Allow' the access to your devices.");
				}
			}
		]]>
	</mx:Script>



	<mx:Text text="{resourceManager.getString('myResources','LABEL_MIC_SETUP')}"
			 styleName="sectionLowerTitleLabel"/>
	<mx:HRule height="1"
			  width="100%"/>
	<ns1:explicacionMic height="100%"
						width="100%"
						id="texto"/>

	<mx:Spacer height="20"/>

	<mx:HBox cornerRadius="8"
			 borderStyle="solid"
			 borderColor="#92d3d5"
			 paddingTop="10"
			 paddingBottom="10"
			 paddingLeft="10"
			 paddingRight="10">
		<mx:Button id="recButton"
				   click="recStart()"
				   icon="@Embed(source='resources/images/playerRecIcon.png')"
				   horizontalCenter="true"
				   enabled="{!DataModel.getInstance().playing &amp;&amp; 
					   !DataModel.getInstance().recording &amp;&amp;
					   DataModel.getInstance().permissions}"/>
		<mx:Button id="playButton"
				   click="playStart()"
				   icon="@Embed(source='resources/images/playerPlayIcon.png')"
				   horizontalCenter="true"
				   enabled="{!DataModel.getInstance().playing &amp;&amp; 
					   !DataModel.getInstance().recording &amp;&amp;
					   DataModel.getInstance().permissions}"/>
		<mx:VBox>
			<mx:HBox horizontalAlign="right"
					 width="100%">
				<mx:ProgressBar id="recordProgressBar"
								mode="manual"
								minimum="0"
								maximum="10"
								direction="left"
								trackHeight="20"
								label="0/10 seconds"
								labelPlacement="center"/>
			</mx:HBox>
			<mx:Label id="statusText"
					  styleName="errorLabel"
					  text="{resourceManager.getString('myResources','CONFIGURATION_NO_MIC_SIGNAL')}"
					  visible="false"/>
			<mx:HBox verticalAlign="middle">
				<mx:Label text="Level: "/>
				<ns1:barraSonido id="barraSonido"/>
			</mx:HBox>

		</mx:VBox>
	</mx:HBox>

	<mx:HBox id="notConect"
			 horizontalAlign="center"
			 verticalAlign="middle"
			 width="100%"
			 height="100%"
			 visible="false">
		<ns1:notMicText/>
	</mx:HBox>
</mx:VBox>
