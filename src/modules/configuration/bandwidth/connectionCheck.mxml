<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:ns1="modules.configuration.bandwidth.*"
		  xmlns:common="view.common.*"
		  width="100%"
		  height="100%"
		  creationComplete="onComplete()">

	<fx:Script>
		<![CDATA[
			import flash.events.NetStatusEvent;
			import flash.net.NetConnection;
			
			import model.DataModel;
			
			import modules.configuration.ConfigurationResultEvent;
			import modules.configuration.Red5Connection;
			
			import mx.charts.series.ColumnSeries;
			import mx.collections.ArrayCollection;

			private var nc:NetConnection;
			public var ns:NetStream;
			private var serverClient:ServerClientBandwidth;
			private var chart:ColumnSeries;
			private var red5Connection:Red5Connection;

			[Bindable]
			private var chartData:ArrayCollection;

			[Bindable]
			private var bwMin:Number;

			private function onComplete():void
			{
//				bwMin=DataModel.getInstance().prefDic["bwCheckMin"];
//				red5Connection=new Red5Connection('bwcheck');
//				nc=red5Connection.getNetConnection();
//				nc.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
			}

			private function set onPreferencesRetrieved(flag:Boolean):void
			{
				if (DataModel.getInstance().prefDic != null)
				{
					bwMin=DataModel.getInstance().prefDic["bwCheckMin"];
					red5Connection=new Red5Connection('bwcheck');
					nc=red5Connection.getNetConnection();
					nc.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
				}
			}

			public function onStatus(event:NetStatusEvent):void
			{
				switch (event.info.code)
				{
					case "NetConnection.Connect.Success":
						serverClient=new ServerClientBandwidth();
						serverClient.connection=nc;
						serverClient.service="bwCheckService.onServerClientBWCheck";
						serverClient.addEventListener(BandwidthDetectEvent.DETECT_COMPLETE, onServerClientComplete);
						break;
					default:
						trace(event.info.code);
						break;
				} //switch	
			}

			public function onServerClientComplete(event:BandwidthDetectEvent):void
			{
				chartData=new ArrayCollection([{Connection: resourceManager.getString('myResources', 'LABEL_NEEDED_BW'), BWDown: bwMin}, {Connection: resourceManager.getString('myResources', 'LABEL_REAL_BW'), BWDown: event.info.kbitDown}]);
//				showBwInfo(event);
				dispatchResultEvent(event);
			}

//			private function showBwInfo(event:BandwidthDetectEvent):void
//			{
//				Needed.text=resourceManager.getString('myResources', 'LABEL_NEEDED_BW') + ": " + bwMin + " Kb/s";
//				Real.text=resourceManager.getString('myResources', 'LABEL_REAL_BW') + ": " + event.info.kbitDown + " Kb/s";
//				bwInfo.visible=true;
//			}

			private function dispatchResultEvent(event:BandwidthDetectEvent):void
			{
				var ev:ConfigurationResultEvent=new ConfigurationResultEvent(ConfigurationResultEvent.BANDWIDTH_RESULT, event.info.kbitDown >= bwMin);
				dispatchEvent(ev);
			}

			private function startCheck():void
			{	
				if(DataModel.getInstance().bandwidthInfo){
					var ev:BandwidthDetectEvent = new BandwidthDetectEvent(BandwidthDetectEvent.DETECT_COMPLETE);
					ev.info = DataModel.getInstance().bandwidthInfo;
					onServerClientComplete(ev);
				} else {
					if(serverClient){
						serverClient.start();
					} else {
						trace("Can't check the bandwidth right now. Please try again later.");
					}
				}
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().preferencesRetrieved}"
				destination="onPreferencesRetrieved"/>

	<s:Label id="labelBandwidthCheck"
			 text="{resourceManager.getString('myResources','LABEL_BANDWIDTH_CHECK')}"
			 styleName="sectionTitleLabel"/>
	<s:Line width="{labelBandwidthCheck.width}">
		<s:stroke>
			<mx:SolidColorStroke weight="3"
								 color="{labelBandwidthCheck.getStyle('color')}"/>
		</s:stroke>
	</s:Line>

	<s:HGroup width="100%" height="100%">
		<s:VGroup id="explicacion">
			<s:Label text="{resourceManager.getString('myResources', 'CONFIGURATION_BW_MESSAGE1')+' '+resourceManager.getString('myResources', 'CONFIGURATION_BW_MESSAGE2')}"/>
			<s:HGroup width="100%"
					  horizontalAlign="center">
				<s:Button id="comprobacionButton"
						  styleName="bigBlueButton"
						  buttonMode="true"
						  label="{resourceManager.getString('myResources', 'CONFIGURATION_BW_TITTLE')}"
						  enabled="{!DataModel.getInstance().playing &amp;&amp; !DataModel.getInstance().recording}"
						  click="startCheck()"/>
			</s:HGroup>
		</s:VGroup>

		<s:VGroup width="100%"
				  horizontalAlign="right" >
			<s:BorderContainer cornerRadius="8">
				<s:layout>
					<s:VerticalLayout paddingBottom="10"
									  paddingTop="10"
									  paddingLeft="10"
									  paddingRight="10"/>
				</s:layout>
				<mx:ColumnChart id="myChart"
								dataProvider="{chartData}"
								showDataTips="true">
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="Connection"/>
					</mx:horizontalAxis>
					<mx:series>
						<mx:ColumnSeries dataProvider="{chartData}"
										 yField="BWDown"
										 xField="Connection"
										 displayName="Kb/s"/>
					</mx:series>
				</mx:ColumnChart>
				<mx:Legend dataProvider="{myChart}"/>
			</s:BorderContainer>
		</s:VGroup>
	</s:HGroup>

</s:VGroup>
