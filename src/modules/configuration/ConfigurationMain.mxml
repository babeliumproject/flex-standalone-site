<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:mod1="modules.configuration.webcam.*"
		 xmlns:mod2="modules.configuration.microphone.*"
		 xmlns:mod3="modules.configuration.bandwidth.*"
		 width="100%"
		 fontFamily="Arial"
		 fontSize="12"
		 creationComplete="init()"
		 xmlns:common="view.common.*">

	<mx:Script>
		<![CDATA[
			import flash.utils.Timer;

			import model.DataModel;

			import modules.configuration.ConfigurationResultEvent;
			import modules.configuration.ShowStatusMessage;
			import modules.main.Body;

			import mx.events.IndexChangedEvent;

			//Result panelÂ´s Timers
			public var timerMic:Timer;
			public var timerCam:Timer;
			public var timerBW:Timer;

			private var permissionStatus:Boolean=false;

			private function init():void
			{
				configurationMenu.addEventListener(IndexChangedEvent.CHANGE, childChange);
				timerMic=new Timer(500, 0);
				timerCam=new Timer(500, 0);
				timerBW=new Timer(500, 0);
				timerMic.addEventListener(TimerEvent.TIMER, onTimerMic);
				timerCam.addEventListener(TimerEvent.TIMER, onTimerCam);
				timerBW.addEventListener(TimerEvent.TIMER, onTimerBW);
				if (Camera.names.length > 0)
				{ //El usuario dispone de webcam
					webCamCheck.addEventListener(ConfigurationResultEvent.WEBCAM_RESULT, webcamResult);
					webCamCheck.addEventListener(ConfigurationResultEvent.MICROPHONE_RESULT, microphoneResult);
					webCamCheck.addEventListener(ShowStatusMessage.MIC_MESSAGE, micStatusMessage);
					webCamCheck.allMenu.visible=true;
					webCamCheck.notConect.visible=false;
				}
				else
				{ //El usuario no dispone de webcam
					refreshCamButton.visible=true;
					webCamCheck.allMenu.visible=false;
					webCamCheck.notConect.visible=true;
					correctIncorrectIcon(webCamStatusIcon, false);
				}
			}

			/*Gestion de los 3 submodulos*/
			private function childChange(e:IndexChangedEvent):void
			{
				var indice:Number=e.newIndex;
				if (indice == 1)
				{ //Microphone module
					if (permissionStatus)
					{
						micCheck.statusText.text=resourceManager.getString('myResources', 'CONFIGURATION_NO_PERMISSIONS');
						micCheck.statusText.visible=true;
					}
					if (Microphone.names.length > 0)
					{ //El usuario dispone de microfono
						micCheck.addEventListener(ConfigurationResultEvent.MICROPHONE_RESULT, microphoneResult);
						micCheck.addEventListener(ConfigurationResultEvent.WEBCAM_RESULT, webcamResult);
						micCheck.addEventListener(ShowStatusMessage.CAM_MESSAGE, webCamStatusMessage);
						micCheck.allMenu.visible=true;
						micCheck.notConect.visible=false;
					}
					else
					{ //El usuario no dispone de microfono
						refreshMicButton.visible=true;
						micCheck.allMenu.visible=false;
						micCheck.notConect.visible=true;
						correctIncorrectIcon(microphoneStatusIcon, false);
					}
				}
				if (indice == 2)
				{ //Bandwidth module
					bandwidthCheck.addEventListener(ConfigurationResultEvent.BANDWIDTH_RESULT, bandwidthResult);
				}
			}

			/*Funciones para el control de los resultados*/
			public function webcamResult(e:ConfigurationResultEvent):void
			{
				timerCam.start();
				e.status ? correctIncorrectIcon(webCamStatusIcon, true) : correctIncorrectIcon(webCamStatusIcon, false);
			}

			public function microphoneResult(e:ConfigurationResultEvent):void
			{
				timerMic.start();
				e.status ? correctIncorrectIcon(microphoneStatusIcon, true) : correctIncorrectIcon(microphoneStatusIcon, false);
			}

			public function bandwidthResult(e:ConfigurationResultEvent):void
			{
				timerBW.start();
				e.status ? correctIncorrectIcon(bandwidthStatusIcon, true) : correctIncorrectIcon(bandwidthStatusIcon, false);
			}

			/*Funciones timers para el control de los resultados*/
			public function onTimerMic(e:TimerEvent):void
			{
				if (timerMic.currentCount < 8)
				{ //4 parpadeos
					microphoneStatus.visible=!microphoneStatus.visible;
				}
				else
				{ //Configurar el estado inicial
					timerMic.reset();
					microphoneStatus.visible=true;
				}
			}

			public function onTimerCam(e:TimerEvent):void
			{
				if (timerCam.currentCount < 8)
				{ //4 parpadeos
					webCamStatus.visible=!webCamStatus.visible;
				}
				else
				{ //Configurar el estado inicial
					timerCam.reset();
					webCamStatus.visible=true;
				}
			}

			public function onTimerBW(e:TimerEvent):void
			{
				if (timerBW.currentCount < 8)
				{ //4 parpadeos
					bandwidthStatus.visible=!bandwidthStatus.visible;
				}
				else
				{ //Configurar el estado inicial
					timerBW.reset();
					bandwidthStatus.visible=true;
				}
			}

			/*Funciones para el control de refresh*/
			private function refreshMic():void
			{
				if (Microphone.names.length > 0)
				{ //El usuario ha conectado su microfono
					micCheck.addEventListener(ConfigurationResultEvent.MICROPHONE_RESULT, microphoneResult);
					micCheck.allMenu.visible=true;
					micCheck.notConect.visible=false;
					refreshMicButton.visible=false;
				}
			}

			private function refreshWebCam():void
			{
				if (Camera.names.length > 0)
				{ //El usuario ha conectado su webcam
					webCamCheck.addEventListener(ConfigurationResultEvent.WEBCAM_RESULT, webcamResult);
					webCamCheck.allMenu.visible=true;
					webCamCheck.notConect.visible=false;
					refreshCamButton.visible=false;
				}
			}

			//Funciones para el control de los mensajes de falta de permisos
			private function webCamStatusMessage(ev:ShowStatusMessage):void
			{
				webCamCheck.statusText.text=resourceManager.getString('myResources', 'CONFIGURATION_NO_PERMISSIONS');
				;
				webCamCheck.statusText.visible=true;
			}

			private function micStatusMessage(ev:ShowStatusMessage):void
			{
				permissionStatus=true;
			}

			private function correctIncorrectIcon(component:Image, flag:Boolean):void
			{
				component.source=flag ? 'resources/images/tick.png' : 'resources/images/cross.png';
			}
		]]>
	</mx:Script>

	<mx:TabNavigator id="configurationMenu"
					 height="100%"
					 width="100%"
					 backgroundAlpha="0.5"
					 creationPolicy="all">
		<mx:VBox label="{resourceManager.getString('myResources','LABEL_WEBCAM_SETUP')}"
				 width="100%"
				 height="100%"
				 horizontalScrollPolicy="off">
			<mod1:webCamCheck id="webCamCheck"/>
			<mx:LinkButton id="refreshCamButton"
						   visible="false"
						   color="red"
						   textDecoration="underline"
						   label="{resourceManager.getString('myResources','CONNECTITANDCLICKHERETORELOADPAGE')}"
						   click="refreshWebCam()"/>
		</mx:VBox>

		<mx:VBox label="{resourceManager.getString('myResources','LABEL_MIC_SETUP')}">
			<mod2:micCheck id="micCheck"/>
			<mx:LinkButton id="refreshMicButton"
						   visible="false"
						   color="red"
						   textDecoration="underline"
						   label="{resourceManager.getString('myResources','CONNECTITANDCLICKHERETORELOADPAGE')}"
						   click="refreshMic()"/>
		</mx:VBox>

		<mx:VBox label="{resourceManager.getString('myResources','LABEL_BANDWIDTH_CHECK')}">
			<mod3:connectionCheck id="bandwidthCheck"/>
		</mx:VBox>
	</mx:TabNavigator>
	<mx:Panel title="{resourceManager.getString('myResources', 'RESULTS')}">
		<mx:HBox id="webCamStatus"
				 verticalAlign="middle">
			<mx:Text text="{resourceManager.getString('myResources', 'WEBCAM')+':'}"
					 id="webCamStatusText"
					 fontSize="20"
					 visible="true"/>
			<mx:Image id="webCamStatusIcon"/>
		</mx:HBox>
		<mx:HBox id="microphoneStatus"
				 verticalAlign="middle">
			<mx:Text text="{resourceManager.getString('myResources', 'MICROPHONE')+':'}"
					 id="microphoneStatusText"
					 fontSize="20"/>
			<mx:Image id="microphoneStatusIcon"/>
		</mx:HBox>

		<mx:HBox id="bandwidthStatus"
				 verticalAlign="middle">
			<mx:Text text="{resourceManager.getString('myResources', 'BANDWIDTH')+':'}"
					 id="bandwidthStatusText"
					 fontSize="20"/>
			<mx:Image id="bandwidthStatusIcon"/>
		</mx:HBox>
	</mx:Panel>
</mx:HBox>
