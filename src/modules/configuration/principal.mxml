<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300" 
	xmlns:mod1="modules.configuration.webcam.*"	
	xmlns:mod2="modules.configuration.microphone.*"
	xmlns:mod3="modules.configuration.bandwidth.*"
	creationComplete="init()">
	
	<mx:Script>
		<![CDATA[
		
		import flash.utils.Timer;
		
		import model.DataModel;
		
		import modules.configuration.ConfigurationResultEvent;
		import modules.configuration.ShowStatusMessage;
		
		import mx.events.IndexChangedEvent;
			
			//Result panelÂ´s Timers
			public var timerMic:Timer;
			public var timerCam:Timer;
			public var timerBW:Timer;
			
			private var permissionStatus:Boolean=false;
			
			private function init():void{ 
				configurationMenu.addEventListener(IndexChangedEvent.CHANGE,childChange);
				timerMic = new Timer(500,0);
				timerCam = new Timer(500,0);
				timerBW = new Timer(500,0);
				timerMic.addEventListener(TimerEvent.TIMER, onTimerMic);
				timerCam.addEventListener(TimerEvent.TIMER, onTimerCam);
				timerBW.addEventListener(TimerEvent.TIMER, onTimerBW);
				if (Camera.names.length>0){//El usuario dispone de webcam
					webCamCheck.addEventListener(ConfigurationResultEvent.WEBCAM_RESULT,webcamResult);
					webCamCheck.addEventListener(ConfigurationResultEvent.MICROPHONE_RESULT,microphoneResult);
					webCamCheck.addEventListener(ShowStatusMessage.MIC_MESSAGE,micStatusMessage);
					webCamCheck.allMenu.visible=true;
					webCamCheck.notConect.visible=false;
				}else{//El usuario no dispone de webcam
					refreshCamButton.visible=true;
					webCamCheck.allMenu.visible=false;
					webCamCheck.notConect.visible=true;
					webCamStatus.text="Webcam: X";
				}				
			}
			
			/*Gestion de los 3 submodulos*/
			private function childChange(e:IndexChangedEvent):void{
				var indice:Number = e.newIndex;		
				if (indice==1){ //Microphone module
					if (permissionStatus){
						micCheck.statusText.text=resourceManager.getString('myResources', 'CONFIGURATION_NO_PERMISSIONS');
						micCheck.statusText.visible=true;
					}
					if (Microphone.names.length>0){//El usuario dispone de microfono
					micCheck.addEventListener(ConfigurationResultEvent.MICROPHONE_RESULT,microphoneResult);
					micCheck.addEventListener(ConfigurationResultEvent.WEBCAM_RESULT,webcamResult);
					micCheck.addEventListener(ShowStatusMessage.CAM_MESSAGE,webCamStatusMessage);
					micCheck.allMenu.visible=true;
					micCheck.notConect.visible=false;
					}else{//El usuario no dispone de microfono
					refreshMicButton.visible=true;
					micCheck.allMenu.visible=false;
					micCheck.notConect.visible=true;
					microphoneStatus.text="Microphone: X";
					}
				}
				if (indice==2){ //Bandwidth module
					bandwidthCheck.addEventListener(ConfigurationResultEvent.BANDWIDTH_RESULT,
						bandwidthResult);
				}
			}
			
			/*Funciones para el control de los resultados*/
			public function webcamResult(e:ConfigurationResultEvent):void{				
				timerCam.start();	
				if(e.status)
					webCamStatus.text="Webcam: OK";
				else
					webCamStatus.text="Webcam: X";							
			}
			
			public function microphoneResult(e:ConfigurationResultEvent):void{
				timerMic.start();
				if(e.status)
					microphoneStatus.text= resourceManager.getString('myResources', 'MICROPHONE') +  ": OK";
				else
					microphoneStatus.text= resourceManager.getString('myResources', 'MICROPHONE') +   ": X";				
			}
			
			public function bandwidthResult(e:ConfigurationResultEvent):void{
				timerBW.start();
				if (e.status)
					bandwidthStatus.text= resourceManager.getString('myResources', 'BANDWIDTH') + ": OK";
				else
					bandwidthStatus.text= resourceManager.getString('myResources', 'BADNWIDTH')  +  ": X";					
			}
			
			/*Funciones timers para el control de los resultados*/
			public function onTimerMic(e:TimerEvent):void{
				if (timerMic.currentCount<8){//4 parpadeos
					microphoneStatus.visible=!microphoneStatus.visible;
				}else{//Configurar el estado inicial
					timerMic.reset();
					microphoneStatus.visible=true;
				}				
			}
			
			public function onTimerCam(e:TimerEvent):void{
				if (timerCam.currentCount<8){//4 parpadeos
					webCamStatus.visible=!webCamStatus.visible;
				}else{//Configurar el estado inicial
					timerCam.reset();
					webCamStatus.visible=true;
				}				
			}
			
			public function onTimerBW(e:TimerEvent):void{
				if (timerBW.currentCount<8){//4 parpadeos
					bandwidthStatus.visible=!bandwidthStatus.visible;
				}else{//Configurar el estado inicial
					timerBW.reset();
					bandwidthStatus.visible=true;
				}				
			}
			
			/*Funciones para el control de refresh*/
			private function refreshMic():void{
				if (Microphone.names.length>0){//El usuario ha conectado su microfono
					micCheck.addEventListener(ConfigurationResultEvent.MICROPHONE_RESULT,microphoneResult);
					micCheck.allMenu.visible=true;
					micCheck.notConect.visible=false;
					refreshMicButton.visible=false;
				}
			}
			
			private function refreshWebCam():void{
				if (Camera.names.length>0){//El usuario ha conectado su webcam
					webCamCheck.addEventListener(ConfigurationResultEvent.WEBCAM_RESULT,webcamResult);
					webCamCheck.allMenu.visible=true;
					webCamCheck.notConect.visible=false;
					refreshCamButton.visible=false;
				}
			}
			
			//Funciones para el control de los mensajes de falta de permisos
			private function webCamStatusMessage(ev:ShowStatusMessage):void{
				webCamCheck.statusText.text=resourceManager.getString('myResources', 'CONFIGURATION_NO_PERMISSIONS');;
				webCamCheck.statusText.visible=true;
			}
			
			private function micStatusMessage(ev:ShowStatusMessage):void{
				permissionStatus=true;
			}
			
		]]>
	</mx:Script>

	<mx:HBox width="100%" height="100%">
		<mx:TabNavigator id="configurationMenu" x="10" y="10" width="64%" height="95%" >			
			<mx:VBox label="WebCam Configuration">
				<mod1:webCamCheck id="webCamCheck"/>
				<mx:LinkButton id="refreshCamButton" visible="false" color="red" textDecoration="underline"
					label="{resourceManager.getString('myResources','CONNECTITANDCLICKHERETORELOADPAGE')}" click="refreshWebCam()"/>
			</mx:VBox>
			
			<mx:VBox label="Mic Configuration">
				<mod2:micCheck id="micCheck"/>
				<mx:LinkButton id="refreshMicButton" visible="false" color="red" textDecoration="underline"
					label="{resourceManager.getString('myResources','CONNECTITANDCLICKHERETORELOADPAGE')}" click="refreshMic()"/>
			</mx:VBox>
			
			<mx:VBox label="BandWidth Configuration">
				<mod3:connectionCheck id="bandwidthCheck"/>
			</mx:VBox>								
		</mx:TabNavigator>
		<mx:VBox>
			<mx:Text text="RESULTS" fontSize="30" fontWeight="bold" textDecoration="underline"/>
			<mx:Text text="Webcam: " id="webCamStatus" fontSize="20" visible="true"/>
			<mx:Text text= "{resourceManager.getString('myResources', 'MICROPHONE')} : " id="microphoneStatus" fontSize="20"/>
			<mx:Text text= "{resourceManager.getString('myResources', 'BANDWIDTH')} : " id="bandwidthStatus" fontSize="20"/>
		</mx:VBox>
	</mx:HBox>

</mx:Canvas>
