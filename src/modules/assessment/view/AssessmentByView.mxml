<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:view="modules.assessment.view.*"
		 paddingTop="16"
		 paddingBottom="16"
		 paddingLeft="16"
		 paddingRight="16"
		 implements="modules.IPinnedGroupInterface"
		 creationComplete="onComplete(event)">
	
	<fx:Script>
		<![CDATA[
			import control.URLManager;
			
			import mx.binding.utils.ChangeWatcher;
			
			import model.DataModel;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.DataGrid;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			import vo.EvaluationVO;

			private var dataModel:DataModel=DataModel.getInstance();
			private var assessedByCurrentUserList:ArrayCollection;
			
			private var commitOnly:Boolean=false;
			private var useWeakReference:Boolean=false;
			
			private var cw1:ChangeWatcher;
			
			public function onComplete(event:FlexEvent):void{
				
				cw1=BindingUtils.bindSetter(assessedByCurrentUserRetrievedHandler, dataModel, 'assessedByCurrentUserDataRetrieved', commitOnly, useWeakReference);
			}
			
			public function resetGroup():void
			{
				assessedByCurrentUserList=null;
			}
			
			public function unpinGroup():void{
				if(cw1) cw1.unwatch();
				cw1=null;
			}
			
			protected function assessedByCurrentUserRetrievedHandler(value:Boolean):void{
				assessedByCurrentUserList=dataModel.assessedByCurrentUserData;
				
				var length:int = assessedByCurrentUserList ? assessedByCurrentUserList.length : 0;
				if(!assessedByCurrentUserList){
					noresultNotice.includeInLayout=true;
					noresultNotice.visible=true;
					assessedByCurrentUserListAndPagination.visible=false;
					assessedByCurrentUserListAndPagination.includeInLayout=false;
				} else {
					noresultNotice.includeInLayout=false;
					noresultNotice.visible=false;
					assessedByCurrentUserListAndPagination.visible=true;
					assessedByCurrentUserListAndPagination.includeInLayout=true;
				}
				assessedByCurrentUserListAndPagination.dataProvider=assessedByCurrentUserList;
			}
			
			protected function assessedByCurrentUserChangeHandler(event:Event):void{
				var selectedItem:EvaluationVO=(DataGrid(event.target).selectedItem) as EvaluationVO;
				reviewAssessment(selectedItem.responseId);
			}
			
			protected function reviewAssessment(responseid:int):void{
				URLManager.getInstance().redirect('/assessments/view/' + responseid);
			}
			
		]]>
	</fx:Script>
	
	<s:Label id="assessedByUserListTitleLabel"
			 styleName="h2"
			 text="{ResourceManager.getInstance().getString('myResources', 'RESPONSES_ASSESSED_BY_USER_LIST')}"/>
	
	<s:BorderContainer id="noresultNotice"
					   width="100%"
					   styleName="lightBorderContainer"
					   includeInLayout="false" 
					   visible="false">
		<s:Label id="noresultLbl"
				 paddingLeft="8"
				 paddingTop="32"
				 paddingBottom="32"
				 paddingRight="8"
			 	 text="{ResourceManager.getInstance().getString('myResources','YOU_HAVENT_ASSESSED_ANY_RESPONSE_YET')+'.'}" />
	</s:BorderContainer>
	
	<view:CustomItemRendererPaginatedTable id="assessedByCurrentUserListAndPagination"
										   itemRenderer="{ListItemAssessedByCurrentUser}"
										   width="100%"
										   changeListener="{assessedByCurrentUserChangeHandler}"/>
	
</s:VGroup>
