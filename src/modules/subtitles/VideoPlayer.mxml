<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 width="100%"
		 height="100%"
		 xmlns:ns1="modules.exercises.*"
		 xmlns:ns2="view.*"
		 xmlns:ns3="view.VideoPlayer.*"
		 xmlns:ns4="modules.videoUpload.*"
		 xmlns:extenders="modules.extenders.*"
		 backgroundAlpha="0.0"
		 creationComplete="init()"
		 xmlns:local="*">
	<mx:Metadata>
		[ResourceBundle("myResources")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import events.SubtitlesAndRolesEvent;
			import events.SubtitlesEvent;
			
			import flash.utils.*;
			
			import model.DataModel;
			
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.SliderEvent;
			
			import view.*;
			
			import vo.CreditHistoryVO;
			import vo.ExerciseVO;
			import vo.SubtitleAndSubtitleLinesVO;
			import vo.SubtitlesAndRolesVO;

			[Embed(source='../../resources/images/playerPlayIcon.png')]
			[Bindable]
			private var playImageEmbed:Class;
			[Embed(source='../../resources/images/playerPauseIcon.png')]
			[Bindable]
			private var pauseImageEmbed:Class;


			[Bindable]
			[Embed(source="../../resources/images/flags/flag_united_kingdom.png")]
			public var FlagEnglish:Class;

			[Bindable]
			[Embed(source="../../resources/images/flags/flag_spain.png")]
			public var FlagSpanish:Class;

			[Bindable]
			[Embed(source="../../resources/images/flags/flag_france.png")]
			public var FlagFrench:Class;

			[Bindable]
			[Embed(source="../../resources/images/flags/flag_basque_country.png")]
			public var FlagBasque:Class;

			[Bindable]
			private var flaggedLanguageData:Array=new Array({label: 'English', icon: 'FlagEnglish'}, 
															{label: 'Spanish', icon: 'FlagSpanish'}, 
															{label: 'Basque', icon: 'FlagBasque'}, 
															{label: 'French', icon: 'FlagFrench'});


			public var vid:Video;
			private var nc:NetConnection;
			private var ns:NetStream;
			private var nsClient:Object=new Object();
			private var availableRoles:ArrayCollection;
			
			private var progressUpdateTimer:Timer=null;

			[Bindable] private var videoDuration:Number=0;
			[Bindable] private var videoHeight:int = 240;
			[Bindable] private var videoWidth:int = 320;
			
			private var playbackFinished:Boolean = false;
			private var playbackReady:Boolean = false;
			[Bindable] private var playbackStarted:Boolean = false;

			private var playButtonClicked:Boolean=false;

			private var volumeTransform:SoundTransform;

			private var exerciseFileName:String;
			private var exerciseId:int;
			private var exerciseLanguage:String;

			[Bindable]
			private var videoPlayerControlsViewStack:int=1;
			
			public function init():void
			{
				if (DataModel.getInstance().currentExercise != null)
				{
					var watchExercise:ExerciseVO=DataModel.getInstance().currentExercise;
					setBideoIzena(watchExercise.name, watchExercise.id);
					exerciseTitle.text=watchExercise.title;
				}
				else
				{
					setBideoIzena("kutsi9", 1);
				}
			}

			private function resolveIdToRole(item:Object, column:DataGridColumn):String
			{
				for each (var dp:Object in comboData)
				{
					if (dp.roleId == item.roleId)
						return dp.charName;
				}
				return "";
			}

			private function setup():void
			{
				nsClient.onMetaData=this.onMetaData;

				nc=new NetConnection();

				nc.connect("rtmp://" + DataModel.getInstance().server + "/oflaDemo");
				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, netSecurityError);
				nc.addEventListener(IOErrorEvent.IO_ERROR, netIOError);
			}

			public function asyncErrorHandler(event:AsyncErrorEvent):void
			{
			}

			public function netSecurityError(event:SecurityErrorEvent):void
			{
			}

			public function netIOError(event:IOErrorEvent):void
			{
			}

			private function volumeChangeHandler(event:SliderEvent):void
			{
				volumeTransform.volume=event.value;
				ns.soundTransform=volumeTransform;

			}

			public function playPauseClickHandler():void
			{
				playButtonClicked=!playButtonClicked;
				if (playButtonClicked)
				{
					playPauseButton.setStyle('icon', pauseImageEmbed);
					ns.resume();
				}
				else
				{
					playPauseButton.setStyle('icon', playImageEmbed);
					ns.pause();
				}
			}

			public function exerciseStopHandler():void
			{
				playbackFinished = false;
				ns.pause();
				ns.seek(0);
				playPauseButton.setStyle('icon', playImageEmbed);
				playButtonClicked=false;
				doHideCuePoint(new SubtitlesAndRolesVO());
			}

			public function setBideoIzena(exerciseFileName:String, exerciseId:int):void
			{
				this.exerciseFileName=exerciseFileName;
				this.exerciseId=exerciseId;
				setup();
			}

			private function set onExerciseSelected(value:Boolean):void
			{
				if (DataModel.getInstance().currentExerciseRetrieved == true)
				{
					DataModel.getInstance().currentExerciseRetrieved=false;
					var watchExercise:ExerciseVO=DataModel.getInstance().currentExercise;
					exerciseTitle.text=watchExercise.title;
					exerciseFileName=watchExercise.name;
					exerciseId=watchExercise.id;
					exerciseLanguage=watchExercise.language;

					//When requested to watch this exercise we also asked to grab the subtitles it may have.
					//In case it has subtitles, we populate our subtitleCollection with them.
					if (DataModel.getInstance().availableSubtitlesAndRoles != null)
					{
						subtitleCollection=DataModel.getInstance().availableSubtitlesAndRoles;
					}

					if (ns == null)
						setup();
					else
					{
						progressUpdateTimer.stop();
						vid.removeEventListener(Event.ENTER_FRAME, monitorCuePoints);
						ns.close();
						ns = new NetStream(nc);
						ns.play(exerciseFileName);
						ns.client=nsClient;
						ns.addEventListener(NetStatusEvent.NET_STATUS, checkVideoStatus);

						vid=new Video();
						vid.attachNetStream(ns);
						vid.addEventListener(Event.ENTER_FRAME, monitorCuePoints);
						uic.removeChildAt(0);
						uic.addChild(vid);

						ns.soundTransform=volumeTransform;
						progressUpdateTimer.start();
					}
				}
			}

			private function netStatusHandler(event:NetStatusEvent):void
			{
				ns=new NetStream(nc);
				ns.play(exerciseFileName);
				ns.client=nsClient;
				ns.addEventListener(NetStatusEvent.NET_STATUS, checkVideoStatus);

				vid=new Video();
				vid.attachNetStream(ns);
				vid.addEventListener(Event.ENTER_FRAME, monitorCuePoints);
				uic.addChild(vid);

				//Initialize the volume control components
				volumeTransform = new SoundTransform();
				volumeSlider.value=volumeTransform.volume;
				volumeSlider.minimum=0;
				volumeSlider.maximum=1;
				volumeSlider.snapInterval=0.1;
				volumeSlider.tickInterval=volumeSlider.snapInterval;
				volumeSlider.liveDragging=true;
				volumeSlider.addEventListener(SliderEvent.CHANGE, volumeChangeHandler);

				//At first set the volume to 0 so that nothing is heard during seek
				volumeTransform.volume=0
				ns.soundTransform=volumeTransform;

				//Instantiate a timer object to update the video player's progress bar every 1/4 second
				progressUpdateTimer=new Timer(250, 0);
				progressUpdateTimer.addEventListener(TimerEvent.TIMER, onExerciseProgressUpdate);
				progressUpdateTimer.start();

			}

			private function checkVideoStatus(event:NetStatusEvent):void
			{
				switch (event.info.code)
				{
					//Data is not being received quickly enough to fill the buffer.
					//Data flow will be interrupted until the buffer refills, at which time 
					//a NetStream.Buffer.Full message will be sent and the stream will begin playing again
					case "NetStream.Buffer.Empty":
						if(playbackFinished){
							playbackStarted = false;
							exerciseStopHandler();
						}
						break;

					//The buffer is full and the stream will begin playing.
					case "NetStream.Buffer.Full":
						if(playbackReady){
							playbackStarted = true;
						}
							
						break;

					//Data has stopped streaming, and the remaining buffer will be emptied.
					case "NetStream.Buffer.Flush":
						break;

					//Playback has stopped.
					case "NetStream.Play.Stop":
						playbackFinished = true;
						break;

					//Playback has started.	
					case "NetStream.Play.Start":
						playbackReady = true;
						break;

					//An error has occurred in playback for a reason other than those listed elsewhere 
					//in this table, such as the subscriber not having read access.
					case "NetStream.Play.Failed":
						break;

					//The FLV passed to the play() method can't be found.	
					case "NetStream.Play.StreamNotFound":
						break;

					case "NetStream.Pause.Notify":
						playbackStarted = false;
						break;
				}
			}

			private function initializeVideoPlayerComponents():void
			{
				vid.height=videoHeight;
				vid.width=videoWidth;

				// Resize UIComponent to same size as Video object.
				uic.width=vid.width;
				uic.height=vid.height;

				exerciseLoadProgressBar.visible=true;

				exerciseLoadProgressBar.minimum=0;
				exerciseLoadProgressBar.maximum=videoDuration;
			}

			private function onMetaData(obj:Object):void
			{
				videoDuration=obj.duration;
				videoHeight=obj.height;
				videoWidth=obj.width;

				initializeVideoPlayerComponents();

				exerciseStopHandler();

				volumeTransform.volume=1;
				ns.soundTransform=volumeTransform;
			}

			private function onExerciseProgressUpdate(event:TimerEvent):void
			{
				var currentTime:int=ns.time;
				var percentageLoaded:int;

				//Update the position of the ProgressBar
				exerciseLoadProgressBar.setProgress(currentTime, videoDuration);
				percentageLoaded=(100 * currentTime) / videoDuration;

				var totalBytes:Number=ns.bytesTotal;
				var bytesLoaded:Number=ns.bytesLoaded;
				percentageLoaded=(bytesLoaded * 100) / totalBytes;
				var fTime:TimeFormatter=new TimeFormatter();
				fTime.outputMilliseconds=false;
				exerciseLoadProgressBar.label=fTime.format(currentTime) + "/" + fTime.format(videoDuration);
			}


			//
			// SUBTITLE ADDITION ALPHA EDITION
			// ALSO MUST CHECK WHETHER IT'S POSSIBLE TO USE NON-ENBEDDED CUEPOINTS IN EXERCISE MODULE
			//

			[Bindable]
			private var isVideoPlaying:Boolean=false;

			[Bindable]
			private var subtitleStartTime:Number=0;
			[Bindable]
			private var subtitleEndTime:Number=0;
			[Bindable]
			private var subtitleLength:Number=0;
			[Bindable]
			private var subtitleCollection:ArrayCollection=new ArrayCollection();
			private var startEntry:SubtitlesAndRolesVO;
			private var endEntry:SubtitlesAndRolesVO;
			private var detailEntry:SubtitlesAndRolesVO;

			private var preUpdateFinished:Boolean=true;

			[Bindable]
			private var outlinedSubtitle:TextOutlines=new TextOutlines(320, 50, 1.8);

			[Bindable]
			private var subtitleStarted:Boolean=false;
			
			private var subtitleEditorVisible:Boolean=false;


			public function set onSubtitlesAndRolesRetrieved(value:Boolean):void
			{
				if (DataModel.getInstance().availableSubtitlesAndRolesRetrieved)
				{
					DataModel.getInstance().availableSubtitlesAndRolesRetrieved=false;
					subtitleCollection=DataModel.getInstance().availableSubtitlesAndRoles;
					subtitleList.dataProvider=subtitleCollection;
				}
			}

			private function subtitleStartHandler():void
			{
				subtitleStarted=true;
				subtitleStartTime=ns.time;
				startEntry=new SubtitlesAndRolesVO();
				startEntry.id=subtitleCollection.length + 1;
				startEntry.showTime=subtitleStartTime;
				startEntry.hideTime=subtitleStartTime + 0.5;
				startEntry.role="";
				startEntry.text="";
				startEntry.subtitleId=0;
				subtitleCollection.addItem(startEntry);

				var showTimeSort:SortField=new SortField();
				showTimeSort.name="showTime";
				showTimeSort.numeric=true;
				var numericDataSort:Sort=new Sort();
				numericDataSort.fields=[showTimeSort];
				subtitleCollection.sort=numericDataSort;
				subtitleCollection.refresh();

				insertDataGridRow();
			}

			private function subtitleEndHandler():void
			{
				subtitleStarted=false;
				if (subtitleCollection.length > 0)
				{
					subtitleEndTime=ns.time;
					endEntry=new SubtitlesAndRolesVO();
					endEntry.id=subtitleCollection.length;
					endEntry.showTime=subtitleStartTime;
					endEntry.hideTime=subtitleEndTime;
					endEntry.role="";
					endEntry.text="";
					endEntry.subtitleId=0;

					subtitleCollection.setItemAt(endEntry, subtitleCollection.getItemIndex(startEntry));
					insertDataGridRow();
				}
			}

			private function subtitleInsertHandler():void
			{

			}

			private function subtitleRemoveHandler():void
			{
				if (subtitleList.selectedIndex != -1)
				{

					var previouslySelectedIndex:Number=subtitleList.selectedIndex;
					var indexToBeSelected:Number;
					if (previouslySelectedIndex == subtitleList.rowCount)
					{
						indexToBeSelected=previouslySelectedIndex - 1;
					}
					else if (previouslySelectedIndex == 0 && subtitleList.rowCount == 1)
					{
						//nothing
					}
					else
					{
						indexToBeSelected=previouslySelectedIndex;
					}
					subtitleCollection.removeItemAt(subtitleList.selectedIndex);
					insertDataGridRow();
					subtitleList.selectedIndex=indexToBeSelected;

				}
			}

			private function subtitleClearHandler():void
			{
				Alert.show(resourceManager.getString('myResources','WARNING_CLEAR_SUBTITLE_LINES'), 
						   resourceManager.getString('myResources','TITLE_CONFIRM_ACTION'), 
						   Alert.YES | Alert.NO, null, subtitleClearConfirmation, null, Alert.NO);
			}

			private function subtitleClearConfirmation(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
					subtitleCollection.removeAll();
			}

			private function subtitleNextHandler():void
			{
				var currentlySelectedIndex:Number=subtitleList.selectedIndex;
				if (currentlySelectedIndex != -1 && currentlySelectedIndex < subtitleList.rowCount)
				{
					subtitleList.selectedIndex=currentlySelectedIndex + 1;
				}
			}

			private function subtitlePreviousHandler():void
			{
				var currentlySelectedIndex:Number=subtitleList.selectedIndex;
				if (currentlySelectedIndex != -1 && currentlySelectedIndex > 0)
				{
					subtitleList.selectedIndex=currentlySelectedIndex - 1;
				}
			}

			private function insertDataGridRow():void
			{
				subtitleList.dataProvider=subtitleCollection;
			}

			private function goToTimeHandler():void
			{
				if (subtitleList.selectedIndex != -1)
				{
					var tempEntry:SubtitlesAndRolesVO=subtitleCollection.getItemAt(subtitleList.selectedIndex) as SubtitlesAndRolesVO;
					//ns.pause();
					ns.seek(tempEntry.showTime);
						//ns.resume();
				}
			}

			private function monitorCuePoints(e:Event):void
			{
				var curTime:Number=ns.time;
				for each (var ob1:SubtitlesAndRolesVO in subtitleCollection)
				{
					if ((curTime - 0.08) < ob1.showTime && ob1.showTime < (curTime + 0.08))
					{
						doShowCuePoint(ob1);
						break;
					}
				}
				for each (var ob2:SubtitlesAndRolesVO in subtitleCollection)
				{
					if ((curTime - 0.08) < ob2.hideTime && ob2.hideTime < (curTime + 0.08))
					{
						doHideCuePoint(ob2);
						break;
					}
				}
			}

			private function doShowCuePoint(obj:SubtitlesAndRolesVO):void
			{
				outlinedSubtitle.setText(obj.text);
				subHolder.text=obj.text;
			}

			private function doHideCuePoint(obj:SubtitlesAndRolesVO):void
			{
				outlinedSubtitle.setText("");
				subHolder.text="";
			}

			private function viewSubtitlingControls(event:MouseEvent):void
			{
				if(!subtitleEditorVisible){
					videoPlayerControlsViewStack=0;
					subtitlingControls.minHeight=24;
					subtitlingControls.height=24;
					subtitlingControls.visible=true;
					videoControls.height=subtitlingControls.minHeight;
					subtitleEditorVisible = !subtitleEditorVisible;
				} else {
					videoPlayerControlsViewStack=1;
					subtitlingControls.visible=false;
					videoControls.height=0;
					subtitleEditorVisible = !subtitleEditorVisible;
				}
			}
			
			private function hideSubtitlingControls(event:MouseEvent):void{
				videoPlayerControlsViewStack=1;
				subtitlingControls.visible=false;
				videoControls.height=0;
				subtitleEditorVisible = false;
			}

			private function saveSubtitlesHandler():void
			{
				if (subtitleCollection.length > 0)
				{
					var errors:String=checkSubtitleErrors();
					if (errors.length == 0)
					{
						for each (var s:SubtitlesAndRolesVO in subtitleCollection)
						{
							for each (var dp:Object in comboData)
							{
								if (dp.roleId == s.roleId)
								{
									s.singleName=dp.charName;
									s.role=dp.charName;
								}
							}
						}
						var subtitleLines:Array=subtitleCollection.toArray();
						var subtitles:SubtitleAndSubtitleLinesVO=new SubtitleAndSubtitleLinesVO();
						subtitles.exerciseId=exerciseId;
						subtitles.userId=DataModel.getInstance().loggedUser.id;
						subtitles.language=languageComboBox.selectedLabel;
						subtitles.subtitleLines=subtitleLines;
						if (DataModel.getInstance().availableSubtitlesAndRoles.length == 0)
							subtitles.id=0;
						else
							subtitles.id=DataModel.getInstance().availableSubtitlesAndRoles.getItemAt(0).subtitleId;

						var subHistoricData:CreditHistoryVO=new CreditHistoryVO();
						subHistoricData.videoExerciseId=exerciseId;
						subHistoricData.videoExerciseName=exerciseFileName;
						DataModel.getInstance().subHistoricData=subHistoricData;

						new SubtitlesEvent(SubtitlesEvent.SAVE_SUBTITLES, subtitles).dispatch();
					}
					else
					{
						Alert.show(errors,resourceManager.getString('myResources','WARNING_SUBTITLE_HAS_ERRORS'));
					}
				}
				else
				{
					Alert.show(resourceManager.getString('myResources','WARNING_EMPTY_SUBTITLE'),
							   resourceManager.getString('myResources','TITLE_INFORMATION_MESSAGE'));
				}

			}

			private function checkSubtitleErrors():String
			{
				var errorMessage:String="";
				//Check empty roles, time overlappings and empty texts
				for (var i:int=0; i < subtitleCollection.length; i++)
				{
					if (subtitleCollection.getItemAt(i).roleId < 1)
						errorMessage+="The role on the line " + (i + 1) + " is empty.\n";
					var lineText:String=subtitleCollection.getItemAt(i).text;
					lineText=lineText.replace(/[ ,\;.\:\-_?¿¡!€$']*/, "");
					if (lineText.length < 1)
						errorMessage+="The text on the line " + (i + 1) + " is empty.\n";
					if (i > 0)
					{
						if (subtitleCollection.getItemAt((i-1)).hideTime >= subtitleCollection.getItemAt(i).showTime)
							errorMessage+="The subtitle on the line " + i + " overlaps with the next subtitle.\n";
					}
				}
				return errorMessage;
			}

			private function set onSubtitleSaved(value:Boolean):void
			{
				if (DataModel.getInstance().subtitleSaved)
				{
					DataModel.getInstance().subtitleSaved=false;
					var sarvo:SubtitlesAndRolesVO=new SubtitlesAndRolesVO();
					sarvo.exerciseId=exerciseId;
					sarvo.language=languageComboBox.selectedLabel;
					new SubtitlesAndRolesEvent(SubtitlesAndRolesEvent.GET_ROLES, sarvo).dispatch();
					new SubtitlesAndRolesEvent(SubtitlesAndRolesEvent.GET_INFO_SUB_ROLES, sarvo).dispatch();
				}

			}

			private function set availableRolesRetrieved(value:Boolean):void
			{

				if (DataModel.getInstance().availableExerciseRoles)
				{
					var avrol:ArrayCollection=DataModel.getInstance().availableExerciseRoles;
					var cData:ArrayCollection=new ArrayCollection;
					var insertLine:Object={roleId: 0, charName: resourceManager.getString('myResources','OPTION_INSERT_NEW_ROLE'), action: 'insert', fontWeight: 'bold', indent: 0};
					cData.addItem(insertLine);
					if (avrol.length > 0)
					{
						for each (var item:Object in avrol)
						{
							var comboline:Object={roleId: item.data, charName: item.label, action: 'select', fontWeight: 'normal', indent: 10};
							cData.addItem(comboline);
						}
						var deleteLine:Object={roleId: 0, charName: resourceManager.getString('myResources','OPTION_DELETE_A_ROLE'), action: 'nothing', fontWeight: 'bold', indent: 0};
						cData.addItem(deleteLine);
						for each (var item2:Object in avrol)
						{
							var comboline2:Object={roleId: item2.data, charName: item2.label, action: 'delete', fontWeight: 'normal', indent: 10};
							cData.addItem(comboline2);
						}
						comboData.removeAll();
						comboData=cData;
					}
					else
					{
						var deleteLineEmpty:Object={roleId: 0, charName: resourceManager.getString('myResources','OPTION_DELETE_A_ROLE'), action: 'nothing', fontWeight: 'bold', indent: 0};
						cData.addItem(deleteLineEmpty);
						comboData.removeAll();
						comboData=cData;
					}
				}
			}

			private function lfRowNum(oItem:Object, iCol:int):String
			{
				var iIndex:int=subtitleCollection.getItemIndex(oItem) + 1;
				return String(iIndex);
			}
			
			private function set onTabChange(value:Boolean):void{
				exerciseStopHandler();
				ns.close();
				hideSubtitlingControls(null);
			}
			
			private function set onLogout(value:Boolean):void{
				if(DataModel.getInstance().isLoggedIn == false){
					onTabChange = false;
				}
			}
		]]>

	</mx:Script>

	<mx:ArrayCollection id="comboData"/>

	<mx:Binding source="DataModel.getInstance().availableExerciseRoles"
				destination="availableRolesRetrieved"/>
	<mx:Binding source="{DataModel.getInstance().currentExerciseRetrieved}"
				destination="this.onExerciseSelected"/>
	<mx:Binding source="{DataModel.getInstance().availableSubtitlesAndRolesRetrieved}"
				destination="this.onSubtitlesAndRolesRetrieved"/>
	<mx:Binding source="{DataModel.getInstance().subtitleSaved}"
				destination="this.onSubtitleSaved"/>
	
	<mx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="this.onTabChange"/>
	
	<mx:Binding source="{DataModel.getInstance().isLoggedIn}"
				destination="this.onLogout"/>

	<mx:Panel id="panel"
			  title="Video Player"
			  visible="true"
			  horizontalAlign="center"
			  verticalAlign="top"
			  verticalGap="0"
			  paddingLeft="4"
			  paddingRight="4"
			  paddingTop="4"
			  paddingBottom="4"
			  fontFamily="Arial"
			  fontSize="12"
			  headerHeight="0"
			  borderThicknessBottom="0"
			  borderThicknessTop="0"
			  borderThicknessLeft="0"
			  borderThicknessRight="0"
			  height="100%"
			  backgroundAlpha="0.0"
			  borderStyle="none"
			  cornerRadius="0">
		<mx:Label id="exerciseTitle"
				  text="ExerciseTitle"
				  width="100%"
				  fontSize="16"
				  fontWeight="bold"/>

		<mx:Canvas backgroundColor="#000000"
				   borderStyle="solid"
				   borderColor="#929292"
				   verticalScrollPolicy="off"
				   horizontalScrollPolicy="off"
				   height="{videoHeight}"
				   width="{videoControlBar.width}">
			<mx:UIComponent id="uic"
							y="0"
							x="{(videoControlBar.width-videoWidth)/2}"/>
			<mx:Text id="subHolder"
					 width="{videoControlBar.width}"
					 height="30"
					 x="{(videoControlBar.width-videoWidth)/2}"
					 y="190"
					 color="#FFFFFF"
					 fontFamily="Arial"
					 fontSize="14"
					 fontWeight="bold"
					 textAlign="center"/>
		</mx:Canvas>
		<mx:HBox verticalAlign="middle"
				 horizontalAlign="left"
				 width="{videoHeight*(16/9)}"
				 borderStyle="solid"
				 borderColor="#929292"
				 backgroundColor="#DCD9D9"
				 backgroundAlpha="1.0"
				 id="videoControlBar"
				 horizontalScrollPolicy="off"
				 horizontalGap="2">
			<mx:HBox id="botoiak"
					 borderStyle="none"
					 cornerRadius="0"
					 paddingLeft="4"
					 paddingRight="4"
					 height="100%"
					 horizontalAlign="center"
					 verticalAlign="middle"
					 horizontalGap="4">
				<mx:Button id="playPauseButton"
						   click="playPauseClickHandler()"
						   cornerRadius="4"
						   labelPlacement="bottom"
						   width="20"
						   height="20">
					<mx:icon>@Embed(source='../../resources/images/playerPlayIcon.png')</mx:icon>
				</mx:Button>
				<mx:Button id="stopButton"
						   click="exerciseStopHandler()"
						   width="20"
						   height="20">
					<mx:icon>@Embed(source='../../resources/images/playerStopIcon.png')</mx:icon>
				</mx:Button>


			</mx:HBox>
			<mx:VBox>

				<mx:ProgressBar id="exerciseLoadProgressBar"
								mode="manual"
								label="00:00/00:00"
								labelWidth="75"
								trackHeight="15"
								labelPlacement="right"
								fontSize="10"
								fontWeight="normal"
								paddingLeft="0"
								paddingRight="0"/>
			</mx:VBox>



			<mx:HBox id="bolumen_kaxa"
					 borderStyle="solid"
					 cornerRadius="0"
					 width="93"
					 height="100%"
					 horizontalAlign="center"
					 verticalAlign="middle">
				<mx:Image source="resources/images/bol.png"
						  width="19"
						  height="19"/>
				<mx:HSlider id="volumeSlider"
							width="35"/>
			</mx:HBox>

		</mx:HBox>
		<mx:ViewStack id="videoControls"
					  width="100%">
			<mx:HBox id="subtitlingControls"
					 width="100%"
					 paddingTop="2"
					 paddingBottom="2"
					 paddingLeft="2"
					 paddingRight="2"
					 horizontalAlign="left"
					 verticalAlign="middle"
					 backgroundColor="#DCD9D9"
					 borderStyle="solid"
					 horizontalGap="4"
					 height="0">
				<mx:Label text="{resourceManager.getString('myResources','MESSAGE_SUBTITLING_CONTROLS')}"
						  color="#000000"
						  fontWeight="bold"/>
				<mx:Button click="subtitleStartHandler()"
						   width="20"
						   height="20"
						   toolTip="{resourceManager.getString('myResources','TOOLTIP_START_SUBTITLE_LINE')}">
					<mx:icon>@Embed(source='../../resources/images/subStartButtonIcon.png')</mx:icon>
				</mx:Button>
				<mx:Button click="subtitleEndHandler()"
						   width="20"
						   height="20"
						   enabled="{subtitleStarted}"
						   toolTip="{resourceManager.getString('myResources','TOOLTIP_END_SUBTITLE_LINE')}">
					<mx:icon>@Embed(source='../../resources/images/subEndButtonIcon.png')</mx:icon>
				</mx:Button>
				<mx:VRule height="20"/>
				<mx:Button width="20"
						   height="20"
						   click="subtitlePreviousHandler()"
						   toolTip="{resourceManager.getString('myResources','TOOLTIP_PREVIOUS_SUBTITLE_LINE')}">
					<mx:icon>@Embed(source='../../resources/images/prevSubButtonIcon.png')</mx:icon>
				</mx:Button>
				<mx:Button width="20"
						   height="20"
						   click="subtitleNextHandler()"
						   toolTip="{resourceManager.getString('myResources','TOOLTIP_NEXT_SUBTITLE_LINE')}">
					<mx:icon>@Embed(source='../../resources/images/nextSubButtonIcon.png')</mx:icon>
				</mx:Button>
				<mx:VRule height="20"/>
			</mx:HBox>

		</mx:ViewStack>
		<mx:HBox id="exerciseOptions"
				 width="100%"
				 horizontalAlign="center"
				 verticalAlign="middle"
				 paddingTop="4"
				 paddingBottom="4">
			<!--
			<mx:Button label="{resourceManager.getString('myResources','OPTION_RECORD_RESPONSE')}"
					   fontWeight="normal"
					   labelPlacement="bottom"
					   width="80"
					   height="80"
					   enabled="false"
					   toolTip="{resourceManager.getString('myResources','TOOLTIP_RECORD_RESPONSE')}">
				<mx:icon>@Embed(source='../../resources/images/addRecording.png')</mx:icon>
			</mx:Button>
			-->
			<mx:Button id="subtitleExerciseButton"
					   label="{resourceManager.getString('myResources','OPTION_ADD_SUBTITLES_TO_EXERCISE')}"
					   fontWeight="normal"
					   labelPlacement="bottom"
					   click="viewSubtitlingControls(event)"
					   width="80"
					   height="80"
					   enabled="{DataModel.getInstance().isLoggedIn}"
					   toolTip="{resourceManager.getString('myResources','TOOLTIP_ADD_SUBTITLES_TO_EXERCISE')}">
				<mx:icon>@Embed(source='../../resources/images/addSubtitles.png')</mx:icon>
			</mx:Button>
			<!--
			<mx:Button label="{resourceManager.getString('myResources','OPTION_ADD_ROLES_TO_EXERCISE')}"
					   fontWeight="normal"
					   width="80"
					   height="80"
					   labelPlacement="bottom"
					   enabled="false"
					   toolTip="{resourceManager.getString('myResources','TOOLTIP_ADD_ROLES_TO_EXERCISE')}">
				<mx:icon>@Embed(source='../../resources/images/addRolesSmall.png')</mx:icon>
			</mx:Button>
			-->
		</mx:HBox>
	</mx:Panel>
	<mx:ViewStack height="100%"
				  width="100%"
				  selectedIndex="{this.videoPlayerControlsViewStack}">

		<mx:Panel width="100%"
				  height="100%"
				  layout="vertical"
				  title="{resourceManager.getString('myResources','TITLE_SUBTITLE_EDITOR')}"
				  fontFamily="Arial"
				  fontSize="12"
				  horizontalAlign="center"
				  verticalAlign="middle"
				  visible="{DataModel.getInstance().isLoggedIn}">
			<mx:HBox horizontalAlign="center"
					 verticalAlign="middle"
					 width="100%">
				<mx:Label text="{resourceManager.getString('myResources','MESSAGE_CHOOSE_SUBTITLE_LANGUAGE')}"/>
				<ns4:IconComboBox id="languageComboBox"
								  dataProvider="{flaggedLanguageData}"
								  fontWeight="normal"/>
			</mx:HBox>

			<mx:DataGrid id="subtitleList"
						 sortableColumns="false"
						 width="100%"
						 height="70%"
						 doubleClick="goToTimeHandler()"
						 doubleClickEnabled="true"
						 editable="true"
						 dataProvider="{this.subtitleCollection}">
				<mx:columns>
					<mx:DataGridColumn headerText="{resourceManager.getString('myResources','COLUMNHEAD_NUMBER')}"
									   editable="false"
									   labelFunction="{lfRowNum}"
									   width="60"/>
					<mx:DataGridColumn headerText="{resourceManager.getString('myResources','COLUMNHEAD_SHOW')}"
									   editable="true"
									   editorDataField="value"
									   width="85"
									   rendererIsEditor="true"
									   itemRenderer="modules.subtitles.ShowNumericStepperRenderer">
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="{resourceManager.getString('myResources','COLUMNHEAD_HIDE')}"
									   width="85"
									   editable="true"
									   editorDataField="value"
									   rendererIsEditor="true"
									   itemRenderer="modules.subtitles.HideNumericStepperRenderer"/>
					<mx:DataGridColumn headerText="{resourceManager.getString('myResources','COLUMNHEAD_TEXT')}"
									   dataField="text">
						<mx:itemEditor>
							<mx:Component>
								<mx:TextInput maxChars="80"/>
							</mx:Component>
						</mx:itemEditor>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="comboColumn"
									   width="200"
									   dataField="roleId"
									   headerText="{resourceManager.getString('myResources','COLUMNHEAD_ROLE')}"
									   rendererIsEditor="true"
									   labelFunction="{resolveIdToRole}"
									   editorDataField="selectedItemKey">
						<mx:itemRenderer>
							<mx:Component>
								<extenders:GridComboBox dataProvider="{outerDocument.comboData}"
														labelField="charName"
														lookupField="roleId"
														prompt="Select a role..."/>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
			<mx:VBox width="100%"
					 height="30%"
					 id="subtitleDetailHolder"
					 horizontalAlign="center"
					 verticalAlign="middle">
				<mx:HBox width="100%"
						 id="subtitleDetailTimesHolder"
						 horizontalAlign="center"
						 verticalAlign="middle"
						 paddingBottom="4"
						 paddingTop="4">
					<mx:HBox height="100%"
							 verticalAlign="middle"
							 horizontalAlign="center"
							 paddingLeft="4"
							 paddingRight="4"
							 borderStyle="solid"
							 cornerRadius="8"
							 backgroundColor="#DDDDDD">
						<mx:Button label="{resourceManager.getString('myResources','OPTION_ADD_SUBTITLE_LINE')}"
								   paddingLeft="6"
								   paddingRight="6"
								   cornerRadius="8"
								   enabled="{playbackStarted}"
								   icon="@Embed(source='../../resources/images/add.png')"
								   click="subtitleStartHandler()"
								   id="addSubtitleLine"/>
						<mx:Button label="{resourceManager.getString('myResources','OPTION_REMOVE_SUBTITLE_LINE')}"
								   paddingLeft="6"
								   paddingRight="6"
								   cornerRadius="8"
								   enabled="{subtitleCollection.length > 0}"
								   click="subtitleRemoveHandler()">
							<mx:icon>@Embed(source='../../resources/images/delete.png')</mx:icon>
						</mx:Button>
						<mx:Button label="{resourceManager.getString('myResources','OPTION_CLEAR_SUBTITLE_LINES')}"
								   paddingLeft="6"
								   paddingRight="6"
								   cornerRadius="8"
								   enabled="{subtitleCollection.length > 0}"
								   click="subtitleClearHandler()">
							<mx:icon>@Embed(source='../../resources/images/cancel.png')</mx:icon>
						</mx:Button>
						<mx:VRule height="30"/>
						<mx:Button label="{resourceManager.getString('myResources','OPTION_SAVE_SUBTITLE_LINES')}"
								   paddingLeft="6"
								   paddingRight="6"
								   cornerRadius="8"
								   icon="@Embed(source='../../resources/images/save.png')"
								   click="saveSubtitlesHandler()"/>
					</mx:HBox>
				</mx:HBox>

			</mx:VBox>
		</mx:Panel>
		<mx:HBox width="100%"
				 height="100%">

		</mx:HBox>
	</mx:ViewStack>
</mx:HBox>
