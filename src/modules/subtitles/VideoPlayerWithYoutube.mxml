<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 width="100%"
		 height="100%"
		 xmlns:ns1="modules.exercises.*"
		 xmlns:ns2="view.*"
		 xmlns:ns3="view.VideoPlayer.*"
		 xmlns:ns4="modules.videoUpload.*"
		 backgroundAlpha="0.0"
		 creationComplete="init()">

	<mx:Script>
		<![CDATA[
			import commands.main.WatchExerciseCommand;
			import flash.sampler.getInvocationCount;
			import events.SubtitleEvent;
			import vo.SubtitleVO;
			import mx.utils.ObjectUtil;
			import vo.ExerciseVO;

			import events.SubtitlesAndRolesEvent;
			import vo.SubtitlesAndRolesVO;

			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			import mx.rpc.events.FaultEvent;

			import mx.events.VideoEvent;

			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.formatters.DateFormatter;
			import vo.SubtitleLineVO;
			import mx.controls.VideoDisplay;
			import mx.controls.Alert;
			import events.ViewChangeEvent;
			import model.DataModel;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.events.ResizeEvent;
			import mx.controls.Label;
			import mx.events.SliderEvent;
			import mx.controls.sliderClasses.Slider;
			import mx.collections.ArrayCollection;
			import flash.utils.*;
			import mx.collections.*
			import view.*;



			[Embed(source='../../resources/images/playerPlayIcon.png')]
			[Bindable]
			private var playImageEmbed:Class;
			[Embed(source='../../resources/images/playerPauseIcon.png')]
			[Bindable]
			private var pauseImageEmbed:Class;


			[Bindable]
			[Embed(source="../../resources/images/flags/flag_united_kingdom.png")]
			public var FlagEnglish:Class;

			[Bindable]
			[Embed(source="../../resources/images/flags/flag_spain.png")]
			public var FlagSpanish:Class;

			[Bindable]
			[Embed(source="../../resources/images/flags/flag_france.png")]
			public var FlagFrench:Class;

			[Bindable]
			[Embed(source="../../resources/images/flags/flag_basque_country.png")]
			public var FlagBasque:Class;

			[Bindable]
			private var flaggedLanguageData:Array=new Array({label: 'English', icon: 'FlagEnglish'}, {label: 'Spanish', icon: 'FlagSpanish'}, {label: 'Basque', icon: 'FlagBasque'}, {label: 'French', icon: 'FlagFrench'});



			public var vid:Video;
			private var nc:NetConnection;
			private var ns:NetStream;
			private var nsClient:Object=new Object();
			private var availableRoles:ArrayCollection;
			private var rolzerr:Array;
			private var iraupena:Number=0;
			private var timer:Timer=null;
			private var hizlaria_hitzegiten:Boolean=new Boolean;
			private var rol_bukaera:Number=new Number;
			private var rol_tartea:Number=new Number;
			private var rol_hasera:Number=new Number;

			//private var bideo_zabalera:Number=new Number;
			//private var bideo_altuera:Number=new Number;

			private var reportedVideoHeight:int;
			private var reportedVideoWidth:int;

			private var playButtonClicked:Boolean=false;

			private var cuekont:Number=new Number;
			private var badago_taulan:Boolean;
			//private var camera:Camera=Camera.getCamera();
			//private var rvideo:Video;

			private var volumeTransform:SoundTransform;
			private var micvolumeTransform:SoundTransform=new SoundTransform;

			private var hasera_da:Boolean=new Boolean;
			private var in_ns:NetStream;
			private var aukeratua:Boolean=new Boolean;

			private var audioDir:String;
			private var red5Host:String;
			private var red5Port:String;

			//private var rec_so:SharedObject;

			private var egoera:String;
			private var egoera2:String;
			private var rol_aukeratua:String;

			public var childTaula:ArrayCollection=new ArrayCollection();

			private var bideoIzena:String=new String;
			private var bideoId:int=new int;
			private var prest:Boolean=new Boolean;
			public var kamera_ukatua:Boolean=false;

			[Bindable]
			public var cuetaula:ArrayCollection;
			public var cuetimetaula:ArrayCollection;

			// Make it Bindable so it can be used in bind 
			// expressions ({colorAC}). */
			[Bindable]
			public var rolTaula:ArrayCollection;


			//true if you press sub button ; false if you press roles
			[Bindable]
			private var subMode:Boolean=true;
			[Bindable]
			public var infoDatagrid:ArrayCollection;

			//--------------------------------------------
			//VARIABLES RELATED WITH YOUTUBE VIDEO PLAYING
			//Under heavy testing!!! remove if troublesome
			import flash.utils.getTimer;

			import pinosh.youtube.YoutubeEvent; // Event type for youtube
			import pinosh.youtube.IYoutube; // The youtube player implemets IYoutube interface
			private var ytPlayer:IYoutube; // the youtube player
			private var stopped:Boolean=true; // a control variable
			private var progressTimer:Timer; // timers to display progress and playback
			private var playbackTimer:Timer;
			private var dragging:Boolean=false; // another control variable
			private var setSizeTimestamp:Number=0; // yet some other controls
			private var setSizeAllowedInterval:Number=100;
			private var seekTimestamp:Number=0;
			private var seekAllowableInterval:Number=100;
			private var timerToStartPlaybackTimer:Timer;

			[Bindable]
			private var wrapperReady:Boolean=false;

			public function init():void
			{
				if (DataModel.getInstance().currentExercise != null)
				{
					var watchExercise:ExerciseVO=DataModel.getInstance().currentExercise;
					setBideoIzena(watchExercise.name, watchExercise.id);
					exerciseTitle.text=watchExercise.title;
					var obj:SubtitleVO=new SubtitleVO();
					obj.exerciseId=watchExercise.id;
					obj.language=watchExercise.language;
					new SubtitleEvent(SubtitleEvent.GET_SUBTITLE_LINES, obj).dispatch();
				}
				else
				{
					setBideoIzena("kutsi9", 1);
				}
			}

			private function setup():void
			{
				nsClient.onMetaData=this.onMetaData;
				nsClient.onCuePoint=this.onCuePoint;

				nc=new NetConnection();

				nc.connect("rtmp://" + DataModel.getInstance().server + "/oflaDemo");
				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, netSecurityError);
				nc.addEventListener(IOErrorEvent.IO_ERROR, netIOError);

				hasera_da=true;
				//panel.addEventListener(ResizeEvent.RESIZE, aldakeapanelean);
			}

			public function asyncErrorHandler(event:AsyncErrorEvent):void
			{
				// ignore for now
			}

			private function netSecurityError(event:SecurityErrorEvent):void
			{

			}

			private function netIOError(event:IOErrorEvent):void
			{

			}

			private function volumeChangeHandler(event:SliderEvent):void
			{
				volumeTransform.volume=event.value;
				ns.soundTransform=volumeTransform;

			}




			public function playPauseClickHandler():void
			{
				playButtonClicked=!playButtonClicked;
				if (playButtonClicked)
				{
					playPauseButton.setStyle('icon', pauseImageEmbed);
					ns.resume();
				}
				else
				{
					playPauseButton.setStyle('icon', playImageEmbed);
					ns.pause();
				}
			}

			public function stopVid():void
			{
				ns.pause();
				ns.seek(0);
				playPauseButton.setStyle('icon', playImageEmbed);
				playButtonClicked=false;


//				rolbarra.visible=false;

			}

			private function set stopVideo(flag:Boolean):void
			{
				if (playButtonClicked)
					this.stopVid();
			}

			public function setBideoIzena(izena:String, bideo_id:int):void
			{
				//Nagusitik aukeratua izan den bideoaren izena lortzen da eta azpititutluen zatiari pasatzen zaio, berau martxan jarriz.
				bideoIzena=izena;
				bideoId=bideo_id;
				setup();
			}

			/**
			 *
			 * YOUTUBE PLAYING FUNCTIONS UNDER HEAVY DEVELOPMENT
			 *
			 */

			private function initializeYoutubeWrapper():void
			{
				var loader:Loader=new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, this.ytLoaded);
				loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.ytIOError);
				loader.load(new URLRequest("ytPlayer.swf")); // load ytPlayer.swf : will give us the ytPlayer; to pass in the youtube api key ==> "ytPlayer.swf?apiKey=XXXXXX"

				this.progressTimer=new Timer(30);
				this.progressTimer.addEventListener(TimerEvent.TIMER, this.updateProgress);

				this.playbackTimer=new Timer(30);
				this.playbackTimer.addEventListener(TimerEvent.TIMER, this.updatePlayback);

				this.timerToStartPlaybackTimer=new Timer(30);
				this.timerToStartPlaybackTimer.addEventListener(TimerEvent.TIMER, this.checkTimeToStartPlaybackTimer);
				reassignButtonsAndControls();
			}
			
			private function reassignButtonsAndControls():void{
				//Delete the UIC component from this canvas
				this.videoCanvas.removeChild(uic);
				ns.close();
				nc.close();
				
				//Change play/pause buttons handlers
				playPauseButton.removeEventListener(MouseEvent.CLICK,playPauseClickHandler);
				playPauseButton.addEventListener(MouseEvent.CLICK, playVideo);
				//Change the videoslider
				
				//Change the volumeslider
				this.volumeSlider.removeEventListener(SliderEvent.CHANGE, volumeChangeHandler);
			}

			private function ytLoaded(event:Event):void
			{
				try
				{
					this.videoCanvas.rawChildren.addChild((event.target as LoaderInfo).loader as DisplayObject); // add the loader object to the display list
					this.ytPlayer=(event.target as LoaderInfo).loader["content"] as IYoutube; // set the ytPlayer variable to the content property of the Loader object
					this.ytPlayer.addEventListener(YoutubeEvent.PLAYER_READY, this.onYTReady); // add listeners
					this.ytPlayer.addEventListener(YoutubeEvent.PLAYER_ERROR, this.onYTError);
					this.ytPlayer.addEventListener(YoutubeEvent.PLAYER_STATE_CHANGE, this.onYTStateChange);
				}
				catch (e:Error)
				{
					trace(e);
				}
			}

			private function onYTReady(event:YoutubeEvent):void
			{
				resizeYT(); // resize the ytPlayer to fit in the container
				this.ytPlayer.setVolume(this.volumeSlider.value); // set the player's volume to the value of the volume Slider
				wrapperReady = true;
			}

			private function resizeYT():void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady() && (getTimer() - this.setSizeTimestamp > this.setSizeAllowedInterval))
				{
					this.ytPlayer.setSize(this.videoCanvas.width, this.videoCanvas.height);
					this.setSizeTimestamp=getTimer();
				}
			}

			private function playVideo():void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady())
				{
					this.ytPlayer.playVideo(); // Resume a paused video
					this.playbackTimer.start();
				}
			}

			private function pauseVideo():void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady())
				{
					this.ytPlayer.pauseVideo(); // Pause a video
					this.playbackTimer.stop();
				}
			}

			private function muteVideo():void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady())
				{
					if (this.ytPlayer.isMute())
					{
						this.ytPlayer.unmute();
					}
					else
					{
						this.ytPlayer.mute();
					}
				}
			}

			private function onYTError(event:YoutubeEvent):void
			{
				Alert.show("Error: " + this.ytPlayer.getPlayerError());
			}

			private function startTimers():void
			{
				this.progressTimer.start();
				this.playbackTimer.start();
			}

			private function stopTimers():void
			{
				this.progressTimer.stop();
				this.playbackTimer.stop();
				this.timerToStartPlaybackTimer.stop();
			}

			private function updateProgress(event:TimerEvent):void
			{
				if (this.ytPlayer.getVideoBytesLoaded() >= 0 && this.ytPlayer.getVideoBytesTotal() > 0)
				{
					this.bideobarra.setProgress(this.ytPlayer.getVideoBytesLoaded() / this.ytPlayer.getVideoBytesTotal() * 100, 100);
					//this.seek2.setThumbValueAt(0, this.ytPlayer.getVideoBytesLoaded() / this.ytPlayer.getVideoBytesTotal());
					//this.progress.label="LOADING " + Math.round(this.ytPlayer.getVideoBytesLoaded() / this.ytPlayer.getVideoBytesTotal() * 100) + "%";
					var fTime:TimeFormatter=new TimeFormatter();
					fTime.outputMilliseconds=false;
					bideobarra.label=fTime.format(this.ytPlayer.getCurrentTime()) + "/" + fTime.format(this.ytPlayer.getDuration());
					if (this.ytPlayer.getVideoBytesLoaded() / this.ytPlayer.getVideoBytesTotal() >= 1)
					{
						this.progressTimer.stop();
					}
				}
				else
					this.bideobarra.setProgress(0, 100);
			}

			private function updatePlayback(event:TimerEvent):void
			{
				if (this.ytPlayer.getCurrentTime() >= 0 && this.ytPlayer.getDuration() > 0)
				{
					this.seek.minimum=0;
					this.seek.maximum=this.ytPlayer.getDuration();
					this.seek.value=this.ytPlayer.getCurrentTime();
					this.seek.snapInterval=Math.round(this.ytPlayer.getDuration() / 100);
				}
				else
					this.seek.value=0;
			}

			private function setVolume():void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady())
				{
					this.ytPlayer.setVolume(this.volumeSlider.value);
				}
			}

			private function startSeek():void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady())
				{
					this.dragging=true;
					this.playbackTimer.stop();
					this.ytPlayer.pauseVideo();
				}
			}

			private function stopSeek():void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady())
				{
					this.ytPlayer.playVideo();
					this.timerToStartPlaybackTimer.start();
					this.dragging=false;
				}
			}

			private function checkTimeToStartPlaybackTimer(event:TimerEvent):void
			{
				if (this.ytPlayer.getCurrentTime() - this.seek.snapInterval - 1 <= this.seek.value && this.ytPlayer.getCurrentTime() + this.seek.snapInterval + 1 >= this.seek.value)
				{
					this.playbackTimer.start();
					this.timerToStartPlaybackTimer.stop();
				}
			}

			private function seeking():void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady() && dragging && (getTimer() - this.seekTimestamp > this.seekAllowableInterval))
				{
					this.ytPlayer.seekTo(this.seek.value);
					this.seekTimestamp=getTimer();
				}
			}

			private function onYTStateChange(event:YoutubeEvent):void
			{
				//this.duration.text="Duration: " + this.ytPlayer.getDuration() + " s";
			}

			private function getStateString(state:int):String
			{
				switch (state)
				{
					case -1:
						return "Unstarted";
					case 0:
						return "Ended";
					case 1:
						return "Playing";
					case 2:
						return "Paused";
					case 3:
						return "Buffering";
					case 5:
						return "Video Cued";
					default:
						return "Unknown";
				}
			}

			private function ytIOError(event:IOErrorEvent):void
			{
				trace("not found ");
			}

			private function loadCustomYT(videoUID:String):void
			{
				if (this.ytPlayer != null && this.ytPlayer.isPlayerReady())
				{
					stopTimers();
					if (!this.stopped)
						this.ytPlayer.stopAndClearVideo();
					this.ytPlayer.loadVideo(videoUID);
					this.startTimers();
					this.stopped=false;
				}
			}
			
			public function set isWrapperReady(value:Boolean):void{
				if(wrapperReady){
					wrapperReady = false;
					loadCustomYT(bideoIzena);
				}
					
			}

			/**
			 *  END OF YOUTUBE'S FUNCTIONS
			 *
			 */

			//This function launches when the user selects an exercise from the list
			private function set onExerciseSelected(value:Boolean):void
			{
				if (DataModel.getInstance().currentExerciseRetrieved == true)
				{
					DataModel.getInstance().currentExerciseRetrieved=false;
					var watchExercise:ExerciseVO=DataModel.getInstance().currentExercise;
					exerciseTitle.text=watchExercise.title;
					bideoIzena=watchExercise.name;
					bideoId=watchExercise.id;

					if (watchExercise.source == "Youtube")
					{
						initializeYoutubeWrapper();
					}
					else
					{
						if (ns == null)
							setup();
						else
						{
							timer.stop();
							vid.removeEventListener(Event.ENTER_FRAME, monitorCuePoints);

							ns.play(bideoIzena);
							ns.client=nsClient;
							//ns.addEventListener(NetStatusEvent.NET_STATUS, bideoEgoeraAztertu);

							vid=new Video();
							vid.attachNetStream(ns);
							vid.addEventListener(Event.ENTER_FRAME, monitorCuePoints);
							uic.removeChildAt(0);
							uic.addChild(vid);

							ns.soundTransform=volumeTransform;
							timer.start();
						}
					}
				}
			}

			private function netStatusHandler(event:NetStatusEvent):void
			{

				ns=new NetStream(nc);
				ns.play(bideoIzena);
				ns.client=nsClient;
				ns.addEventListener(NetStatusEvent.NET_STATUS, bideoEgoeraAztertu);


				vid=new Video();
				vid.attachNetStream(ns);
				vid.addEventListener(Event.ENTER_FRAME, monitorCuePoints);
				uic.addChild(vid);

				//Bolumena kontrolatzeko objetuen balioak haseratu

				volumeTransform=new SoundTransform();
				volumeSlider.value=volumeTransform.volume;
				volumeSlider.minimum=0;
				volumeSlider.maximum=1;
				volumeSlider.snapInterval=0.1;
				volumeSlider.tickInterval=volumeSlider.snapInterval;
				volumeSlider.liveDragging=true;
				volumeSlider.addEventListener(SliderEvent.CHANGE, volumeChangeHandler);

				//Bolumena ixildu haseran, seek egiterakoan ez hotsik entzuteko
				volumeTransform.volume=0
				ns.soundTransform=volumeTransform;

				//segundu laurden bateko maiztasuna erlojua sortu eta hasieratu, segunduro progressbarrak eguneratzeko

				timer=new Timer(250, 0);
				timer.addEventListener(TimerEvent.TIMER, onTimer);
				timer.start();

			}

			private function bideoEgoeraAztertu(event:NetStatusEvent):void
			{
				trace("status:" + event.info.code);

				//Hemen egoera ezberdinak dokumentatuta
				//http://livedocs.adobe.com/flash/9.0_es/ActionScriptLangRefV3/flash/events/NetStatusEvent.html

				switch (event.info.code)
				{
					//Data is not being received quickly enough to fill the buffer.
					//Data flow will be interrupted until the buffer refills, at which time 
					//a NetStream.Buffer.Full message will be sent and the stream will begin playing again
					case "NetStream.Buffer.Empty":
						//Notify the user that the video is in buffering state
						break;

					//The buffer is full and the stream will begin playing.
					case "NetStream.Buffer.Full":
						//Remove the buffering state indicator
						break;

					//Data has finished streaming, and the remaining buffer will be emptied.
					case "NetStream.Buffer.Flush":
						//bideoBukaeraTratatu();
						stopVid();
						break;

					//Playback has stopped.
					case "NetStream.Play.Stop":
						//You can add some checks here
						break;

					//Playback has started.	
					case "NetStream.Play.Start":
						break;

					//An error has occurred in playback for a reason other than those listed elsewhere 
					//in this table, such as the subscriber not having read access.
					case "NetStream.Play.Failed":
						break;

					//The FLV passed to the play() method can't be found.	
					case "NetStream.Play.StreamNotFound":
						break;

				}

			}

			private function bideoBukaeraTratatu():void
			{

				//trace("bideoBukaeraTratatu");
				trace("iraupena : " + iraupena);
				trace(" ns.time : " + ns.time)

				var last_time:Number=new Number

				if ((ns.time + 0.5) >= iraupena)
				{

					if (egoera == "ikusten")
					{
						stopVid();
							//trace("ikusten");
					}

					//Bolumena aktibatu. Nolaz berriz erreproduzitzean ez den "batera ikusi" botoirik sakatzen, bolumena hemen aktibatu egin behar da. Azkenekoa aukeraturiko rola izan bada, ixildu egingo bait du.
					volumeTransform.volume=1;
					ns.soundTransform=volumeTransform;

					last_time=ns.time;
				}
			}

			private function elementuakHasieratu():void
			{
				//vid.height=reportedVideoHeight;
				//vid.width=reportedVideoWidth;
				//vid.height=260;
				//vid.width=320;

				// Resize UIComponent to same size as Video object.
				uic.width=vid.width;
				uic.height=vid.height;

				bideobarra.visible=true;
				//bideobarra.width=vid.width - 10;
				bideobarra.minimum=0;
				bideobarra.maximum=iraupena;

				//rolbarra
//				rolbarra.width=bideobarra.width;

				//seekbarra
//				seek_denb.width=bideobarra.width;

//				seek_barra.minimum=0;
//				seek_barra.maximum=iraupena;
//				seek_barra.visible=true



			}

			private function onMetaData(obj:Object):void
			{
				iraupena=obj.duration;

				reportedVideoHeight=obj.height;
				reportedVideoWidth=obj.width;

				elementuakHasieratu();

				cuetaula=new ArrayCollection();
				cuetimetaula=new ArrayCollection();

				//metadata informazioaren cuePoints eremuko cuepoint guztien informazio cuetaula taulan sartuko dugu,
				//honela hasieratik cuepointen informazio eskuragarri izateko
				if (obj.cuePoints != null)
				{
					for each (var o:Object in obj.cuePoints)
					{
						cuetaula.addItem(o);
						cuetimetaula.addItem(o.time);
					}


					//oraingoz erabiltzaileak informazioa ikusteko daukan DataGrid-a hemen beteko dugu
					//HAU ORAINDIK ONDO PENTSATU BEHARRA DAGO NOLA EGIN NAHI DUGUN!!
					//rol_zerrenda.dataProvider= cuetaula;

					//onMetadata-n bete dugun cuepointen taulatik, parte hartzen duten izen ezberdinak roltaulan
					//sartuko ditugu, ondoren pertsonaien konboa beronekin betetzeko	 	
					rolTaula=new ArrayCollection();

					for (var i:int=0; i < cuetaula.length; i++)
					{

						if (!rolTaula.contains(cuetaula[i].parameters.izena))
						{
							rolTaula.addItem(cuetaula[i].parameters.izena);
						}
					}
				}

				stopVid();

				//Bolumena piztu haseran, seek egiterakoan ez hotsik entzuteko
				volumeTransform.volume=1
				ns.soundTransform=volumeTransform;
			}

			private function rolAldaketa():void
			{

				for (var i:int=0; i < cuetaula.length; i++)
				{

					var irudia:Image=new Image;

//					if (cuetaula[i].parameters.izena == rolkonboa.selectedItem)
//					{
//
//						irudia.source="resources/images/fletxa_gorri.png"
//					}
//					else
//					{
//						irudia.source="resources/images/fletxa_beltza.png"
//					}

					//17 x 35 da fletxa

					irudia.x=panel.x + 10 + ((bideobarra.x + ((bideobarra.width / iraupena) * (cuetaula[i].time / 1000))) - (17 / 2))
					irudia.y=panel.y + bideobarra.y - 6

					//Aukeratutako rolari dagozkion cuepoint-en fletxak pantailaratzen dira
					//Amaieran ezabatu ahal izateko, taula batean gordetzen dira denak.
					childTaula.addItem(this.addChild(irudia));
				}

			}

			private function kamaraUkatua(evt:FlexEvent):void
			{
				//this.dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
				kamera_ukatua=true;
//				onAukerakIkusi();
			}

			private function bideoaMartxanJarri(evt:StateChangeEvent):void
			{
				ns.seek(0);
				ns.resume();
			}

			private function onCuePoint(obj:Object):void
			{

				if (egoera == "ikusten")
				{

//					rolbarra.label=obj.parameters.izena;

//					rolbarra.visible=true;

//					rolbarra.minimum=0;
					//trace (" obj.time : "+ obj.time + " obj.parameters.buktime: " + obj.parameters.buktime);
					rol_hasera=obj.time;
					rol_tartea=obj.parameters.buktime / 1000 - obj.time;
//					rolbarra.maximum=rol_tartea;

					aukeratua=true

				}
				else
				{

					if (obj.parameters.izena == rol_aukeratua)
					{

//						if (egoera == "grabatzen")
//						{
//
//							grabatu1.grabatzen.visible=true;
//							grabatu1.mic_ixildu("aukeratua");
//						}

						//Bolumena ixildu
						volumeTransform.volume=0
						ns.soundTransform=volumeTransform;
						volumeSlider.enabled=false;

						//aukeratutako pertsonaia bada, bere progressbarra bistaratu eta hasieratu
//						rolbarra.visible=true;

//						rolbarra.minimum=0;
						//trace (" obj.time : "+ obj.time + " obj.parameters.buktime: " + obj.parameters.buktime);
						rol_hasera=obj.time;
						rol_tartea=obj.parameters.buktime / 1000 - obj.time;
//						rolbarra.maximum=rol_tartea;

						aukeratua=true

					}
					else
					{
						//aukeratua ez den beste pertsonaiaren bat hizketan ari da
						//hau ez grabatzeko mikrofonoa ixilduko dugu
//						if (egoera == "grabatzen")
//						{
//
//							grabatu1.mic_ixildu("ez_aukeratua");
//						}
					}
				}
			}

			private function camera_activity(evt:ActivityEvent):void
			{

				//if (evt.activating == true) trace ("aktibatzen!")

				//trace("\n Infor Stringa: " + evt.toString() + "\n")
			}


			private function onTimer(event:TimerEvent):void
			{
				var currentTime:int=ns.time;
				var ehunekoa:int;


				//bideoaren progresu barra eguneratu
				bideobarra.setProgress(currentTime, iraupena);
				ehunekoa=(100 * currentTime) / iraupena;
//				seek_barra.value=currentTime;

				var totalBytes:Number=ns.bytesTotal;
				var bytesLoaded:Number=ns.bytesLoaded;
				ehunekoa=(bytesLoaded * 100) / totalBytes;
//				trace(seek_barra.value);
				var fTime:TimeFormatter=new TimeFormatter();
				fTime.outputMilliseconds=false;
				bideobarra.label=fTime.format(currentTime) + "/" + fTime.format(iraupena);


				//aukeraturiko pertsonaia hitzegiten hasten bada, bere rol barra martxan jarriko da.
				if (aukeratua == true)
				{

//					rolbarra.setProgress((currentTime - rol_hasera), rol_tartea);

//					if (rolbarra.value >= rol_tartea)
//					{
////						rolbarra.setProgress(0, rol_tartea);
////						rolbarra.visible=false;
//
////						grabatu1.grabatzen.visible=false;
//
//						//Bolumena aktibatu
//						volumeTransform.volume=1;
//						ns.soundTransform=volumeTransform;
//						volumeSlider.enabled=true;
//
//						aukeratua=false;
//					}
				}

			}

			private function onBideoaIkusi():void
			{

				panel.visible=true
				if (!botoiak.enabled)
					botoiak.enabled=true
//				if (!seek_barra.enabled)
//					seek_barra.enabled=true

				//bideoa erreproduzitzean berriro bolumena aktibatu
				volumeTransform.volume=1;
				ns.soundTransform=volumeTransform;
				volumeSlider.enabled=true;

				egoera="ikusten";

				stopVid();
			}


			//
			// SUBTITLE ADDITION ALPHA EDITION
			// ALSO MUST CHECK WHETHER IT'S POSSIBLE TO USE NON-ENBEDDED CUEPOINTS IN EXERCISE MODULE
			//

			[Bindable]
			private var subtitleStartTime:Number=0;
			[Bindable]
			private var subtitleEndTime:Number=0;
			[Bindable]
			private var subtitleLength:Number=0;
			[Bindable]
			private var subtitleCollection:ArrayCollection=new ArrayCollection();
			private var startEntry:SubtitlesAndRolesVO;
			private var endEntry:SubtitlesAndRolesVO;
			private var detailEntry:SubtitlesAndRolesVO;

			private var entrySelected:Boolean=false;

			[Bindable]
			private var outlinedSubtitle:TextOutlines=new TextOutlines(320, 50, 1.8);

			private function subtitleStartHandler():void
			{

				if (infoDatagrid == null)
				{
					infoDatagrid=new ArrayCollection();
				}
				subtitleStartTime=ns.time;
				showStepper.value=subtitleStartTime;
				hideStepper.value=subtitleStartTime;
				startEntry=new SubtitlesAndRolesVO();
				startEntry.id=infoDatagrid.length + 1;
				startEntry.showTime=subtitleStartTime;
				startEntry.hideTime=subtitleEndTime;
				startEntry.text="";
				startEntry.subtitleId=0;
				infoDatagrid.addItem(startEntry);
				insertDataGridRow();
			}

			private function subtitleEndHandler():void
			{
				subtitleEndTime=ns.time;
				//subtitleLength=subtitleEndTime - subtitleStartTime;
				hideStepper.value=subtitleEndTime;
				endEntry=new SubtitlesAndRolesVO();
				endEntry.id=infoDatagrid.length;
				endEntry.showTime=subtitleStartTime;
				endEntry.hideTime=subtitleEndTime;
				endEntry.text="text";
				endEntry.subtitleId=0;
				if (infoDatagrid.getItemIndex(startEntry) >= 0)
				{
					infoDatagrid.setItemAt(endEntry, infoDatagrid.getItemIndex(startEntry));
					insertDataGridRow();
				}

			}

			private function insertDataGridRow():void
			{
				subtitleList.dataProvider=infoDatagrid;
			}

			private function updateDataGridRow():void
			{
				if (entrySelected)
				{

					detailEntry.showTime=showStepper.value;
					detailEntry.hideTime=hideStepper.value;
					//detailEntry.length=detailEntry.hideTime - detailEntry.showTime;
					detailEntry.text=subtitleDetailTextArea.text;
					if (infoDatagrid.length > 0 || infoDatagrid && subtitleList.selectedIndex > 0)
					{
						var updIndex:int=infoDatagrid.getItemIndex(infoDatagrid.getItemAt(subtitleList.selectedIndex));
						infoDatagrid.setItemAt(detailEntry, updIndex);
					}
				}
			}

			private function goToTimeHandler():void
			{
				if (entrySelected && infoDatagrid.length > 0)
				{
					var tempEntry:SubtitlesAndRolesVO=infoDatagrid.getItemAt(subtitleList.selectedIndex) as SubtitlesAndRolesVO;
					//ns.pause();
					ns.seek(tempEntry.showTime);
						//ns.resume();

				}
			}

			private function monitorCuePoints(e:Event):void
			{
				var curTime:Number=ns.time; // the current netStream time...
				//trace(curTime + " / ");
				for each (var ob1:SubtitlesAndRolesVO in infoDatagrid)
				{
					if ((curTime - 0.08) < ob1.showTime && ob1.showTime < (curTime + 0.08))
					{
						doShowCuePoint(ob1);
						break;
					}
				}
				for each (var ob2:SubtitlesAndRolesVO in infoDatagrid)
				{
					if ((curTime - 0.08) < ob2.hideTime && ob2.hideTime < (curTime + 0.08))
					{
						doHideCuePoint(ob2);
						break;
					}
				}
			}

			private function doShowCuePoint(obj:SubtitlesAndRolesVO):void
			{
				// put code here to do something once a cue point fires
//				enterFrameTest.text=obj.text;
				//captionText.text=obj.text;
				outlinedSubtitle.setText(obj.text);
				subHolder.text=obj.text;
			}

			private function doHideCuePoint(obj:SubtitlesAndRolesVO):void
			{
//				enterFrameTest.text="";
				//captionText.text="";
				outlinedSubtitle.setText("");
				subHolder.text="";
			}

			private function showCurrentLineDetail():void
			{
				entrySelected=true;
				detailEntry=infoDatagrid.getItemAt(subtitleList.selectedIndex) as SubtitlesAndRolesVO;
				showStepper.value=detailEntry.showTime;
				hideStepper.value=detailEntry.hideTime;

				subtitleDetailTextArea.text=detailEntry.text;
			}

			private function formatStartTimeColumn(item:Object, col:DataGridColumn):String
			{
				return timeFormatter.format(item.showTime);
			}

			private function formatRolColumn(item:Object, col:DataGridColumn):String
			{
				var rolText:String=item.role;
				//return subLineText.replace(/[\\r\\n\\v]/, ",");
				return item.role;
			}

			private function formatEndTimeColumn(item:Object, col:DataGridColumn):String
			{
				return timeFormatter.format(item.hideTime);
			}

			private function formatTextColumn(item:Object, col:DataGridColumn):String
			{
				var subLineText:String=item.text;
				//return subLineText.replace(/[\\r\\n\\v]/, ",");
				return item.text;
			}


			private function viewSubtitlingControls(event:MouseEvent):void
			{

				subMode=true;
				panelEditor.title="Subtitle Editor";
				viewSubRolControls();
				infoDatagrid=DataModel.getInstance().availableSubtitlesAndRoles;

			}

			private function viewRolesControls(event:MouseEvent):void
			{

				subMode=false;
				panelEditor.title="Rol Editor";
				viewSubRolControls();




			}

			private function viewSubRolControls():void
			{
				DataModel.getInstance().videoPlayerControlsViewStack=0;
				subtitlingControls.minHeight=24;
				subtitlingControls.height=24;
				subtitlingControls.visible=true;
				videoControls.height=subtitlingControls.minHeight;
				if (subtitleDetailTextArea)
					subtitleDetailTextArea.text="";



			}

			private function removeDatagridContent():void
			{
				if (infoDatagrid)
					infoDatagrid.removeAll();

				subtitleDetailTextArea.text="";

			}

			private function removeSelectedLine():void
			{
				if (infoDatagrid && subtitleList.selectedIndex >= 0)
				{
					infoDatagrid.removeItemAt(subtitleList.selectedIndex);
					subtitleDetailTextArea.text="";
				}
			}

			private function saveSubtitlesHandler():void
			{
				var pruebaSave:SubtitleVO=new SubtitleVO();
				pruebaSave.exerciseId=DataModel.getInstance().currentExercise.id;
				pruebaSave.language=DataModel.getInstance().currentExercise.language;
				new SubtitleEvent(SubtitleEvent.SAVE_SUBTITLE_LINES, pruebaSave, null).dispatch();
//				var subtitle:SubtitleVO = new SubtitleVO();
//				subtitle.exerciseId = bideoId;
//				subtitle.userId = DataModel.getInstance().loggedUser.id;
//				subtitle.language = languageComboBox.selectedLabel;
//				new SubtitleEvent(SubtitleEvent.SAVE_SUBTITLE,subtitle,null).dispatch();
//				
			}

			private function set onSubtitleSaved(value:Boolean):void
			{
//				if (DataModel.getInstance().subtitleSaved){
//					DataModel.getInstance().subtitleSaved = false;
//					var subtitleId:int = DataModel.getInstance().subtileSaveId;
//					for each (var s:SubtitleLineVO in subtitleCollection){
//						s.subtitleId = subtitleId;
//					}
//					var lines:Array = subtitleCollection.toArray();
//					new SubtitleEvent(SubtitleEvent.SAVE_SUBTITLE_LINES,null,lines).dispatch();
//				}

			}
		]]>

	</mx:Script>

	<mx:Binding source="{DataModel.getInstance().currentExerciseRetrieved}"
				destination="this.onExerciseSelected"/>
	<mx:Binding source="{DataModel.getInstance().subtitleSaved}"
				destination="this.onSubtitleSaved"/>
	<mx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="this.stopVideo"/>
				
	<mx:Binding source="{wrapperReady}" destination="this.isWrapperReady"/>





	<mx:Panel id="panel"
			  title="Video Player"
			  visible="true"
			  horizontalAlign="center"
			  verticalAlign="top"
			  verticalGap="0"
			  paddingLeft="4"
			  paddingRight="4"
			  paddingTop="4"
			  paddingBottom="4"
			  fontFamily="Arial"
			  fontSize="12"
			  headerHeight="0"
			  borderThicknessBottom="0"
			  borderThicknessTop="0"
			  borderThicknessLeft="0"
			  borderThicknessRight="0"
			  height="100%"
			  backgroundAlpha="0.0"
			  borderStyle="none"
			  cornerRadius="0">
		<mx:Label id="exerciseTitle"
				  text="ExerciseTitle"
				  width="100%"
				  fontSize="16"
				  fontWeight="bold"/>

		<mx:Canvas id="videoCanvas"
				   backgroundColor="#000000"
				   borderStyle="solid"
				   borderColor="#929292"
				   width="{videoControlBar.width}">
			<mx:UIComponent id="uic"
							x="{(videoControlBar.width-320)/2}"
							width="320"
							height="260"/>
			<!--
				 <mx:TextArea backgroundAlpha="0.5" backgroundColor="0" borderStyle="none" color="#00ffffff" fontSize="10" height="50" id="captionText" paddingLeft="3" paddingRight="3" visible="true" width="320" y="210" fontFamily="Arial" textAlign="center" fontWeight="bold"/>
			-->
			<mx:Text id="subHolder"
					 width="320"
					 height="50"
					 x="{(videoControlBar.width-320)/2}"
					 y="210"
					 color="#FFFFFF"
					 fontFamily="Arial"
					 fontSize="14"
					 fontWeight="bold"
					 textAlign="center"/>
		</mx:Canvas>
		<mx:HBox verticalAlign="middle"
				 horizontalAlign="left"
				 width="100%"
				 borderStyle="solid"
				 borderColor="#929292"
				 backgroundColor="#DCD9D9"
				 backgroundAlpha="1.0"
				 id="videoControlBar"
				 horizontalGap="2">
			<mx:HBox id="botoiak"
					 borderStyle="none"
					 cornerRadius="0"
					 paddingLeft="4"
					 paddingRight="4"
					 height="100%"
					 horizontalAlign="center"
					 verticalAlign="middle"
					 horizontalGap="4">
				<mx:Button id="playPauseButton"
						   click="playPauseClickHandler()"
						   cornerRadius="4"
						   labelPlacement="bottom"
						   width="20"
						   height="20">
					<mx:icon>@Embed(source='../../resources/images/playerPlayIcon.png')</mx:icon>
				</mx:Button>
				<mx:Button id="stopButton"
						   click="stopVid()"
						   width="20"
						   height="20">
					<mx:icon>@Embed(source='../../resources/images/playerStopIcon.png')</mx:icon>
				</mx:Button>


			</mx:HBox>
			<mx:VBox>

				<mx:ProgressBar id="bideobarra"
								mode="manual"
								label="00:00/00:00"
								labelWidth="75"
								trackHeight="15"
								labelPlacement="right"
								fontSize="10"
								fontWeight="normal"
								paddingLeft="0"
								paddingRight="0"/>
			</mx:VBox>



			<mx:HBox id="bolumen_kaxa"
					 borderStyle="solid"
					 cornerRadius="0"
					 width="93"
					 height="100%"
					 horizontalAlign="center"
					 verticalAlign="middle">
				<mx:Image source="resources/images/bol.png"
						  width="19"
						  height="19"/>
				<mx:HSlider id="volumeSlider"
							width="35"/>
			</mx:HBox>

		</mx:HBox>
		<mx:ViewStack id="videoControls"
					  width="100%">
			<mx:HBox id="subtitlingControls"
					 width="100%"
					 paddingTop="2"
					 paddingBottom="2"
					 paddingLeft="2"
					 paddingRight="2"
					 horizontalAlign="left"
					 verticalAlign="middle"
					 backgroundColor="#DCD9D9"
					 borderStyle="solid"
					 horizontalGap="4"
					 height="0">
				<mx:Label text="Subtitling Controls:"
						  color="#000000"
						  fontWeight="bold"/>
				<mx:Button click="subtitleStartHandler()"
						   width="20"
						   height="20"
						   toolTip="Subtitle start">
					<mx:icon>@Embed(source='../../resources/images/subStartButtonIcon.png')</mx:icon>
				</mx:Button>
				<mx:Button click="subtitleEndHandler()"
						   width="20"
						   height="20"
						   toolTip="Subtitle end">
					<mx:icon>@Embed(source='../../resources/images/subEndButtonIcon.png')</mx:icon>
				</mx:Button>
				<mx:VRule height="20"/>
				<mx:Button width="20"
						   height="20"
						   toolTip="Previous subtitle line">
					<mx:icon>@Embed(source='../../resources/images/prevSubButtonIcon.png')</mx:icon>
				</mx:Button>
				<mx:Button width="20"
						   height="20"
						   toolTip="Next subtitle line">
					<mx:icon>@Embed(source='../../resources/images/nextSubButtonIcon.png')</mx:icon>
				</mx:Button>
				<mx:VRule height="20"/>
			</mx:HBox>

		</mx:ViewStack>
		<mx:HBox id="exerciseOptions"
				 width="100%"
				 horizontalAlign="center"
				 verticalAlign="middle"
				 paddingTop="4"
				 paddingBottom="4">
			<mx:Button label="Record"
					   fontWeight="normal"
					   labelPlacement="bottom"
					   width="80"
					   height="80"
					   enabled="false"
					   toolTip="Record a video response following this exercise">
				<mx:icon>@Embed(source='../../resources/images/addRecording.png')</mx:icon>
			</mx:Button>
			<mx:Button label="Subtitle"
					   fontWeight="normal"
					   labelPlacement="bottom"
					   click="viewSubtitlingControls(event)"
					   width="80"
					   height="80"
					   toolTip="Add your own subtitles to this exercise"
					   enabled="true">
				<mx:icon>@Embed(source='../../resources/images/addSubtitles.png')</mx:icon>
			</mx:Button>
			<mx:Button label="Roles"
					   fontWeight="normal"
					   width="80"
					   height="80"
					   labelPlacement="bottom"
					   click="viewRolesControls(event)"
					   enabled="true"
					   toolTip="Define the characters/roles appearing on this exercise">
				<mx:icon>@Embed(source='../../resources/images/addRolesSmall.png')</mx:icon>
			</mx:Button>
			<mx:HSlider thumbDrag="startSeek()"
									change="seeking()"
									thumbRelease="stopSeek()"
									allowTrackClick="true"
									enabled="true"
									liveDragging="true"
									id="seek"
									showTrackHighlight="true"
									alpha="1.0"
									width="100%"/>
		</mx:HBox>
	</mx:Panel>
	<mx:ViewStack height="100%"
				  width="100%"
				  selectedIndex="{DataModel.getInstance().videoPlayerControlsViewStack}">


		<mx:Panel width="100%"
				  height="100%"
				  layout="vertical"
				  title="Subtitle Editor"
				  fontFamily="Arial"
				  fontSize="12"
				  horizontalAlign="center"
				  verticalAlign="middle"
				  id="panelEditor">
			<mx:HBox horizontalAlign="center"
					 verticalAlign="middle"
					 width="100%"
					 visible="{subMode}">
				<mx:Label text="Select subtitle language"/>
				<ns4:IconComboBox id="languageComboBox"
								  dataProvider="{flaggedLanguageData}"
								  fontWeight="normal"/>
			</mx:HBox>





			<mx:DataGrid id="subtitleList"
						 sortableColumns="false"
						 width="100%"
						 height="70%"
						 doubleClick="goToTimeHandler()"
						 doubleClickEnabled="true"
						 change="showCurrentLineDetail()"
						 dataProvider="{DataModel.getInstance().availableSubtitlesAndRoles}">
				<mx:columns>
					<mx:DataGridColumn headerText="ID"
									   dataField="id"
									   width="60"
									   visible="true"/>
					<mx:DataGridColumn headerText="Show"
									   dataField="showTime"
									   width="80"
									   labelFunction="formatStartTimeColumn"
									   visible="{subMode}"/>
					<mx:DataGridColumn headerText="Hide"
									   dataField="hideTime"
									   width="80"
									   labelFunction="formatEndTimeColumn"
									   visible="{subMode}"/>
					<mx:DataGridColumn headerText="Rol ID"
									   dataField="roleId"
									   width="80"
									   visible="{subMode}"/>

					<mx:DataGridColumn headerText="Roles"
									   dataField="singleName"
									   width="80"
									   visible="{subMode}"/>

					<mx:DataGridColumn headerText="Character Name"
									   dataField="characterName"
									   width="80"
									   visible="{!subMode}"/>

					<mx:DataGridColumn headerText="Rol"
									   width="200"
									   dataField="characterName"
									   editorDataField="value"
									   textAlign="center"
									   rendererIsEditor="true"
									   visible="{subMode}">
						<mx:itemRenderer>
							<mx:Component>
								<mx:ComboBox dataProvider="{parentDocument.infoDatagrid}"/>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>


					<mx:DataGridColumn headerText="Text"
									   dataField="text"
									   labelFunction="formatTextColumn"
									   visible="{subMode}"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:VBox width="100%"
					 height="30%"
					 id="subtitleDetailHolder"
					 horizontalAlign="center"
					 verticalAlign="middle"
					 visible="{DataModel.getInstance().isLoggedIn}">
				<mx:VBox width="100%"
						 id="subtitleDetailTextHolder"
						 paddingBottom="8"
						 paddingLeft="8"
						 paddingRight="8"
						 verticalGap="2"
						 visible="true">
					<mx:Label text="Text:"/>
					<mx:TextArea width="100%"
								 height="100%"
								 id="subtitleDetailTextArea"
								 change="updateDataGridRow()"
								 textAlign="center"/>

				</mx:VBox>
				<mx:HBox width="100%"
						 id="subtitleDetailTimesHolder"
						 horizontalAlign="center"
						 verticalAlign="middle"
						 paddingBottom="4"
						 paddingTop="4">
					<mx:VBox id="showVBox"
							 height="100%"
							 verticalAlign="middle"
							 horizontalAlign="center"
							 paddingLeft="4"
							 paddingRight="4"
							 visible="{subMode}">
						<mx:Label text="Show:"/>
						<ns2:FormattedStepper id="showStepper"
											  change="updateDataGridRow()"
											  stepSize="0.01"
											  formatter="{this.timeFormatter2}"
											  width="90"
											  maximum="250000"/>
					</mx:VBox>
					<mx:VBox id="hideVBox"
							 height="100%"
							 horizontalAlign="center"
							 verticalAlign="middle"
							 paddingLeft="4"
							 paddingRight="4"
							 visible="{subMode}">
						<mx:Label text="Hide:"/>
						<ns2:FormattedStepper id="hideStepper"
											  change="updateDataGridRow()"
											  stepSize="0.01"
											  formatter="{this.timeFormatter3}"
											  width="90"
											  maximum="250000"/>
					</mx:VBox>
					<mx:HBox height="100%"
							 verticalAlign="middle"
							 horizontalAlign="center"
							 paddingLeft="4"
							 paddingRight="4"
							 borderStyle="solid"
							 cornerRadius="8"
							 backgroundColor="#DDDDDD">
						<mx:Button label="Add"
								   paddingLeft="6"
								   paddingRight="6"
								   cornerRadius="8"
								   icon="@Embed(source='../../resources/images/add.png')"
								   click="subtitleStartHandler()"
								   id="addSubtitleLine"/>
						<mx:Button label="Remove"
								   paddingLeft="6"
								   paddingRight="6"
								   cornerRadius="8"
								   click="removeSelectedLine()">
							<mx:icon>@Embed(source='../../resources/images/delete.png')</mx:icon>
						</mx:Button>
						<mx:Button label="Clear"
								   paddingLeft="6"
								   paddingRight="6"
								   cornerRadius="8"
								   click="removeDatagridContent()">
							<mx:icon>@Embed(source='../../resources/images/cancel.png')</mx:icon>
						</mx:Button>
						<mx:VRule height="30"/>
						<mx:Button label="Save"
								   paddingLeft="6"
								   paddingRight="6"
								   cornerRadius="8"
								   icon="@Embed(source='../../resources/images/save.png')"
								   click="saveSubtitlesHandler()"/>
					</mx:HBox>
				</mx:HBox>

			</mx:VBox>
		</mx:Panel>
		<mx:HBox width="100%"
				 height="100%">

		</mx:HBox>
	</mx:ViewStack>
	<ns2:TimeFormatter id="timeFormatter"/>
	<ns2:TimeFormatter id="timeFormatter2"/>
	<ns2:TimeFormatter id="timeFormatter3"/>
</mx:HBox>


