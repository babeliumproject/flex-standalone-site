<?xml version="1.0" encoding="utf-8"?>
<mx:ComboBox xmlns:mx="http://www.adobe.com/2006/mxml"
			 dataChange="setSelected()"
			 change="onSelectionChange(event)"
			 itemRenderer="modules.subtitles.GridComboBoxItemRenderer">
	
	<mx:Metadata>
		[ResourceBundle("myResources")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.dataGridClasses.DataGridListData;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import view.common.CustomAlert;
			
			import vo.RoleComboDataVO;

			private var _ownerData:Object;
			private var _lookupField:String="value";
			private var _valueField:String="charName";
			
			private var _actionField:String="action";

			private var _actionRemoveItem:String=RoleComboDataVO.ACTION_DELETE;
			private var _actionSelectItem:String=RoleComboDataVO.ACTION_SELECT;
			private var _actionInsertItem:String=RoleComboDataVO.ACTION_INSERT;
			private var _actionDoNothingItem:String=RoleComboDataVO.ACTION_NO_ACTION;

			// When using this component as an itemEditor rather than an itemRenderer
			// then set ' editorDataField="selectedItemKey"' on the column to 
			// ensure that changes to the ComboBox are propogated.
			[Bindable]
			public var selectedItemKey:Object;

			//The keyCode for ENTER key
			public static const ENTER_KEY:int=13;

			public var newRolePopUp:NewRolePopUp;



			public function set lookupField(value:String):void
			{
				if (value)
				{
					_lookupField=value;
					setSelected();
				}
			}

			public function set actionField(value:String):void
			{
				if (value)
				{
					_actionField=value;
				}
			}

			public function set valueField(value:String):void
			{
				if (value)
				{
					_valueField=value;
				}
			}

			public function set actionRemoveItem(value:String):void
			{
				if (value)
				{
					_actionRemoveItem=value;
				}
			}

			public function set actionSelectItem(value:String):void
			{
				if (value)
				{
					_actionSelectItem=value;
				}
			}

			public function set actionInsertItem(value:String):void
			{
				if (value)
				{
					_actionInsertItem=value;
				}
			}


			override public function set data(value:Object):void
			{
				if (value)
				{
					_ownerData=value;
					setSelected();
				}
			}

			override public function get data():Object
			{
				return _ownerData;
			}

			private function setSelected():void
			{
				if (dataProvider && _ownerData)
				{

					var col:DataGridListData=DataGridListData(listData);
					if (dataProvider.length > 2 && _ownerData[col.dataField] != 0)
					{
						for each (var dp:Object in dataProvider)
						{
							if (dp[_lookupField] == _ownerData[col.dataField])
							{
								selectedItem=dp;
								selectedItemKey=_ownerData[col.dataField];
								return;
							}
						}
					}
					else
					{
						_ownerData[col.dataField]=-1; //Show the prompt
						selectedItemKey=-1;
					}
				}
				selectedItem=null;
			}

			private function onSelectionChange(e:ListEvent):void
			{
				if (selectedItem && _ownerData)
				{
					var col:DataGridListData=DataGridListData(listData);

					if (selectedItem[_actionField] == _actionRemoveItem)
					{
						for each (var dp:Object in dataProvider)
						{
							if (selectedItem[_lookupField] == dp[_lookupField])
								dataProvider.removeItemAt(dataProvider.getItemIndex(dp));
						}
						_ownerData[col.dataField]=-1; //Show the prompt
						selectedItemKey=-1;
					}
					else if (selectedItem[_actionField] == _actionSelectItem)
					{
						_ownerData[col.dataField]=selectedItem[_lookupField];
						selectedItemKey=selectedItem[_lookupField];
					}
					else if (selectedItem[_actionField] == _actionInsertItem)
					{
						showNewRolePopUp();
					}
					else if (selectedItem[_actionField] == _actionDoNothingItem)
					{
						//Do nothing
						CustomAlert.info(resourceManager.getString('myResources','MESSAGE_SELECT_ROL_TO_DELETE'));
					}
				}
			}

			private function checkPressedKey(e:KeyboardEvent):void
			{
				if (e.keyCode == ENTER_KEY)
				{
					insertNewRole(null);
				}
			}

			private function showNewRolePopUp():void
			{

				newRolePopUp=NewRolePopUp(PopUpManager.createPopUp(parent, NewRolePopUp, true));
				newRolePopUp.title=resourceManager.getString('myResources','TITLE_INSERT_NEW_ROL');
				newRolePopUp.showCloseButton=true;
				PopUpManager.centerPopUp(newRolePopUp);

				newRolePopUp.addEventListener("close", cancelInsert);
				newRolePopUp["cancelButton"].addEventListener("click", cancelInsert);
				newRolePopUp["okButton"].addEventListener("click", insertNewRole);

				//We add a key listener so that we can push enter to processLogin
				newRolePopUp.addEventListener(KeyboardEvent.KEY_DOWN, checkPressedKey);
			}

			private function insertNewRole(event:Event):void
			{
				var maxRoleId:Number=0;
				var roleExists:Boolean=false;
				var newRoleName:String=newRolePopUp.newrole.text;
				for each (var dp:Object in dataProvider)
				{
					if (dp[_valueField].toLowerCase() == newRoleName.toLowerCase())
					{
						roleExists=true;
						newRolePopUp.errorInfo.text=resourceManager.getString('myResources','MESSAGE_ROLE_ALREADY_EXISTS');
					}
					if (dp[_lookupField] > maxRoleId)
						maxRoleId=dp[_lookupField];
				}
				if (!roleExists)
				{
					//The role doesn't exist, we close the popup and begin the new role insertion
					PopUpManager.removePopUp(newRolePopUp);
					var newRoleSelectEntry:RoleComboDataVO = new RoleComboDataVO(maxRoleId +1, newRoleName, RoleComboDataVO.ACTION_SELECT, RoleComboDataVO.FONT_NORMAL, RoleComboDataVO.INDENT_ROLE);
					var newRoleDeleteEntry:RoleComboDataVO = new RoleComboDataVO(maxRoleId +1, newRoleName, RoleComboDataVO.ACTION_DELETE, RoleComboDataVO.FONT_NORMAL, RoleComboDataVO.INDENT_ROLE);
					
					for each (var dpi:Object in dataProvider)
					{
						if (dpi[_actionField] == _actionDoNothingItem)
						{
							dataProvider.addItemAt(newRoleSelectEntry, dataProvider.getItemIndex(dpi));
							break;
						}
					}
					dataProvider.addItem(newRoleDeleteEntry);

					//Now we select the new role as the current item
					var col:DataGridListData=DataGridListData(listData);
					_ownerData[col.dataField]=newRoleSelectEntry[_lookupField];
					selectedItemKey=newRoleSelectEntry[_lookupField];

				}

			}

			private function cancelInsert(event:Event):void
			{
				PopUpManager.removePopUp(newRolePopUp);
			}
		]]>
	</mx:Script>
</mx:ComboBox>
