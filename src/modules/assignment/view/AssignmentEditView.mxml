<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="modules.exercise.view.*"
		  xmlns:components="components.*"
		  paddingBottom="16"
		  paddingLeft="16"
		  paddingRight="16"
		  paddingTop="16"
		  width="100%"
		  implements="modules.IPinnedGroupInterface"
		  creationComplete="onComplete(event)">

	<fx:Script>
		<![CDATA[
			import com.adobe.utils.DateUtil;
			
			import control.URLManager;
			
			import model.DataModel;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;
			
			public static const YEAR_RANGE:int=35;


			[Bindable]
			private var _peerEvaluation:Boolean;
			[Bindable]
			private var _customRubric:Boolean;

			private var _model:DataModel=DataModel.getInstance();

			private var commitOnly:Boolean;
			private var useWeakReference:Boolean;
			private var cw1:ChangeWatcher;

			protected function onComplete(event:FlexEvent):void
			{
				initDateTimeDropdowns();
				cw1=BindingUtils.bindSetter(assignmentDataRetrieved, _model, 'assignmentDataRetrieved', commitOnly, useWeakReference);
			}

			public function resetGroup():void
			{
				//Remove any data stored in the model
			}

			public function unpinGroup():void
			{
				if (cw1)
					cw1.unwatch();
				cw1=null;

				this.removeEventListener(FlexEvent.CREATION_COMPLETE, onComplete);
			}

			protected function initDateTimeDropdowns():void
			{
				var currentDate:Date = new Date();
				var days:ArrayCollection=new ArrayCollection();
				var hours:ArrayCollection=new ArrayCollection();
				var minutes:ArrayCollection=new ArrayCollection();
				var years:ArrayCollection=new ArrayCollection();
				
				var months:ArrayCollection=new ArrayCollection(ResourceManager.getInstance().getStringArray('SharedResources','monthNames'));
				
				var s:Number=currentDate.fullYear-YEAR_RANGE;
				var f:Number=currentDate.fullYear+YEAR_RANGE;
				
				for(s; s<=f; s++){
					years.addItem(s);
				}

				var i:int;
				
				for (i=1; i <=31; i++)
				{
					days.addItem(zeroPad(i, 2));
				}
				for (i=0; i < 24; i++)
				{
					hours.addItem(zeroPad(i, 2));
				}
				for (i=0; i < 60; i+=5)
				{
					minutes.addItem(zeroPad(i, 2));
				}

				openSubmissionDay.dataProvider=days;
				openSubmissionMonth.dataProvider=months;
				openSubmissionYear.dataProvider=years;
				openSubmissionHour.dataProvider=hours;
				openSubmissionMinute.dataProvider=minutes;
				submissionDeadlineDay.dataProvider=days;
				submissionDeadlineYear.dataProvider=years;
				submissionDeadlineHour.dataProvider=hours;
				submissionDeadlineMinute.dataProvider=minutes;

				openAssessmentDay.dataProvider=days;
				openAssessmentYear.dataProvider=years;
				openAssessmentHour.dataProvider=hours;
				openAssessmentMinute.dataProvider=minutes;
				assessmentDeadlineDay.dataProvider=days;
				assessmentDeadlineYear.dataProvider=years;
				assessmentDeadlineHour.dataProvider=hours;
				assessmentDeadlineMinute.dataProvider=minutes;
				
				//Set the dropdown's initial values to reflect the current date time.

			}
			
			public function validateDates():Boolean{
				var valid:Boolean=false;
				
				//First check that all the dates have valid day of the month (e.g. <=30 when month is April)
				
				var currentDateTime:Date = new Date();
				var openSubmissionDateTime:Date = new Date(parseInt(openSubmissionYear.selectedItem), openSubmissionMonth.selectedIndex, openSubmissionDay.selectedIndex+1, 
														   openSubmissionHour.selectedIndex, openSubmissionMinute.selectedIndex);
				
				var submissionDeadlineDateTime:Date = new Date(parseInt(submissionDeadlineYear.selectedItem), submissionDeadlineMonth.selectedIndex, submissionDeadlineDay.selectedIndex+1, 
															   submissionDeadlineHour.selectedIndex, submissionDeadlineMinute.selectedIndex);
				
				var openAssessmentDateTime:Date = new Date(parseInt(openAssessmentYear.selectedItem), openAssessmentMonth.selectedIndex, openAssessmentDay.selectedIndex+1, 
														   openAssessmentHour.selectedIndex, openAssessmentMinute.selectedIndex);
				
				var assessmentDeadlineDateTime:Date = new Date(parseInt(assessmentDeadlineYear.selectedItem), assessmentDeadlineMonth.selectedIndex, assessmentDeadlineDay.selectedIndex+1, 
															   assessmentDeadlineHour.selectedIndex, assessmentDeadlineMinute.selectedIndex);
				
				//Submission deadline must be greater than current date
				DateUtil.compareDates(currentDateTime,submissionDeadlineDateTime);
				
				//Submission deadline must be greater than submission open
				DateUtil.compareDates(openSubmissionDateTime,submissionDeadlineDateTime);
				
				//Assessment open must be greater than submission deadline
				DateUtil.compareDates(submissionDeadlineDateTime,openAssessmentDateTime);
				
				//Assessment deadline must be greater than assessment open
				DateUtil.compareDates(openAssessmentDateTime,assessmentDeadlineDateTime);
				
				
				return valid;
			}

			public function zeroPad(number:int, width:int):String
			{
				var ret:String="" + number;
				while (ret.length < width)
					ret="0" + ret;
				return ret;
			}

			protected function assignmentDataRetrieved(value:Boolean):void
			{

			}

			protected function pickExerciseHandler(event:MouseEvent):void
			{
				//Save current form data as a draft and keep in session to come back to it when picking an exercise
				URLManager.getInstance().redirect('/exercises');
			}

			protected function peerassessmentchoose_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub

			}

			protected function defaultRubric_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub

			}

			protected function saveAssignmentClickHandler(event:MouseEvent):void
			{

			}

			protected function cancelAssignmentClickHandler(event:MouseEvent):void
			{
				var lasturl:String=URLManager.getInstance().getLastURL();
				trace("LastURL is: " + URLManager.getInstance().getLastURL());
				if (lasturl)
					URLManager.getInstance().redirect(lasturl);
				else
					URLManager.getInstance().redirect('/home');
			}

			protected function dateChangeHandler(event:CalendarLayoutChangeEvent):void
			{
				var newDate:Date=DatePicker(event.target).selectedDate;
				trace(newDate.toString());
			}
		]]>
	</fx:Script>

	<s:Label text="{resourceManager.getString('myResources','ADD_ASSIGNMENT')}"
			 styleName="h2"/>

	<s:BorderContainer id="container"
					   styleName="lightBorderContainer"
					   width="100%">

		<s:layout>
			<s:VerticalLayout paddingBottom="16"
							  paddingTop="16"
							  paddingLeft="16"
							  paddingRight="16"/>
		</s:layout>

		<s:Form>

			<s:FormHeading label="{ResourceManager.getInstance().getString('myResources','AVAILABILITY')}" styleName="h4"/>
			<s:FormItem label="{ResourceManager.getInstance().getString('myResources','OPEN_FOR_SUBMISSIONS_FROM')}">
				<s:HGroup width="100%"
						  verticalAlign="middle">
					<s:DropDownList id="openSubmissionDay"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openSubmissionMonth"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openSubmissionYear"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openSubmissionHour"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openSubmissionMinute"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<components:DatePicker id="openSubmissionDate"
										   change="dateChangeHandler(event)"
										   buttonMode="true"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="{ResourceManager.getInstance().getString('myResources','SUBMISSION_DEADLINE')}">
				<s:HGroup width="100%">
					<s:DropDownList id="submissionDeadlineDay"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="submissionDeadlineMonth"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="submissionDeadlineYear"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="submissionDeadlineHour"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="submissionDeadlineMinute"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<components:DatePicker id="submissionDeadLineDate"
										   change="dateChangeHandler(event)"
										   buttonMode="true"/>
				</s:HGroup>
			</s:FormItem>

			<s:FormItem label="{ResourceManager.getInstance().getString('myResources','OPEN_FOR_ASSESSMENT_FROM')}">
				<s:HGroup width="100%">
					<s:DropDownList id="openAssessmentDay"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openAssessmentMonth"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openAssessmentYear"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openAssessmentHour"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openAssessmentMinute"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<components:DatePicker id="openAssessmentDate"
										   change="dateChangeHandler(event)"
										   buttonMode="true"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="{ResourceManager.getInstance().getString('myResources','DEADLINE_FOR_ASSESSMENT')}">
				<s:HGroup>
					<s:DropDownList id="assessmentDeadlineDay"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="assessmentDeadlineMonth"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="assessmentDeadlineYear"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="assessmentDeadlineHour"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="assessmentDeadlineMinute"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<components:DatePicker id="assessmentDeadlineDate"
										   change="dateChangeHandler(event)"
										   buttonMode="true"/>
				</s:HGroup>
			</s:FormItem>

			<s:FormHeading label="{ResourceManager.getInstance().getString('myResources','EXERCISE')}" styleName="h4"/>
			<s:BorderContainer id="exercisePickArea"
							   borderColor="#E0E0E0"
							   borderAlpha=".85"
							   backgroundAlpha="0">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center"
									  verticalAlign="middle"
									  paddingBottom="8"
									  paddingLeft="8"
									  paddingRight="8"
									  paddingTop="8"/>
				</s:layout>
				<s:Button id="pickExerciseBtn"
						  label="{ResourceManager.getInstance().getString('myResources','PICK_AN_EXERCISE')}"
						  styleName="btn-primary"
						  buttonMode="true"
						  click="pickExerciseHandler(event)"/>
				<view:ExerciseItemRenderer/>
			</s:BorderContainer>
			<s:FormHeading label="{ResourceManager.getInstance().getString('myResources','ASSESSMENT_SETTINGS')}" styleName="h4"/>
			<s:FormItem label="{ResourceManager.getInstance().getString('myResources','ASSESSMENT_TYPE')}">
				<s:DropDownList id="assessmentType"
								selectedIndex="0"
								change="peerassessmentchoose_changeHandler(event)">
					<s:ArrayList>
						<fx:Object code="ia"
								   label="Instructor assessment"/>
						<fx:Object code="pa"
								   label="Peer assessment"/>
					</s:ArrayList>
				</s:DropDownList>
			</s:FormItem>
			<s:FormItem label="Self-assessment">
				<s:CheckBox id="selfassessmentchoose"
							change="peerassessmentchoose_changeHandler(event)">
				</s:CheckBox>
			</s:FormItem>
			<s:FormHeading label="{ResourceManager.getInstance().getString('myResources','GRADING_SETTINGS')}"/>
			<s:FormItem label="{ResourceManager.getInstance().getString('myResources','GRADE_TYPE')}">
				<s:DropDownList id="gradeType"
								selectedIndex="0">
					<s:ArrayList>
						<fx:Object code="dg"
								   label="Direct grade"/>
						<fx:Object code="ag"
								   label="Accumulative grading"/>
						<fx:Object code="rg"
								   label="Rubric"/>
					</s:ArrayList>
				</s:DropDownList>
			</s:FormItem>
		</s:Form>
	</s:BorderContainer>
	<s:HGroup width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle">
		<s:Button id="saveButton"
				  label="{resourceManager.getString('myResources','SAVE_AND_RETURN_TO_COURSE')}"
				  click="saveAssignmentClickHandler(event)"
				  buttonMode="true"
				  styleName="btn-success"/>

		<s:Button id="cancelButton"
				  label="{resourceManager.getString('myResources','CANCEL')}"
				  click="cancelAssignmentClickHandler(event)"
				  buttonMode="true"
				  styleName="btn-default"/>

	</s:HGroup>
</s:VGroup>
