<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="modules.exercise.view.*"
		  paddingBottom="16"
		  paddingLeft="16"
		  paddingRight="16"
		  paddingTop="16"
		  width="100%"
		  implements="modules.IPinnedGroupInterface"
		  creationComplete="onComplete(event)"
		  xmlns:components="components.*">

	<fx:Script>
		<![CDATA[
			import control.URLManager;

			import model.DataModel;

			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;

			import spark.events.IndexChangeEvent;


			[Bindable]
			private var _peerEvaluation:Boolean;
			[Bindable]
			private var _customRubric:Boolean;

			private var _model:DataModel=DataModel.getInstance();

			private var commitOnly:Boolean;
			private var useWeakReference:Boolean;
			private var cw1:ChangeWatcher;

			protected function onComplete(event:FlexEvent):void
			{
				initTimeDropdowns();
				cw1=BindingUtils.bindSetter(assignmentDataRetrieved, _model, 'assignmentDataRetrieved', commitOnly, useWeakReference);
			}

			public function resetGroup():void
			{
				//Remove any data stored in the model
			}

			public function unpinGroup():void
			{
				if (cw1)
					cw1.unwatch();
				cw1=null;

				this.removeEventListener(FlexEvent.CREATION_COMPLETE, onComplete);
			}

			protected function initTimeDropdowns():void
			{
				var hours:ArrayCollection=new ArrayCollection();
				var minutes:ArrayCollection=new ArrayCollection();
				var i:int;

				for (i=0; i < 24; i++)
				{
					hours.addItem(zeroPad(i, 2));
				}
				for (i=0; i < 60; i+=5)
				{
					minutes.addItem(zeroPad(i, 2));
				}

				openSubmissionHour.dataProvider=hours;
				openSubmissionMinute.dataProvider=minutes;
				submissionDeadlineHour.dataProvider=hours;
				submissionDeadLineMinute.dataProvider=minutes;

				openAssessmentHour.dataProvider=hours;
				openAssessmentMinute.dataProvider=minutes;
				assessmentDeadlineHour.dataProvider=hours;
				assessmentDeadlineMinute.dataProvider=minutes;

				//testEDL.setLo

			}

			public function zeroPad(number:int, width:int):String
			{
				var ret:String="" + number;
				while (ret.length < width)
					ret="0" + ret;
				return ret;
			}

			protected function assignmentDataRetrieved(value:Boolean):void
			{

			}

			protected function pickExerciseHandler(event:MouseEvent):void
			{
				//Save current form data as a draft and keep in session to come back to it when picking an exercise
				URLManager.getInstance().redirect('/exercises');
			}

			protected function peerassessmentchoose_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub

			}

			protected function defaultRubric_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub

			}

			protected function saveAssignmentClickHandler(event:MouseEvent):void
			{

			}

			protected function cancelAssignmentClickHandler(event:MouseEvent):void
			{
				var lasturl:String=URLManager.getInstance().getLastURL();
				trace("LastURL is: " + URLManager.getInstance().getLastURL());
				if (lasturl)
					URLManager.getInstance().redirect(lasturl);
				else
					URLManager.getInstance().redirect('/home');
			}

			protected function dateChangeHandler(event:CalendarLayoutChangeEvent):void
			{
				var newDate:Date=DatePicker(event.target).selectedDate;
				trace(newDate.toString());
			}
		]]>
	</fx:Script>

	<s:Label text="{resourceManager.getString('myResources','ADD_ASSIGNMENT')}"
			 styleName="h2"/>

	<s:BorderContainer id="container"
					   styleName="lightBorderContainer"
					   width="100%">

		<s:layout>
			<s:VerticalLayout paddingBottom="16"
							  paddingTop="16"
							  paddingLeft="16"
							  paddingRight="16"/>
		</s:layout>

		<s:Form>

			<s:FormHeading label="Availability"/>
			<s:FormItem label="Open for submissions from">
				<s:HGroup width="100%"
						  verticalAlign="middle">
					<components:DatePicker id="openSubmissionDate"
										   change="dateChangeHandler(event)"/>
					<s:DropDownList id="openSubmissionHour"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openSubmissionMinute"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="Submission deadline">
				<s:HGroup width="100%">
					<mx:DateField id="submissionDeadlineDate"/>
					<s:DropDownList id="submissionDeadlineHour"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="submissionDeadLineMinute"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
				</s:HGroup>
			</s:FormItem>

			<s:FormItem label="Open for assessment from">
				<s:HGroup width="100%">
					<mx:DateField id="openAssessmentDate"/>
					<s:DropDownList id="openAssessmentHour"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="openAssessmentMinute"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="Deadline for assessment">
				<s:HGroup>
					<mx:DateField id="assessmentDeadlineDate"/>
					<s:DropDownList id="assessmentDeadlineHour"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
					<s:DropDownList id="assessmentDeadlineMinute"
									skinClass="skins.BootstrapDropDownList"
									cornerRadius="3"
									borderColor="0xcccccc"
									requireSelection="true"/>
				</s:HGroup>
			</s:FormItem>

			<s:FormHeading label="Exercise"/>
			<s:BorderContainer id="exercisePickArea"
							   borderColor="#E0E0E0"
							   borderAlpha=".85"
							   backgroundAlpha="0">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center"
									  verticalAlign="middle"
									  paddingBottom="8"
									  paddingLeft="8"
									  paddingRight="8"
									  paddingTop="8"/>
				</s:layout>
				<s:Button id="pickExerciseBtn"
						  label="Pick an exercise"
						  styleName="btn-primary"
						  buttonMode="true"
						  click="pickExerciseHandler(event)"/>
				<view:ExerciseItemRenderer/>
			</s:BorderContainer>
			<s:FormHeading label="Assessment settings"/>
			<s:FormItem label="Assessment type">
				<s:DropDownList id="assessmentType"
								selectedIndex="0"
								change="peerassessmentchoose_changeHandler(event)">
					<s:ArrayList>
						<fx:Object code="ia"
								   label="Instructor assessment"/>
						<fx:Object code="pa"
								   label="Peer assessment"/>
					</s:ArrayList>
				</s:DropDownList>
			</s:FormItem>
			<s:FormItem label="Self-assessment">
				<s:CheckBox id="selfassessmentchoose"
							change="peerassessmentchoose_changeHandler(event)">
				</s:CheckBox>
			</s:FormItem>
			<s:FormHeading label="Grading settings"/>
			<s:FormItem label="Grade type">
				<s:DropDownList id="gradeType"
								selectedIndex="0">
					<s:ArrayList>
						<fx:Object code="dg"
								   label="Direct grade"/>
						<fx:Object code="ag"
								   label="Accumulative grading"/>
						<fx:Object code="rg"
								   label="Rubric"/>
					</s:ArrayList>
				</s:DropDownList>
			</s:FormItem>
		</s:Form>
	</s:BorderContainer>
	<s:HGroup width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle">
		<s:Button id="saveButton"
				  label="{resourceManager.getString('myResources','SAVE_AND_RETURN')}"
				  click="saveAssignmentClickHandler(event)"
				  buttonMode="true"
				  styleName="btn-success"/>

		<s:Button id="cancelButton"
				  label="{resourceManager.getString('myResources','CANCEL')}"
				  click="cancelAssignmentClickHandler(event)"
				  buttonMode="true"
				  styleName="btn-default"/>

	</s:HGroup>
</s:VGroup>
