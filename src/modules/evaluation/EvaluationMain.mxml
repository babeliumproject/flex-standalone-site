<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:autoEvaluation="modules.autoevaluation.*"
		  xmlns:common="view.common.*"
		  xmlns:evaluation="modules.evaluation.*"
		  xmlns:videoPlayer="modules.videoPlayer.*"
		  paddingBottom="8"
		  verticalAlign="top"
		  
		  width="100%"
		  creationComplete="completeHandler()">

	<fx:Script>
		<![CDATA[
			import commands.cuepointManager.RecordingOtherRoleCommand;
			import commands.cuepointManager.ShowHideSubtitleCommand;
			import commands.cuepointManager.StartRecordingSelectedRoleCommand;
			import commands.cuepointManager.StopRecordingSelectedRoleCommand;

			import control.BabeliaBrowserManager;
			import control.CuePointManager;

			import events.*;

			import model.DataModel;

			import modules.search.VideoPaginator;
			import modules.videoPlayer.events.VideoPlayerEvent;
			import modules.videoPlayer.events.babelia.StreamEvent;
			import modules.videoPlayer.events.babelia.VideoPlayerBabeliaEvent;

			import mx.collections.ArrayCollection;
			import mx.controls.Button;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;

			import view.common.CustomAlert;
			import view.common.TimeFormatter;

			import vo.CreditHistoryVO;
			import vo.CueObject;
			import vo.EvaluationVO;

			/**
			 * Constants
			 */
			private const EXERCISE_FOLDER:String=DataModel.getInstance().exerciseStreamsFolder;
			private const RESPONSE_FOLDER:String=DataModel.getInstance().responseStreamsFolder;
			private const EVALUATION_FOLDER:String=DataModel.getInstance().evaluationStreamsFolder;

			[Bindable]
			private var dataModel:DataModel=DataModel.getInstance();

			private var _cueManager:CuePointManager=CuePointManager.getInstance();
			private var _cueManagerReady:Boolean=false;

			private var _timeFormatter:TimeFormatter=new TimeFormatter();

			[Bindable]
			private var _streamSource:String=DataModel.getInstance().streamingResourcesPath;

			[Bindable]
			public var thumbUrl:String=DataModel.getInstance().thumbURL;

			[Bindable]
			private var _exerciseTitle:String=ResourceManager.getInstance().getString('myResources', 'LABEL_EXERCISE_TITLE');
			[Bindable]
			private var _evaluationSelected:Boolean=false;

			private var _videoPlayerReady:Boolean=false;

			private var _exerciseId:uint;
			private var _exerciseName:String;

			private var _responseId:uint;
			private var _responseName:String;
			private var _responseCharacterName:String;
			private var _responseSubtitleId:uint;
			private var _responseAddingDate:String;
			private var _responseUserName:String;

			private var _userName:String;

			private var _videoCommentName:String;

			/**
			 *  Pagination control variables
			 */

			private var _currentPageWaitingForAssessment:uint=1;
			private var _currentPageAssessedByCurrentUser:uint=1;
			private var _currentPageAssessedToCurrentUser:uint=1;

			/**
			 *  Back-end data holders
			 */
			[Bindable]
			private var assessmentDetailList:ArrayCollection;
			[Bindable]
			private var waitingForAssessmentList:ArrayCollection;
			[Bindable]
			private var assessedToCurrentUserList:ArrayCollection;
			[Bindable]
			private var assessedByCurrentUserList:ArrayCollection;

			/**
			 *  Visual component declaration
			 */

			//Empty while we have mixed visuals and code

			/**
			 * Constructor
			 */
			public function completeHandler():void
			{
				_timeFormatter.outputMilliseconds=false;

				refreshEvaluationLists();

				setupVideoPlayer();
			}

			private function setupVideoPlayer():void
			{
				VP.addEventListener(VideoPlayerEvent.CONNECTED, onVideoPlayerReady);
				VP.addEventListener(VideoPlayerEvent.VIDEO_FINISHED_PLAYING, evaluationRatingBox.onResponseFinished);
				VP.addEventListener(VideoPlayerBabeliaEvent.SECONDSTREAM_FINISHED_PLAYING, evaluationRatingBox.onResponseFinished);
			}

			private function onVideoPlayerReady(e:VideoPlayerEvent):void
			{
				_videoPlayerReady=true;
				VP.stopVideo();
			}

			private function set waitingAssessmentRetrievedHandler(value:Boolean):void
			{
				var waDataprovider:ArrayCollection=dataModel.waitingForAssessmentData;
				//waitingAssessmentDataGrid.rowCount=waDataprovider.length;
				waitingForAssessmentList=waDataprovider;
				createPagination(waitingAssessmentDataGrid, waitingForAssessmentList, _currentPageWaitingForAssessment, paginationWaitingAssessment, navigateToPageWaitingAssessment);
				allDataReceived();
			}

			private function set assessedByCurrentUserRetrievedHandler(value:Boolean):void
			{
				var abcuDataprovider:ArrayCollection=dataModel.assessedByCurrentUserData;
				//assessedByCurrentUserDataGrid.rowCount=abcuDataprovider.length;
				assessedByCurrentUserList=abcuDataprovider;
				createPagination(assessedByCurrentUserDataGrid, assessedByCurrentUserList, _currentPageAssessedByCurrentUser, paginationAssessedByCurrentUser, navigateToPageAssessedByCurrentUser);
				allDataReceived();
			}

			private function set assessedToCurrentUserRetrievedHandler(value:Boolean):void
			{
				var atcuDataprovider:ArrayCollection=dataModel.assessedToCurrentUserData;
				//assessedToCurrentUserDataGrid.rowCount=atcuDataprovider.length;
				assessedToCurrentUserList=atcuDataprovider;
				allDataReceived();
			}

			private function set detailsOfAssessmentRetrievedHandler(value:Boolean):void
			{
				var doaDataprovider:ArrayCollection=dataModel.detailsOfAssessedResponseData;
				assessmentDetailDataGrid.rowCount=doaDataprovider.length;
				assessmentDetailList=doaDataprovider;
			}

			private function set assessmentSavedHandler(value:Boolean):void
			{
				evaluationRatingBox.includeInLayout=false;
				evaluationRatingBox.visible=false;

				resetVideoPlayer();

				refreshEvaluationLists();
			}

			private function refreshEvaluationLists():void
			{
				if (dataModel.isLoggedIn)
				{
					_userName=dataModel.loggedUser.name;
					new EvaluationEvent(EvaluationEvent.GET_RESPONSES_WAITING_ASSESSMENT).dispatch();
					new EvaluationEvent(EvaluationEvent.GET_RESPONSES_ASSESSED_TO_CURRENT_USER).dispatch();
					new EvaluationEvent(EvaluationEvent.GET_RESPONSES_ASSESSED_BY_CURRENT_USER).dispatch();
				}
				else
				{
					_userName='';
					waitingForAssessmentList=new ArrayCollection();
					assessedToCurrentUserList=new ArrayCollection();
					assessedByCurrentUserList=new ArrayCollection();
					assessmentDetailList=new ArrayCollection();
					createPagination(waitingAssessmentDataGrid, waitingForAssessmentList, _currentPageWaitingForAssessment, paginationWaitingAssessment, navigateToPageWaitingAssessment);
					createPagination(assessedByCurrentUserDataGrid, assessedByCurrentUserList, _currentPageAssessedByCurrentUser, paginationAssessedByCurrentUser, navigateToPageAssessedByCurrentUser);
				}
				assessmentsOfSelectedResponse.visible=false;
				evaluationRatingBox.includeInLayout=false;
				evaluationRatingBox.visible=false;
			}

			private function prepareEvaluation():void
			{
				// Prepare new video in VideoPlayer
				resetVideoPlayer();

				prepareCueManager();
			}

			private function resetCueManager():void
			{
				_cueManager.reset();
				VP.removeEventListener(StreamEvent.ENTER_FRAME, _cueManager.monitorCuePoints);
				_cueManager.removeEventListener(CueManagerEvent.SUBTITLES_RETRIEVED, onSubtitlesRetrieved);
			}

			private function prepareCueManager():void
			{
				_cueManager.addEventListener(CueManagerEvent.SUBTITLES_RETRIEVED, onSubtitlesRetrieved);
				_cueManager.setCuesFromSubtitleUsingId(_responseSubtitleId);
				//set cues from subtitle id retrieved from the list

				VP.removeEventListener(StreamEvent.ENTER_FRAME, _cueManager.monitorCuePoints);
				VP.addEventListener(StreamEvent.ENTER_FRAME, _cueManager.monitorCuePoints);
			}

			private function onSubtitlesRetrieved(e:CueManagerEvent):void
			{
				setupSimultaneousPlaybackCommands();

				VP.state=VideoPlayerBabelia.PLAY_BOTH_STATE;
				VP.videoSource=EXERCISE_FOLDER + '/' + _exerciseName;
				VP.secondSource=RESPONSE_FOLDER + '/' + _responseName;
				VP.addEventListener(VideoPlayerEvent.METADATA_RETRIEVED, onMetadataRetrieved);
				VP.refresh();
			}

			private function setupSimultaneousPlaybackCommands():void
			{
				var auxList:ArrayCollection=_cueManager.getCuelist();

				if (auxList.length <= 0)
					return;

				for each (var cueobj:CueObject in auxList)
				{
					if (cueobj.getRole() != _responseCharacterName)
					{
						cueobj.setStartCommand(new RecordingOtherRoleCommand(cueobj.getText(), cueobj.getRole(), cueobj.getEndTime() - cueobj.getStartTime(), VP));

						cueobj.setEndCommand(new ShowHideSubtitleCommand(null, VP));
					}
					else
					{
						cueobj.setStartCommand(new StartRecordingSelectedRoleCommand(cueobj.getText(), _responseCharacterName, cueobj.getEndTime() - cueobj.getStartTime(), VP));

						cueobj.setEndCommand(new StopRecordingSelectedRoleCommand(VP));
					}
				}

				_cueManagerReady=true;
			}

			private function showArrows():void
			{
				VP.setArrows(_cueManager.cues2rolearray(), _responseCharacterName);
				VP.arrows=true;
			}

			private function hideArrows():void
			{
				VP.arrows=false;
				VP.removeArrows();
			}

			private function onMetadataRetrieved(e:Event):void
			{
				showArrows();
			}

			/*
			   private function viewGraphicClickHandler():void
			   {
			   EvaluationChartPopUp.responseId=_responseId;
			   var evaluationChartPopUp:EvaluationChartPopUp=EvaluationChartPopUp(PopUpManager.createPopUp(this, EvaluationChartPopUp, true));
			   PopUpManager.centerPopUp(evaluationChartPopUp);
			 }*/

			private function allDataReceived():void
			{
				if (waitingForAssessmentList != null && assessedByCurrentUserList != null && assessedByCurrentUserList != null)
				{
					onURLChange="Data";
				}
			}

			private function waitingAssessmentChangeHandler(event:Event):void
			{
				var selectedItem:EvaluationVO=(DataGrid(event.target).selectedItem) as EvaluationVO;

				_exerciseId=selectedItem.exerciseId;
				_exerciseName=selectedItem.exerciseName;
				_exerciseTitle=selectedItem.exerciseTitle;

				_responseId=selectedItem.responseId;
				_responseName=selectedItem.responseFileIdentifier;
				_responseSubtitleId=selectedItem.responseSubtitleId;
				_responseCharacterName=selectedItem.responseCharacterName;
				_responseAddingDate=selectedItem.responseAddingDate;
				_responseUserName=selectedItem.responseUserName;

				//Retrieve the associated subtitles and prepare the videoplayer
				prepareEvaluation();
				_evaluationSelected=true;

				//Visualize the video player component
				videoPlayerBox.includeInLayout=true;
				videoPlayerBox.visible=true;

				//Prepare the component in which the user leaves the assessment
				evaluationRatingBox.resetEvaluationButtonClickHandler(null);
				evaluationRatingBox.responseData(_responseId, _userName, _responseName, _responseAddingDate, _responseUserName, _exerciseTitle);
				evaluationRatingBox.includeInLayout=true;
				evaluationRatingBox.visible=true;


				var urlResponseName:String=_responseName.replace("audio/", "");

				BabeliaBrowserManager.getInstance().updateURL(BabeliaBrowserManager.index2fragment(ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX), BabeliaBrowserManager.EVALUATE, urlResponseName);

			}

			private function assessedToCurrentUserChangeHandler(event:Event):void
			{
				var selectedItem:EvaluationVO=(DataGrid(event.target).selectedItem) as EvaluationVO;
				_exerciseId=selectedItem.exerciseId;
				_exerciseName=selectedItem.exerciseName;
				_responseCharacterName=selectedItem.responseCharacterName;
				_responseId=selectedItem.responseId;
				_responseName=selectedItem.responseFileIdentifier;
				_responseSubtitleId=selectedItem.responseSubtitleId;

				_exerciseTitle=selectedItem.exerciseTitle;
				_evaluationSelected=true;



				//Retrieve the associated subtitles and prepare the videoplayer
				prepareEvaluation();

				//Visualize the video player component
				videoPlayerBox.includeInLayout=true;
				videoPlayerBox.visible=true;

				//overallAverageRating.text=resourceManager.getString('myResources', 'AVG') + ": " + selectedItem.overallScoreAverage;

				assessmentsOfSelectedResponse.visible=true;

				new EvaluationEvent(EvaluationEvent.DETAILS_OF_ASSESSED_RESPONSE, null, _responseId).dispatch();

				//Get the autoevaluation info if available
				computerEvaluation.setResponseID(_responseId);

				var urlResponseName:String=_responseName.replace("audio/", "");

				BabeliaBrowserManager.getInstance().updateURL(BabeliaBrowserManager.index2fragment(ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX), BabeliaBrowserManager.REVISE, urlResponseName);
			}

			private function assessedByCurrentUserChangeHandler(event:Event):void
			{
				var selectedItem:EvaluationVO=(DataGrid(event.target).selectedItem) as EvaluationVO;
				_exerciseId=selectedItem.exerciseId;
				_exerciseName=selectedItem.exerciseName;
				_responseCharacterName=selectedItem.responseCharacterName;
				_responseId=selectedItem.responseId;
				_responseName=selectedItem.responseFileIdentifier;
				_responseSubtitleId=selectedItem.responseSubtitleId;

				_exerciseTitle=selectedItem.exerciseTitle;
				_evaluationSelected=true;

				//Retrieve the associated subtitles and prepare the videoplayer
				prepareEvaluation();

				//Visualize the video player component
				videoPlayerBox.includeInLayout=true;
				videoPlayerBox.visible=true;

				var urlResponseName:String=_responseName.replace("audio/", "");

				BabeliaBrowserManager.getInstance().updateURL(BabeliaBrowserManager.index2fragment(ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX), BabeliaBrowserManager.VIEW, urlResponseName);
			}

			private function assessmentDetailChangeHandler(event:Event):void
			{
				var selectedItem:EvaluationVO=(DataGrid(event.target).selectedItem) as EvaluationVO;
				if (selectedItem.evaluationVideoFileIdentifier)
				{
					VP.pauseVideo();
					_videoCommentName=selectedItem.evaluationVideoFileIdentifier;


					//EvaluationVideoCommentWatch.videoSource=EVALUATION_FOLDER + '/' + _videoCommentName;
					var watchEvaluationVideoComment:EvaluationVideoCommentWatch=EvaluationVideoCommentWatch(PopUpManager.createPopUp(this, EvaluationVideoCommentWatch, true));
					watchEvaluationVideoComment.videoSource=EVALUATION_FOLDER + '/' + _videoCommentName;
					PopUpManager.centerPopUp(watchEvaluationVideoComment);
					assessmentDetailDataGrid.selectedItem=null;
				}
			}

			private function set showAutoevalTab(val:Boolean):void
			{
				if (evaluationTypeNavigator != null)
				{
					//Show the autoevaluation tab if autoevaluation is available, else hide it
					evaluationTypeNavigator.getTabAt(1).visible=DataModel.getInstance().autoevaluationAvailable;
					evaluationTypeNavigator.getTabAt(1).enabled=DataModel.getInstance().autoevaluationAvailable;
					evaluationTypeNavigator.getTabAt(1).includeInLayout=DataModel.getInstance().autoevaluationAvailable;
					evaluationTypeNavigator.selectedIndex=0;
				}
				else
					DataModel.getInstance().autoevaluationAvailable=true;
			}

			private function durationLabelFunction(item:Object, column:DataGridColumn):String
			{
				if (item)
					return _timeFormatter.format(item.exerciseDuration);
				else
					return "";
			}

			private function resetVideoPlayer():void
			{
				VP.endVideo(); // Stop video
				VP.setSubtitle(""); // Clear subtitles if any
				VP.videoSource=""; // Reset video source

				hideArrows(); // Hide arrows

				VP.state=VideoPlayerBabelia.PLAY_STATE; //Reset the player window to display only the exercise

				resetCueManager();

				//Hide the video player until an exercise is selected
				videoPlayerBox.includeInLayout=false;
				videoPlayerBox.visible=false;
			}

			private function onEvaluationTabChange(event:IndexChangedEvent):void
			{
				var newIndex:uint=event.newIndex;
				switch (newIndex)
				{
					case evaluationOptionsViewStack.getChildIndex(waitingAssessmentBox):
						assessedToCurrentUserListAndPagination.assessedToCurrentUserListTable.selectedItem=null;
						assessedByCurrentUserDataGrid.selectedItem=null;
						assessmentsOfSelectedResponse.visible=false;

						_currentPageWaitingForAssessment=1;
						_currentPageAssessedByCurrentUser=1;
						_currentPageAssessedToCurrentUser=1;
						assessedToCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedToCurrentUser;
						createPagination(waitingAssessmentDataGrid, waitingForAssessmentList, _currentPageWaitingForAssessment, paginationWaitingAssessment, navigateToPageWaitingAssessment);
						createPagination(assessedByCurrentUserDataGrid, assessedByCurrentUserList, _currentPageAssessedByCurrentUser, paginationAssessedByCurrentUser, navigateToPageAssessedByCurrentUser);

						resetVideoPlayer();

						break;
					case evaluationOptionsViewStack.getChildIndex(assessedToCurrentUserBox):
						waitingAssessmentDataGrid.selectedItem=null;
						assessedByCurrentUserDataGrid.selectedItem=null;
						evaluationRatingBox.includeInLayout=false;
						evaluationRatingBox.visible=false;

						_currentPageWaitingForAssessment=1;
						_currentPageAssessedByCurrentUser=1;
						_currentPageAssessedToCurrentUser=1;
						assessedToCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedToCurrentUser;
						createPagination(waitingAssessmentDataGrid, waitingForAssessmentList, _currentPageWaitingForAssessment, paginationWaitingAssessment, navigateToPageWaitingAssessment);
						createPagination(assessedByCurrentUserDataGrid, assessedByCurrentUserList, _currentPageAssessedByCurrentUser, paginationAssessedByCurrentUser, navigateToPageAssessedByCurrentUser);

						resetVideoPlayer();

						break;
					case evaluationOptionsViewStack.getChildIndex(assessedByCurrentUserBox):
						waitingAssessmentDataGrid.selectedItem=null;
						assessedToCurrentUserListAndPagination.assessedToCurrentUserListTable.selectedItem=null;
						assessmentsOfSelectedResponse.visible=false;
						evaluationRatingBox.includeInLayout=false;
						evaluationRatingBox.visible=false;

						_currentPageWaitingForAssessment=1;
						_currentPageAssessedByCurrentUser=1;
						_currentPageAssessedToCurrentUser=1;
						assessedToCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedToCurrentUser;
						createPagination(waitingAssessmentDataGrid, waitingForAssessmentList, _currentPageWaitingForAssessment, paginationWaitingAssessment, navigateToPageWaitingAssessment);
						createPagination(assessedByCurrentUserDataGrid, assessedByCurrentUserList, _currentPageAssessedByCurrentUser, paginationAssessedByCurrentUser, navigateToPageAssessedByCurrentUser);

						resetVideoPlayer();

						break;
					default:
						break;
				}
			}

			private function set userAuthenticationHandler(value:Boolean):void
			{
				refreshEvaluationLists();

				resetVideoPlayer();

				evaluationOptionsViewStack.selectedChild=waitingAssessmentBoxNavContent;
			}

			private function set onTabChange(value:Boolean):void
			{
				evaluationRatingBox.includeInLayout=false;
				evaluationRatingBox.visible=false;
				assessmentsOfSelectedResponse.visible=false;

				// Remove selected items
				waitingAssessmentDataGrid.selectedIndex=-1;
				assessedByCurrentUserDataGrid.selectedIndex=-1;
				assessedToCurrentUserListAndPagination.assessedToCurrentUserListTable.selectedItem=-1;

				//Return the pagination controls to the first page
				_currentPageWaitingForAssessment=1;
				_currentPageAssessedByCurrentUser=1;
				_currentPageAssessedToCurrentUser=1;

				assessedToCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedToCurrentUser;
				createPagination(waitingAssessmentDataGrid, waitingForAssessmentList, _currentPageWaitingForAssessment, paginationWaitingAssessment, navigateToPageWaitingAssessment);
				createPagination(assessedByCurrentUserDataGrid, assessedByCurrentUserList, _currentPageAssessedByCurrentUser, paginationAssessedByCurrentUser, navigateToPageAssessedByCurrentUser);

				resetVideoPlayer();

				evaluationOptionsViewStack.selectedChild=waitingAssessmentBoxNavContent;
			}

			public function createPagination(targetDatagrid:DataGrid, dataProvider:ArrayCollection, currentPageIndicator:uint, paginationContainer:HGroup, pageClickHandler:Function):void
			{
				VideoPaginator.createPaginationMenu(dataProvider.length, DataModel.getInstance().pageSize, currentPageIndicator, DataModel.getInstance().numberOfPagesNav, paginationContainer, pageClickHandler);
				refreshDataProvider(targetDatagrid, dataProvider, currentPageIndicator);
			}

			public function refreshDataProvider(targetDatagrid:DataGrid, dataProvider:ArrayCollection, currentPageIndicator:uint):void
			{
				var current:int=currentPageIndicator - 1;
				var pageSize:int=DataModel.getInstance().pageSize;
				var dataTemp:ArrayCollection=new ArrayCollection(dataProvider.source.slice((current * pageSize), (current * pageSize) + pageSize));
				targetDatagrid.rowCount=dataTemp.length;
				targetDatagrid.dataProvider=dataTemp;
			}

			private function navigateToPageWaitingAssessment(event:MouseEvent):void
			{
				_currentPageWaitingForAssessment=int((event.target as Button).id);
				createPagination(waitingAssessmentDataGrid, waitingForAssessmentList, _currentPageWaitingForAssessment, paginationWaitingAssessment, navigateToPageWaitingAssessment);
			}

			private function navigateToPageAssessedByCurrentUser(event:MouseEvent):void
			{
				_currentPageAssessedByCurrentUser=int((event.target as Button).id);
				createPagination(assessedByCurrentUserDataGrid, assessedByCurrentUserList, _currentPageAssessedByCurrentUser, paginationAssessedByCurrentUser, navigateToPageAssessedByCurrentUser);
			}

			private function set onURLChange(value:Object):void
			{
				var browser:BabeliaBrowserManager=BabeliaBrowserManager.getInstance();

				if (browser.moduleClass != ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX)
					return;

				if (value == null)
					return;

				//	if (!dataModel.isLoggedIn)
				//	{
				//new ViewChangeEvent(ViewChangeEvent.VIEW_EVALUATION_MODULE).dispatch();
				//		return;
				//	}


				if (waitingForAssessmentList == null || assessedByCurrentUserList == null || assessedToCurrentUserList == null)
				{
					//new ViewChangeEvent(ViewChangeEvent.VIEW_EVALUATION_MODULE).dispatch();
					return;
				}

				switch (browser.actionFragment)
				{
					case BabeliaBrowserManager.EVALUATE:
						if (browser.targetFragment != '')
						{
							var tmpEvaluate:EvaluationVO;
							for each (var evEvaluate:EvaluationVO in waitingForAssessmentList)
							{
								var evaluateStripped:String=evEvaluate.responseFileIdentifier.replace("audio/", "");

								if (evaluateStripped == browser.targetFragment)
								{
									tmpEvaluate=evEvaluate;
									break;
								}
							}
							if (tmpEvaluate)
								callLater(goToSelectedEvaluate, [tmpEvaluate]);
						}
						break;

					case BabeliaBrowserManager.REVISE:
						if (browser.targetFragment != '')
						{
							evaluationOptionsViewStack.selectedChild=assessedToCurrentUserBoxNavContent;
							var tmpRevise:EvaluationVO;
							for each (var evRevise:EvaluationVO in assessedToCurrentUserList)
							{
								var reviseStripped:String=evRevise.responseFileIdentifier.replace("audio/", "");

								if (reviseStripped == browser.targetFragment)
								{
									tmpRevise=evRevise;
									break;
								}
							}
							if (tmpRevise)
								callLater(goToSelectedRevise, [tmpRevise]);
						}
						break;

					case BabeliaBrowserManager.VIEW:

						if (browser.targetFragment != '')
						{
							var tmpView:EvaluationVO;
							for each (var evView:EvaluationVO in assessedByCurrentUserList)
							{
								var viewStripped:String=evView.responseFileIdentifier.replace("audio/", "");
								if (viewStripped == browser.targetFragment)
								{
									tmpView=evView;
									break;
								}
							}
							if (tmpView != null)
								callLater(goToSelectedView, [tmpView]);
						}
						break;
					default:
						new ViewChangeEvent(ViewChangeEvent.VIEW_EVALUATION_MODULE).dispatch();
						break;
				}
			}

			private function goToSelectedEvaluate(tmpEvaluate:EvaluationVO):void
			{
				//Go to the speficied tab and dispatch a change event
				evaluationOptionsViewStack.selectedChild=waitingAssessmentBoxNavContent;
				waitingAssessmentDataGrid.selectedItem=tmpEvaluate;
				waitingAssessmentDataGrid.dispatchEvent(new ListEvent(ListEvent.CHANGE));
			}

			private function goToSelectedView(tmpView:EvaluationVO):void
			{
				//Go to the speficied tab and dispatch a change event
				evaluationOptionsViewStack.selectedChild=assessedByCurrentUserBoxNavContent;
				assessedByCurrentUserDataGrid.selectedItem=tmpView;
				assessedByCurrentUserDataGrid.dispatchEvent(new ListEvent(ListEvent.CHANGE));
			}

			private function goToSelectedRevise(tmpRevise:EvaluationVO):void
			{
				//Go to the speficied tab and dispatch a change event
				evaluationOptionsViewStack.selectedChild=assessedToCurrentUserBoxNavContent;
				assessedToCurrentUserListAndPagination.assessedToCurrentUserListTable.selectedItem=tmpRevise;
				assessedToCurrentUserListAndPagination.assessedToCurrentUserListTable.dispatchEvent(new ListEvent(ListEvent.CHANGE));

			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().autoevaluationAvailable}"
				destination="showAutoevalTab"/>
	<fx:Binding source="{DataModel.getInstance().isLoggedIn}"
				destination="userAuthenticationHandler"/>
	<fx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="onTabChange"/>

	<fx:Binding source="{dataModel.waitingForAssessmentDataRetrieved}"
				destination="waitingAssessmentRetrievedHandler"/>
	<fx:Binding source="{dataModel.assessedToCurrentUserDataRetrieved}"
				destination="assessedToCurrentUserRetrievedHandler"/>
	<fx:Binding source="{dataModel.assessedByCurrentUserDataRetrieved}"
				destination="assessedByCurrentUserRetrievedHandler"/>
	<fx:Binding source="{dataModel.detailsOfAssessedResponseDataRetrieved}"
				destination="detailsOfAssessmentRetrievedHandler"/>

	<fx:Binding source="{dataModel.addAssessmentRetrieved}"
				destination="assessmentSavedHandler"/>


	<fx:Binding source="{BabeliaBrowserManager.getInstance().targetFragment}"
				destination="onURLChange"/>

	<s:VGroup styleName="sectionInfoBox"
			  width="100%">
		<s:Label text="{resourceManager.getString('myResources','LABEL_EVALUATIONS')}"
				 styleName="sectionInfoTitleLabel"/>
		<mx:Text text="Enter section description here."/>
		<s:HGroup horizontalAlign="right"
				  width="100%">
			<mx:TabBar dataProvider="{evaluationOptionsViewStack}"/>
		</s:HGroup>
	</s:VGroup>

	<s:VGroup id="videoPlayerBox"
			  width="100%"
			  includeInLayout="false"
			  visible="false">
		<s:Label id="exerciseTitle"
				 text="{_exerciseTitle}"
				 width="100%"
				 styleName="sectionTitleLabel"/>
		<s:HGroup width="100%">
			<!-- w/h = 16:10 -->
			<videoPlayer:VideoPlayerBabelia id="VP"
											autoPlay="true"
											skin="white"
											seek="false"
											subtitles="true"
											autoScale="false"
											arrows="false"
											subtitlingControls="false"
											width="500"
											height="{Math.floor(VP.width * 10 / 16)}"
											streamSource="{_streamSource}"
											controlsEnabled="{_evaluationSelected}"/>
			<evaluation:EvaluationRatingBox id="evaluationRatingBox"
											width="100%"/>
		</s:HGroup>
	</s:VGroup>
	<mx:Spacer width="20"/>

	<s:VGroup width="100%"
			  height="100%"
			  paddingLeft="4"
			  paddingRight="4"
			  paddingBottom="4">

		<mx:ViewStack id="evaluationOptionsViewStack"
					  width="100%"
					  height="100%"
					  creationPolicy="all"
					  resizeToContent="true"
					  change="onEvaluationTabChange(event)">

			<s:NavigatorContent id="waitingAssessmentBoxNavContent" label="{resourceManager.getString('myResources','EPAITUGABEDAUDENAK')}">
				<s:VGroup id="waitingAssessmentBox"
						  horizontalAlign="center"
						  width="100%"
						  height="100%"
						  >
					<mx:DataGrid id="waitingAssessmentDataGrid"
								 dataProvider="{waitingForAssessmentList}"
								 width="100%"
								 horizontalScrollPolicy="off"
								 
								 verticalAlign="middle"
								 change="waitingAssessmentChangeHandler(event)">
						<mx:columns>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'JATORRIZKOA')}"
											   dataField="responseThumbnailUri"
											   width="{120*0.8}">
								<mx:itemRenderer>
									<fx:Component>
										<mx:Image height="{90*0.8}"
												  width="{120*0.8}"
												  source="{outerDocument.thumbUrl+'/'+data.responseThumbnailUri}"/>
									</fx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'OWNER')}"
											   dataField="responseUserName"/>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'IRAUPENA')}"
											   dataField="responseDuration"
											   labelFunction="{durationLabelFunction}"/>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'BALORAZIOKOP')}"
											   dataField="responseRatingAmount"/>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'SELECTEDCHAR')}"
											   dataField="responseCharacterName"
											   visible="false"/>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'DATE')}"
											   dataField="responseAddingDate"/>
						</mx:columns>
					</mx:DataGrid>
					<s:HGroup id="paginationWaitingAssessment"
							  width="100%"
							  horizontalAlign="left"
							  gap="2"/>
				</s:VGroup>
			</s:NavigatorContent>


			<s:NavigatorContent id="assessedToCurrentUserBoxNavContent" label="{resourceManager.getString('myResources','NIRIPAITUTAKOAK')}">
				<s:VGroup id="assessedToCurrentUserBox"
						  >
					<evaluation:AssessedToCurrentUserList id="assessedToCurrentUserListAndPagination"
														  dataProvider="{assessedToCurrentUserList}"
														  changeListener="{assessedToCurrentUserChangeHandler}"
														  width="100%"/>
					<mx:Spacer height="30"/>
					<!-- Panel to show details of one of the responses that have been evaluated to this user-->
					<s:HGroup id="assessmentsOfSelectedResponse"
							  width="100%"
							  height="100%">
						<mx:TabNavigator id="evaluationTypeNavigator"
										 creationPolicy="all"
										 width="100%"
										 paddingLeft="8"
										 paddingRight="8"
										 paddingTop="8"
										 paddingBottom="8"
										 resizeToContent="true">
							<s:NavigatorContent id="humanEvaluationNavContent" label="Human Evaluation">


								<s:VGroup id="humanEvaluation"
										  
										  width="100%"
										  height="100%"
										  >
									<!-- Commented for now
										 <s:HGroup>
										 <s:Label id="overallAverageRating"/>
										 <s:Button id="viewGraphicButton"
										 label="{resourceManager.getString('myResources', 'DISPLAYGRAPH')}"
										 click="viewGraphicClickHandler()"/>
										 </s:HGroup>
									-->

									<mx:DataGrid id="assessmentDetailDataGrid"
												 dataProvider="{assessmentDetailList}"
												 change="assessmentDetailChangeHandler(event)"
												 verticalAlign="middle"
												 
												 width="100%">
										<mx:columns>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'JUDGE')}"
															   dataField="userName"/>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'VALUATION')}"
															   dataField="overallScore"/>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources','LABEL_INTONATION_SCORE')}"
															   dataField="intonationScore"/>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources','LABEL_FLUENCY_SCORE')}"
															   dataField="fluencyScore"/>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources','LABEL_RHYTHM_SCORE')}"
															   dataField="rhythmScore"/>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources','LABEL_SPONTANEITY_SCORE')}"
															   dataField="spontaneityScore"/>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'DATE')}"
															   dataField="addingDate"/>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'COMMENTS')}"
															   dataField="comment"
															   width="160">
												<mx:itemRenderer>
													<fx:Component>
														<mx:Text text="{data.comment}"
																 width="160"/>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'VIDEOCOMMENT')}"
															   dataField="evaluationVideoFileIdentifier"/>
										</mx:columns>
									</mx:DataGrid>
								</s:VGroup>
							</s:NavigatorContent>
							<s:NavigatorContent id="computerEvaluationNavContent">
								<autoEvaluation:AutoevaluationPanel id="computerEvaluation"/>
							</s:NavigatorContent>
						</mx:TabNavigator>
					</s:HGroup>
				</s:VGroup>
			</s:NavigatorContent>

			<s:NavigatorContent id="assessedByCurrentUserBoxNavContent"  label="{resourceManager.getString('myResources', 'NIKEPAITUTAKOAK')}">
				<s:VGroup
						  id="assessedByCurrentUserBox">
					<mx:DataGrid width="100%"
								 id="assessedByCurrentUserDataGrid"
								 dataProvider="{assessedByCurrentUserList}"
								 change="assessedByCurrentUserChangeHandler(event)"
								 verticalAlign="middle"
								 >
						<mx:columns>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'JATORRIZKOA')}"
											   dataField="exerciseThumbnailUri"
											   width="{120*0.8}">
								<mx:itemRenderer>
									<fx:Component>
										<mx:Image height="{90*0.8}"
												  width="{120*0.8}"
												  source="{outerDocument.thumbUrl+'/'+data.responseThumbnailUri}"/>
									</fx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'GRABADOR')}"
											   dataField="responseUserName"/>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'IRAUPENA')}"
											   dataField="responseDuration"
											   labelFunction="{durationLabelFunction}"/>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'BALORAZIOKOP')}"
											   dataField="responseRatingAmount"/>
							<mx:DataGridColumn headerText="{resourceManager.getString('myResources', 'SELECTEDCHAR')}"
											   dataField="responseCharacterName"/>
						</mx:columns>
					</mx:DataGrid>
					<s:HGroup id="paginationAssessedByCurrentUser"
							  width="100%"
							  horizontalAlign="left"
							  gap="2"/>
				</s:VGroup>
			</s:NavigatorContent>

		</mx:ViewStack>
	</s:VGroup>


</s:VGroup>
