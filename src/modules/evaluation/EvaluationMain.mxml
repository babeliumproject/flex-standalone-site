<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:autoEvaluation="modules.autoevaluation.*"
		  xmlns:common="view.common.*"
		  xmlns:evaluation="modules.evaluation.*"
		  xmlns:videoPlayer="modules.videoPlayer.*"
		  width="100%"
		  minWidth="1000"
		  creationComplete="completeHandler()"
		  xmlns:skins="skins.*">

	<fx:Script>
		<![CDATA[
			import commands.cuepointManager.RecordingOtherRoleCommand;
			import commands.cuepointManager.ShowHideSubtitleCommand;
			import commands.cuepointManager.StartRecordingSelectedRoleCommand;
			import commands.cuepointManager.StopRecordingSelectedRoleCommand;
			
			import control.BabeliaBrowserManager;
			import control.CuePointManager;
			
			import events.*;
			
			import model.DataModel;
			
			import modules.autoevaluation.AutoevaluationPanel;
			import modules.main.VideoPaginator;
			import modules.videoPlayer.events.VideoPlayerEvent;
			import modules.videoPlayer.events.babelia.StreamEvent;
			import modules.videoPlayer.events.babelia.VideoPlayerBabeliaEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.DataGrid;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.Button;
			
			import view.common.CustomAlert;
			import view.common.TimeFormatter;
			
			import vo.CreditHistoryVO;
			import vo.CueObject;
			import vo.EvaluationVO;

			/**
			 * Constants
			 */
			private const EXERCISE_FOLDER:String=DataModel.getInstance().exerciseStreamsFolder;
			private const RESPONSE_FOLDER:String=DataModel.getInstance().responseStreamsFolder;
			private const EVALUATION_FOLDER:String=DataModel.getInstance().evaluationStreamsFolder;

			[Bindable]
			private var dataModel:DataModel=DataModel.getInstance();

			private var _cueManager:CuePointManager=CuePointManager.getInstance();
			private var _cueManagerReady:Boolean=false;

			private var _timeFormatter:TimeFormatter=new TimeFormatter();
			private var _creationComplete:Boolean=false;

			[Bindable]
			private var _streamSource:String=DataModel.getInstance().streamingResourcesPath;

			[Bindable]
			public var thumbUrl:String=DataModel.getInstance().thumbURL;

			[Bindable]
			private var _exerciseTitle:String=ResourceManager.getInstance().getString('myResources', 'LABEL_EXERCISE_TITLE');
			[Bindable]
			private var _evaluationSelected:Boolean=false;

			private var _videoPlayerReady:Boolean=false;

			private var _exerciseId:uint;
			private var _exerciseName:String;

			private var _responseId:uint;
			private var _responseName:String;
			private var _responseCharacterName:String;
			private var _responseSubtitleId:uint;
			private var _responseAddingDate:String;
			private var _responseUserName:String;

			private var _userName:String;

			private var _videoCommentName:String;

			/**
			 *  Pagination control variables
			 */

			private var _currentPageWaitingForAssessment:uint=1;
			private var _currentPageAssessedByCurrentUser:uint=1;
			private var _currentPageAssessedToCurrentUser:uint=1;

			/**
			 *  Back-end data holders
			 */
			[Bindable]
			private var assessmentDetailList:ArrayCollection;
			[Bindable]
			private var waitingForAssessmentList:ArrayCollection;
			[Bindable]
			private var assessedToCurrentUserList:ArrayCollection;
			[Bindable]
			private var assessedByCurrentUserList:ArrayCollection;

			/**
			 *  Visual component declaration
			 */

			private var computerEvaluation:AutoevaluationPanel=new AutoevaluationPanel();

			//Empty while we have mixed visuals and code

			/**
			 * Constructor
			 */
			public function completeHandler():void
			{
				_timeFormatter.outputMilliseconds=false;

				refreshEvaluationLists();

				setupVideoPlayer();

				_creationComplete=true;
			}

			private function setupVideoPlayer():void
			{
				VP.addEventListener(VideoPlayerEvent.CONNECTED, onVideoPlayerReady);
				VP.addEventListener(VideoPlayerEvent.VIDEO_FINISHED_PLAYING, evaluationRatingBox.onResponseFinished);
				VP.addEventListener(VideoPlayerBabeliaEvent.SECONDSTREAM_FINISHED_PLAYING, evaluationRatingBox.onResponseFinished);
			}

			private function onVideoPlayerReady(e:VideoPlayerEvent):void
			{
				_videoPlayerReady=true;
				VP.stopVideo();
			}

			private function set waitingAssessmentRetrievedHandler(value:Boolean):void
			{
				var waDataprovider:ArrayCollection=dataModel.waitingForAssessmentData;
				//waitingAssessmentDataGrid.rowCount=waDataprovider.length;
				waitingForAssessmentList=waDataprovider;
				allDataReceived();
			}

			private function set assessedByCurrentUserRetrievedHandler(value:Boolean):void
			{
				var abcuDataprovider:ArrayCollection=dataModel.assessedByCurrentUserData;
				//assessedByCurrentUserDataGrid.rowCount=abcuDataprovider.length;
				assessedByCurrentUserList=abcuDataprovider;
				allDataReceived();
			}

			private function set assessedToCurrentUserRetrievedHandler(value:Boolean):void
			{
				var atcuDataprovider:ArrayCollection=dataModel.assessedToCurrentUserData;
				//assessedToCurrentUserDataGrid.rowCount=atcuDataprovider.length;
				assessedToCurrentUserList=atcuDataprovider;
				allDataReceived();
			}

			private function set detailsOfAssessmentRetrievedHandler(value:Boolean):void
			{
				var doaDataprovider:ArrayCollection=dataModel.detailsOfAssessedResponseData;
				assessmentDetailList=doaDataprovider;
				buildEvaluationDetailNavigation();
			}

			private function buildEvaluationDetailNavigation():void
			{
				for each (var eval:EvaluationVO in assessmentDetailList)
				{
					var evaldataBox:EvaluationDetailBox=new EvaluationDetailBox();
					evaluationDetailViewStack.addChild(evaldataBox);
					evaldataBox.evaluationData=eval;
				}
				evaluationDetailViewStack.selectedIndex=0;
			}

			private function set assessmentSavedHandler(value:Boolean):void
			{
				if (_creationComplete)
				{
					evaluationRatingBox.includeInLayout=false;
					evaluationRatingBox.visible=false;

					resetVideoPlayer();

					refreshEvaluationLists();
				}
			}

			private function refreshEvaluationLists():void
			{
				if (dataModel.isLoggedIn)
				{
					_userName=dataModel.loggedUser.name;
					new EvaluationEvent(EvaluationEvent.GET_RESPONSES_WAITING_ASSESSMENT).dispatch();
					new EvaluationEvent(EvaluationEvent.GET_RESPONSES_ASSESSED_TO_CURRENT_USER).dispatch();
					new EvaluationEvent(EvaluationEvent.GET_RESPONSES_ASSESSED_BY_CURRENT_USER).dispatch();
				}
				else
				{
					_userName='';
					waitingForAssessmentList=new ArrayCollection();
					assessedToCurrentUserList=new ArrayCollection();
					assessedByCurrentUserList=new ArrayCollection();
					assessmentDetailList=new ArrayCollection();
				}
				assessmentsOfSelectedResponse.visible=false;
				evaluationRatingBox.includeInLayout=false;
				evaluationRatingBox.visible=false;
			}

			private function prepareEvaluation():void
			{
				// Prepare new video in VideoPlayer
				resetVideoPlayer();

				prepareCueManager();
			}

			private function resetCueManager():void
			{
				_cueManager.reset();
				VP.removeEventListener(StreamEvent.ENTER_FRAME, _cueManager.monitorCuePoints);
				_cueManager.removeEventListener(CueManagerEvent.SUBTITLES_RETRIEVED, onSubtitlesRetrieved);
			}

			private function prepareCueManager():void
			{
				_cueManager.addEventListener(CueManagerEvent.SUBTITLES_RETRIEVED, onSubtitlesRetrieved);
				_cueManager.setCuesFromSubtitleUsingId(_responseSubtitleId);
				//set cues from subtitle id retrieved from the list

				VP.removeEventListener(StreamEvent.ENTER_FRAME, _cueManager.monitorCuePoints);
				VP.addEventListener(StreamEvent.ENTER_FRAME, _cueManager.monitorCuePoints);
			}

			private function onSubtitlesRetrieved(e:CueManagerEvent):void
			{
				setupSimultaneousPlaybackCommands();

				VP.state=VideoPlayerBabelia.PLAY_BOTH_STATE;
				VP.videoSource=EXERCISE_FOLDER + '/' + _exerciseName;
				VP.secondSource=RESPONSE_FOLDER + '/' + _responseName;
				VP.addEventListener(VideoPlayerEvent.METADATA_RETRIEVED, onMetadataRetrieved);
				VP.refresh();
			}

			private function setupSimultaneousPlaybackCommands():void
			{
				var auxList:ArrayCollection=_cueManager.getCuelist();

				if (auxList.length <= 0)
					return;

				for each (var cueobj:CueObject in auxList)
				{
					if (cueobj.role != _responseCharacterName)
					{
						cueobj.setStartCommand(new RecordingOtherRoleCommand(cueobj, VP));

						cueobj.setEndCommand(new ShowHideSubtitleCommand(null, VP));
					}
					else
					{
						cueobj.setStartCommand(new StartRecordingSelectedRoleCommand(cueobj, VP));

						cueobj.setEndCommand(new StopRecordingSelectedRoleCommand(VP));
					}
				}

				_cueManagerReady=true;
			}

			private function showArrows():void
			{
				VP.setArrows(_cueManager.cues2rolearray(), _responseCharacterName);
				VP.arrows=true;
			}

			private function hideArrows():void
			{
				VP.arrows=false;
				VP.removeArrows();
			}

			private function onMetadataRetrieved(e:Event):void
			{
				showArrows();
			}

			private function allDataReceived():void
			{
				if (waitingForAssessmentList != null && assessedByCurrentUserList != null && assessedByCurrentUserList != null)
				{
					onURLChange="Data";
				}
			}

			private function waitingAssessmentChangeHandler(event:Event):void
			{
				var selectedItem:EvaluationVO=(DataGrid(event.target).selectedItem) as EvaluationVO;

				prepareWaitingAssessment(selectedItem);

				var urlResponseName:String=_responseName.replace("audio/", "");

				BabeliaBrowserManager.getInstance().updateURL(BabeliaBrowserManager.index2fragment(ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX), BabeliaBrowserManager.EVALUATE, urlResponseName);
			}
			
			private function prepareWaitingAssessment(selectedItem:EvaluationVO):void{
				_exerciseId=selectedItem.exerciseId;
				_exerciseName=selectedItem.exerciseName;
				_exerciseTitle=selectedItem.exerciseTitle;
				
				_responseId=selectedItem.responseId;
				_responseName=selectedItem.responseFileIdentifier;
				_responseSubtitleId=selectedItem.responseSubtitleId;
				_responseCharacterName=selectedItem.responseCharacterName;
				_responseAddingDate=selectedItem.responseAddingDate;
				_responseUserName=selectedItem.responseUserName;
				
				//Scroll up to see the video
				callLater(updateVerticalScroll);
				
				//Retrieve the associated subtitles and prepare the videoplayer
				prepareEvaluation();
				_evaluationSelected=true;
				
				//Visualize the video player component
				videoPlayerBox.includeInLayout=true;
				videoPlayerBox.visible=true;
				
				//Prepare the component in which the user leaves the assessment
				evaluationRatingBox.resetEvaluationButtonClickHandler(null);
				evaluationRatingBox.responseData(_responseId, _userName, _responseName, _responseAddingDate, _responseUserName, _exerciseTitle);
				evaluationRatingBox.includeInLayout=true;
				evaluationRatingBox.visible=true;
			}

			private function assessedToCurrentUserChangeHandler(event:Event):void
			{
				if (DataGrid(event.target).selectedItem is EvaluationVO)
				{
					var selectedItem:EvaluationVO=(DataGrid(event.target).selectedItem) as EvaluationVO;
				
					prepareAssessedToCurrentUser(selectedItem);

					var urlResponseName:String=_responseName.replace("audio/", "");

					BabeliaBrowserManager.getInstance().updateURL(BabeliaBrowserManager.index2fragment(ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX), BabeliaBrowserManager.REVISE, urlResponseName);
				}
			}
			
			private function prepareAssessedToCurrentUser(selectedItem:EvaluationVO):void{
				_exerciseId=selectedItem.exerciseId;
				_exerciseName=selectedItem.exerciseName;
				_responseCharacterName=selectedItem.responseCharacterName;
				_responseId=selectedItem.responseId;
				_responseName=selectedItem.responseFileIdentifier;
				_responseSubtitleId=selectedItem.responseSubtitleId;
				
				_exerciseTitle=selectedItem.exerciseTitle;
				_evaluationSelected=true;
				
				//Scroll up to see the video
				callLater(updateVerticalScroll);
				
				//Retrieve the associated subtitles and prepare the videoplayer
				prepareEvaluation();
				
				//Visualize the video player component
				videoPlayerBox.includeInLayout=true;
				videoPlayerBox.visible=true;
				
				//overallAverageRating.text=resourceManager.getString('myResources', 'AVG') + ": " + selectedItem.overallScoreAverage;
				
				assessmentsOfSelectedResponse.visible=true;
				assessmentsOfSelectedResponse.includeInLayout=true;
				
				//Clear the previous assessment detail data, if any
				evaluationDetailViewStack.removeAllChildren();
				
				new EvaluationEvent(EvaluationEvent.DETAILS_OF_ASSESSED_RESPONSE, null, _responseId).dispatch();
				
				//Get the autoevaluation info if available
				if (!computerEvaluation.initialized)
					computerEvaluation.initialize();
				computerEvaluation.setResponseID(_responseId);
			}

			private function assessedByCurrentUserChangeHandler(event:Event):void
			{
				var selectedItem:EvaluationVO=(DataGrid(event.target).selectedItem) as EvaluationVO;
				
				prepareAssessedByCurrentUser(selectedItem);
				
				var urlResponseName:String=_responseName.replace("audio/", "");

				BabeliaBrowserManager.getInstance().updateURL(BabeliaBrowserManager.index2fragment(ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX), BabeliaBrowserManager.VIEW, urlResponseName);
			}
			
			private function prepareAssessedByCurrentUser(selectedItem:EvaluationVO):void{
				_exerciseId=selectedItem.exerciseId;
				_exerciseName=selectedItem.exerciseName;
				_responseCharacterName=selectedItem.responseCharacterName;
				_responseId=selectedItem.responseId;
				_responseName=selectedItem.responseFileIdentifier;
				_responseSubtitleId=selectedItem.responseSubtitleId;
				
				_exerciseTitle=selectedItem.exerciseTitle;
				_evaluationSelected=true;
				
				//Scroll up to see the video
				callLater(updateVerticalScroll);
				
				//Retrieve the associated subtitles and prepare the videoplayer
				prepareEvaluation();
				
				//Visualize the video player component
				videoPlayerBox.includeInLayout=true;
				videoPlayerBox.visible=true;
				
				assessedByUserDetail.evaluationData=selectedItem;
				assessedByUserDetailContainer.visible=true;
				assessedByUserDetailContainer.includeInLayout=true;
				
			}

			private function set showAutoevalTab(val:Boolean):void
			{
				if (dataModel.autoevaluationAvailable)
				{
					evaluationDetailViewStack.addChild(computerEvaluation);
				}
			}

			private function resetVideoPlayer():void
			{
				VP.endVideo(); // Stop video
				VP.setSubtitle(""); // Clear subtitles if any
				VP.videoSource=""; // Reset video source

				hideArrows(); // Hide arrows

				//VP.state=VideoPlayerBabelia.PLAY_STATE; //Reset the player window to display only the exercise

				resetCueManager();

				//Hide the video player until an exercise is selected
				videoPlayerBox.includeInLayout=false;
				videoPlayerBox.visible=false;
			}

			private function onEvaluationTabChange(event:IndexChangedEvent):void
			{
				var newIndex:uint=event.newIndex;
				switch (newIndex)
				{
					case evaluationOptionsViewStack.getChildIndex(waitingAssessmentBoxNavContent):
						assessedToCurrentUserListAndPagination.evaluationTable.selectedItem=null;
						assessedByCurrentUserListAndPagination.evaluationTable.selectedItem=null;
						assessmentsOfSelectedResponse.visible=false;
						assessmentsOfSelectedResponse.includeInLayout=false;
						assessedByUserDetailContainer.includeInLayout=false;
						assessedByUserDetailContainer.visible=false;

						_currentPageWaitingForAssessment=1;
						_currentPageAssessedByCurrentUser=1;
						_currentPageAssessedToCurrentUser=1;
						assessedToCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedToCurrentUser;
						waitingAssessmentListAndPagination.currentPaginationPage=_currentPageWaitingForAssessment;
						assessedByCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedByCurrentUser;

						resetVideoPlayer();

						break;
					case evaluationOptionsViewStack.getChildIndex(assessedToCurrentUserBoxNavContent):
						waitingAssessmentListAndPagination.evaluationTable.selectedItem=null;
						assessedByCurrentUserListAndPagination.evaluationTable.selectedItem=null;
						evaluationRatingBox.includeInLayout=false;
						evaluationRatingBox.visible=false;
						assessedByUserDetailContainer.includeInLayout=false;
						assessedByUserDetailContainer.visible=false;

						_currentPageWaitingForAssessment=1;
						_currentPageAssessedByCurrentUser=1;
						_currentPageAssessedToCurrentUser=1;
						assessedToCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedToCurrentUser;
						waitingAssessmentListAndPagination.currentPaginationPage=_currentPageWaitingForAssessment;
						assessedByCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedByCurrentUser;

						resetVideoPlayer();

						break;
					case evaluationOptionsViewStack.getChildIndex(assessedByCurrentUserBoxNavContent):
						waitingAssessmentListAndPagination.evaluationTable.selectedItem=null;
						assessedToCurrentUserListAndPagination.evaluationTable.selectedItem=null;
						assessmentsOfSelectedResponse.visible=false;
						assessmentsOfSelectedResponse.includeInLayout=false;
						evaluationRatingBox.includeInLayout=false;
						evaluationRatingBox.visible=false;

						_currentPageWaitingForAssessment=1;
						_currentPageAssessedByCurrentUser=1;
						_currentPageAssessedToCurrentUser=1;
						assessedToCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedToCurrentUser;
						waitingAssessmentListAndPagination.currentPaginationPage=_currentPageWaitingForAssessment;
						assessedByCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedByCurrentUser;

						resetVideoPlayer();

						break;
					default:
						break;
				}
			}

			private function set userAuthenticationHandler(value:Boolean):void
			{
				if(_creationComplete){
					refreshEvaluationLists();
					resetVideoPlayer();
					evaluationOptionsViewStack.selectedChild=waitingAssessmentBoxNavContent;
				}
			}

			private function set onTabChange(value:Boolean):void
			{
				if (_creationComplete && dataModel.oldContentViewStackIndex == ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX)
				{
					evaluationRatingBox.includeInLayout=false;
					evaluationRatingBox.visible=false;
					assessmentsOfSelectedResponse.visible=false;
					assessmentsOfSelectedResponse.includeInLayout=false;

					// Remove selected items
					waitingAssessmentListAndPagination.evaluationTable.selectedIndex=-1;
					assessedByCurrentUserListAndPagination.evaluationTable.selectedIndex=-1;
					assessedToCurrentUserListAndPagination.evaluationTable.selectedItem=-1;

					//Return the pagination controls to the first page
					_currentPageWaitingForAssessment=1;
					_currentPageAssessedByCurrentUser=1;
					_currentPageAssessedToCurrentUser=1;

					assessedToCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedToCurrentUser;
					waitingAssessmentListAndPagination.currentPaginationPage=_currentPageWaitingForAssessment;
					assessedByCurrentUserListAndPagination.currentPaginationPage=_currentPageAssessedByCurrentUser;

					resetVideoPlayer();

					evaluationOptionsViewStack.selectedChild=waitingAssessmentBoxNavContent;
				}
			}

			public function updateVerticalScroll():void
			{
				FlexGlobals.topLevelApplication.appContainer.verticalScrollPosition=0;
			}

			private function set onURLChange(value:Object):void
			{
				var browser:BabeliaBrowserManager=BabeliaBrowserManager.getInstance();

				if (browser.moduleIndex != ViewChangeEvent.VIEWSTACK_EVALUATION_MODULE_INDEX)
					return;

				if (value == null)
					return;

				if (!dataModel.isLoggedIn)
					return;

				if (waitingForAssessmentList == null || assessedByCurrentUserList == null || assessedToCurrentUserList == null)
					return;

				switch (browser.actionFragment)
				{
					case BabeliaBrowserManager.EVALUATE:
						if (browser.targetFragment != '')
						{
							var tmpEvaluate:EvaluationVO;
							for each (var evEvaluate:EvaluationVO in waitingForAssessmentList)
							{
								var evaluateStripped:String=evEvaluate.responseFileIdentifier.replace("audio/", "");

								if (evaluateStripped == browser.targetFragment)
								{
									tmpEvaluate=evEvaluate;
									break;
								}
							}
							if (tmpEvaluate)
								callLater(goToSelectedEvaluate, [tmpEvaluate]);
						}
						break;

					case BabeliaBrowserManager.REVISE:
						if (browser.targetFragment != '')
						{
							evaluationOptionsViewStack.selectedChild=assessedToCurrentUserBoxNavContent;
							var tmpRevise:EvaluationVO;
							for each (var evRevise:EvaluationVO in assessedToCurrentUserList)
							{
								var reviseStripped:String=evRevise.responseFileIdentifier.replace("audio/", "");

								if (reviseStripped == browser.targetFragment)
								{
									tmpRevise=evRevise;
									break;
								}
							}
							if (tmpRevise)
								callLater(goToSelectedRevise, [tmpRevise]);
						}
						break;

					case BabeliaBrowserManager.VIEW:

						if (browser.targetFragment != '')
						{
							evaluationOptionsViewStack.selectedChild=assessedByCurrentUserBoxNavContent;
							var tmpView:EvaluationVO;
							for each (var evView:EvaluationVO in assessedByCurrentUserList)
							{
								var viewStripped:String=evView.responseFileIdentifier.replace("audio/", "");
								if (viewStripped == browser.targetFragment)
								{
									tmpView=evView;
									break;
								}
							}
							if (tmpView)
								callLater(goToSelectedView, [tmpView]);
						}
						break;
					default:
						new ViewChangeEvent(ViewChangeEvent.VIEW_EVALUATION_MODULE).dispatch();
						break;
				}
			}

			private function goToSelectedEvaluate(tmpEvaluate:EvaluationVO):void
			{
				prepareWaitingAssessment(tmpEvaluate);
			
			}

			private function goToSelectedRevise(tmpRevise:EvaluationVO):void
			{
				prepareAssessedToCurrentUser(tmpRevise);
			}
			
			private function goToSelectedView(tmpView:EvaluationVO):void
			{
				prepareAssessedByCurrentUser(tmpView);
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().autoevaluationAvailable}"
				destination="showAutoevalTab"/>
	<fx:Binding source="{DataModel.getInstance().isLoggedIn}"
				destination="userAuthenticationHandler"/>
	<fx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="onTabChange"/>

	<fx:Binding source="{dataModel.waitingForAssessmentDataRetrieved}"
				destination="waitingAssessmentRetrievedHandler"/>
	<fx:Binding source="{dataModel.assessedToCurrentUserDataRetrieved}"
				destination="assessedToCurrentUserRetrievedHandler"/>
	<fx:Binding source="{dataModel.assessedByCurrentUserDataRetrieved}"
				destination="assessedByCurrentUserRetrievedHandler"/>
	<fx:Binding source="{dataModel.detailsOfAssessedResponseDataRetrieved}"
				destination="detailsOfAssessmentRetrievedHandler"/>

	<fx:Binding source="{dataModel.addAssessmentRetrieved}"
				destination="assessmentSavedHandler"/>


	<fx:Binding source="{BabeliaBrowserManager.getInstance().targetFragment}"
				destination="onURLChange"/>

	<s:BorderContainer styleName="sectionInfoBox"
					   minHeight="0"
					   minWidth="1000"
					   width="100%">
		<s:layout>
			<s:VerticalLayout paddingTop="16"
							  paddingBottom="0"/>
		</s:layout>
		<s:Label text="{resourceManager.getString('myResources','LABEL_EVALUATIONS')}"
				 styleName="sectionInfoTitleLabel"
				 paddingLeft="16"
				 paddingRight="16"/>
		<s:Label text="{resourceManager.getString('myResources','EVALUATION_SECTION_DESCRIPTION')}"
				 paddingLeft="16"
				 paddingRight="16"/>
		<s:HGroup horizontalAlign="right"
				  width="100%"
				  verticalAlign="bottom"
				  gap="0">
			<skins:HorizontalSeparatorLine width="100%"/>
			<s:TabBar dataProvider="{evaluationOptionsViewStack}"
					  skinClass="skins.AccountTabBarSkin"
					  cornerRadius="8"/>
			<skins:HorizontalSeparatorLine width="16"/>
		</s:HGroup>
	</s:BorderContainer>

	<s:VGroup id="videoPlayerBox"
			  width="100%"
			  horizontalAlign="center"
			  includeInLayout="false"
			  visible="false"
			  paddingTop="20"
			  paddingLeft="16"
			  paddingRight="16">
		<s:Label id="exerciseTitle"
				 text="{_exerciseTitle}"
				 width="100%"
				 styleName="exerciseTitleLabel"/>
		<s:HGroup width="100%"
				  horizontalAlign="center">
			<videoPlayer:VideoPlayerBabelia id="VP"
											autoPlay="true"
											skin="white"
											seek="false"
											subtitles="true"
											autoScale="false"
											arrows="false"
											subtitlingControls="false"
											width="500"
											height="{Math.floor(VP.width * 9 / 16)}"
											streamSource="{_streamSource}"
											controlsEnabled="{_evaluationSelected}"/>
		</s:HGroup>
	</s:VGroup>
	<mx:Spacer width="20"/>

	<s:VGroup width="100%"
			  height="100%"
			  paddingLeft="16"
			  paddingRight="16"
			  paddingBottom="16">

		<mx:ViewStack id="evaluationOptionsViewStack"
					  width="100%"
					  height="100%"
					  creationPolicy="all"
					  resizeToContent="true"
					  change="onEvaluationTabChange(event)">

			<s:NavigatorContent id="waitingAssessmentBoxNavContent"
								label="{resourceManager.getString('myResources','EPAITUGABEDAUDENAK')}">
				<s:VGroup id="waitingAssessmentBox"
						  width="100%"
						  height="100%">
					<!--
					<skins:DottedLine width="100%" dotColor="0x000000" dotWidth="1" dotAlpha="1" height="1" />
					-->
					<evaluation:EvaluationRatingBox id="evaluationRatingBox"
													width="100%"/>

					<s:Label text="{resourceManager.getString('myResources','ASSESSMENT_PENDING_RESPONSES_LIST')}"
							 styleName="sectionTitleLabel"
							 id="assessmentPendingListTitleLabel"
							 paddingTop="16"/>
					<s:Line width="{assessmentPendingListTitleLabel.width}">
						<s:stroke>
							<mx:SolidColorStroke weight="3"
												 color="{assessmentPendingListTitleLabel.getStyle('color')}"/>
						</s:stroke>
					</s:Line>
					<evaluation:CustomItemRendererEvaluationTable id="waitingAssessmentListAndPagination"
																  dataProvider="{waitingForAssessmentList}"
																  changeListener="{waitingAssessmentChangeHandler}"
																  itemRenderer="{modules.evaluation.ListItemWaitingForAssessment}"
																  width="100%"/>
				</s:VGroup>
			</s:NavigatorContent>


			<s:NavigatorContent id="assessedToCurrentUserBoxNavContent"
								label="{resourceManager.getString('myResources','NIRIPAITUTAKOAK')}">
				<s:VGroup id="assessedToCurrentUserBox"
						  width="100%"
						  height="100%">
					<s:VGroup id="assessmentsOfSelectedResponse"
							  width="100%"
							  horizontalAlign="right"
							  gap="0">
						<s:HGroup width="100%"
								  horizontalAlign="right"
								  paddingRight="16">
							<s:TabBar dataProvider="{evaluationDetailViewStack}"/>
						</s:HGroup>
						<s:BorderContainer width="100%"
										   minHeight="0"
										   minWidth="900"
										   cornerRadius="8"
										   backgroundAlpha="0">
							<mx:ViewStack id="evaluationDetailViewStack"
										  width="100%"
										  resizeToContent="true"/>
						</s:BorderContainer>
					</s:VGroup>
					<s:Label text="{resourceManager.getString('myResources','RESPONSES_ASSESSED_TO_USER_LIST')}"
							 styleName="sectionTitleLabel"
							 id="assessedToUserListTitleLabel"
							 paddingTop="16"/>
					<s:Line width="{assessedToUserListTitleLabel.width}">
						<s:stroke>
							<mx:SolidColorStroke weight="3"
												 color="{assessedToUserListTitleLabel.getStyle('color')}"/>
						</s:stroke>
					</s:Line>
					<evaluation:CustomItemRendererEvaluationTable id="assessedToCurrentUserListAndPagination"
																  dataProvider="{assessedToCurrentUserList}"
																  changeListener="{assessedToCurrentUserChangeHandler}"
																  itemRenderer="{modules.evaluation.ListItemAssessedToCurrentUser}"
																  width="100%"/>
				</s:VGroup>
			</s:NavigatorContent>

			<s:NavigatorContent id="assessedByCurrentUserBoxNavContent"
								label="{resourceManager.getString('myResources', 'NIKEPAITUTAKOAK')}">
				<s:VGroup id="assessedByCurrentUserBox"
						  width="100%">
					<s:BorderContainer id="assessedByUserDetailContainer"
									   width="100%"
									   minHeight="0"
									   minWidth="900"
									   cornerRadius="8"
									   backgroundAlpha="0"
									   includeInLayout="false"
									   visible="false">
						<evaluation:EvaluationDetailBox id="assessedByUserDetail"
														width="100%"/>
					</s:BorderContainer>
					<s:Label text="{resourceManager.getString('myResources','RESPONSES_ASSESSED_BY_USER_LIST')}"
							 styleName="sectionTitleLabel"
							 id="assessedByUserListTitleLabel"
							 paddingTop="16"/>
					<s:Line width="{assessedByUserListTitleLabel.width}">
						<s:stroke>
							<mx:SolidColorStroke weight="3"
												 color="{assessedByUserListTitleLabel.getStyle('color')}"/>
						</s:stroke>
					</s:Line>
					<evaluation:CustomItemRendererEvaluationTable id="assessedByCurrentUserListAndPagination"
																  dataProvider="{assessedByCurrentUserList}"
																  changeListener="{assessedByCurrentUserChangeHandler}"
																  itemRenderer="{modules.evaluation.ListItemAssessedByCurrentUser}"
																  width="100%"/>
				</s:VGroup>
			</s:NavigatorContent>

		</mx:ViewStack>
	</s:VGroup>


</s:VGroup>
