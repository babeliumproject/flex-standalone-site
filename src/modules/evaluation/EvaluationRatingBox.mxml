<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:common="view.common.*"
				   xmlns:evaluation="modules.evaluation.*"
				   xmlns:videoUpload="modules.videoUpload.*"
				   includeInLayout="false"
				   visible="false"
				   creationComplete="onComplete(event)"
				   cornerRadius="8"
				   backgroundAlpha="0">

	<fx:Script>
		<![CDATA[
			import events.EvaluationEvent;

			import model.DataModel;

			import modules.videoPlayer.events.babelia.VideoPlayerBabeliaEvent;

			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectProxy;

			import view.common.CustomAlert;

			import vo.EvaluationVO;

			private var _responseDataAvailable:Boolean=false;

			private var _responseId:uint;

			//These are used for sending notification emails
			private var _userName:String;
			private var _responseName:String;
			private var _responseAddingDate:String;
			private var _responseUserName:String;
			private var _exerciseTitle:String;

			private function onComplete(event:FlexEvent):void
			{

			}

			public function onResponseFinished(event:Event):void
			{
				sendEvaluationButton.enabled=true;
			}

			public function responseData(responseId:uint, userName:String, responseName:String, responseAddingDate:String, responseUserName:String, exerciseTitle:String):void
			{
				_responseId=responseId;

				_userName=userName;
				_responseName=responseName;
				_responseAddingDate=responseAddingDate;
				_responseUserName=responseUserName;
				_exerciseTitle=exerciseTitle;

				_responseDataAvailable=true;
			}

			public function sendEvaluationButtonClickHandler(event:MouseEvent):void
			{

				if (_responseDataAvailable)
				{
					var compulsoryDataFilled:Boolean=false;
					if (!CONFIG::restrictedEvaluation)
					{
						if (userIntonationScore.ratingComponent.rating > 0 && userFluencyScore.ratingComponent.rating > 0 && userRhythmScore.ratingComponent.rating > 0 && userSpontaneityScore.ratingComponent.rating > 0 && userOverallScore.ratingComponent.rating > 0)
							compulsoryDataFilled=true;
					}
					if (compulsoryDataFilled)
					{
						if (includeTextCheck.selected && textComment.text == '')
						{
							CustomAlert.info(resourceManager.getString('myResources', 'ERROR_SELECTED_TEXT_COMMENT_NO_FILL'));
							return;
						}
						if (includeVideoCheck.selected && !videoComment.recordingFileName)
						{
							CustomAlert.info(resourceManager.getString('myResources', 'ERROR_SELECTED_VIDEO_COMMENT_NO_FILL'));
							return;
						}
						var evaluation:EvaluationVO=new EvaluationVO();

						evaluation.intonationScore=userIntonationScore.ratingComponent.rating;
						evaluation.fluencyScore=userFluencyScore.ratingComponent.rating;
						evaluation.rhythmScore=userRhythmScore.ratingComponent.rating;
						evaluation.spontaneityScore=userSpontaneityScore.ratingComponent.rating;

						evaluation.overallScore=userOverallScore.ratingComponent.rating;
						evaluation.comment=textComment.text;

						evaluation.responseId=_responseId;

						evaluation.evaluationVideoFileIdentifier=videoComment.recordingFileName;

						//This data is used to send an email notification to the user that received the evaluation
						evaluation.userName=_userName;
						evaluation.responseFileIdentifier=_responseName;
						evaluation.responseAddingDate=_responseAddingDate;
						evaluation.responseUserName=_responseUserName;
						evaluation.exerciseTitle=_exerciseTitle;


						//If the user added a video comment
						if (includeVideoCheck.selected)
							new EvaluationEvent(EvaluationEvent.ADD_VIDEO_ASSESSMENT, evaluation).dispatch();
						else
							new EvaluationEvent(EvaluationEvent.ADD_ASSESSMENT, evaluation).dispatch();
						resetEvaluationButtonClickHandler(null);
					}
					else
					{
						CustomAlert.info(resourceManager.getString('myResources', 'ERROR_FILL_COMPULSORY_DATA'));
					}
				}
				else
				{
					CustomAlert.error(resourceManager.getString('myResources', 'ERROR_EVALUATION_DATA_NOT_SPECIFIED'));
				}
			}

			public function resetEvaluationButtonClickHandler(event:MouseEvent):void
			{
				userIntonationScore.ratingComponent.rating=0;
				userFluencyScore.ratingComponent.rating=0;
				userRhythmScore.ratingComponent.rating=0;
				userSpontaneityScore.ratingComponent.rating=0;
				userOverallScore.ratingComponent.rating=0;

				textComment.text='';
				if (videoComment)
					videoComment.resetComponent();

				includeTextCheck.selected=false;
				includeVideoCheck.selected=false;

				optionalEvaluationDataBox.visible=false;
				optionalEvaluationDataBox.getTabAt(0).visible=false;
				optionalEvaluationDataBox.getTabAt(1).visible=false;
				optionalEvaluationDataBox.selectedIndex=0;
				optionalEvaluationDataBox.includeInLayout=false;

				sendEvaluationButton.enabled=true;
			}

			protected function includeTextVideoCommentClickHandler(event:MouseEvent):void
			{
				if (includeTextCheck.selected && includeVideoCheck.selected)
				{
					optionalEvaluationDataBox.visible=true;
					optionalEvaluationDataBox.getTabAt(0).visible=true;
					optionalEvaluationDataBox.getTabAt(1).visible=true;
					optionalEvaluationDataBox.selectedIndex=0;
					optionalEvaluationDataBox.includeInLayout=true;
				}
				else if (includeTextCheck.selected && !includeVideoCheck.selected)
				{
					optionalEvaluationDataBox.visible=true;
					optionalEvaluationDataBox.getTabAt(0).visible=true;
					optionalEvaluationDataBox.getTabAt(1).visible=false;
					optionalEvaluationDataBox.selectedIndex=0;
					optionalEvaluationDataBox.includeInLayout=true;
				}
				else if (!includeTextCheck.selected && includeVideoCheck.selected)
				{
					optionalEvaluationDataBox.visible=true;
					optionalEvaluationDataBox.getTabAt(0).visible=false;
					optionalEvaluationDataBox.getTabAt(1).visible=true;
					optionalEvaluationDataBox.selectedIndex=1;
					optionalEvaluationDataBox.includeInLayout=true;
				}
				else
				{
					optionalEvaluationDataBox.visible=false;
					optionalEvaluationDataBox.getTabAt(0).visible=false;
					optionalEvaluationDataBox.getTabAt(1).visible=false;
					optionalEvaluationDataBox.selectedIndex=0;
					optionalEvaluationDataBox.includeInLayout=false;
				}
			}
		]]>

	</fx:Script>

	<s:layout>
		<s:VerticalLayout paddingTop="16"
						  paddingBottom="16"
						  paddingLeft="16"
						  paddingRight="16"/>
	</s:layout>

	<s:Label text="{resourceManager.getString('myResources','MESSAGE_RATE_THE_USERS_RESPONSE')}"
			 styleName="sectionTitleLabel"/>
	<s:VGroup id="ratingContainer"
			  width="100%"
			  height="100%">
		<s:HGroup width="100%"
				  gap="20"
				  paddingTop="10">

			<!-- Score section -->
			<s:VGroup width="50%">
				<s:Label text="{resourceManager.getString('myResources','MESSAGE_COMPULSORY_EVALUATION_DATA') + ':'}"
						 styleName="boldLabel"/>
				<evaluation:ScoreParameterBox id="userIntonationScore"
											  parameter="MESSAGE_RATE_USER_INTONATION"/>
				<evaluation:ScoreParameterBox id="userFluencyScore"
											  parameter="MESSAGE_RATE_USER_FLUENCY"/>
				<evaluation:ScoreParameterBox id="userRhythmScore"
											  parameter="MESSAGE_RATE_USER_RHYTHM"/>
				<evaluation:ScoreParameterBox id="userSpontaneityScore"
											  parameter="MESSAGE_RATE_USER_SPONTANEITY"/>
				<evaluation:ScoreParameterBox id="userOverallScore"
											  parameter="MESSAGE_RATE_USER_OVERALL_SCORE"/>
			</s:VGroup>

			<!-- Comment section -->
			<s:VGroup width="50%">
				<s:Label text="{resourceManager.getString('myResources','MESSAGE_OPTIONAL_EVALUATION_DATA') + ':'}"
						 styleName="boldLabel"/>
				<s:CheckBox id="includeTextCheck"
							label="{resourceManager.getString('myResources','LABEL_INCLUDE_TEXT_COMMENT')}"
							click="includeTextVideoCommentClickHandler(event)"/>
				<s:CheckBox id="includeVideoCheck"
							label="{resourceManager.getString('myResources','LABEL_INCLUDE_VIDEO_COMMENT')}"
							click="includeTextVideoCommentClickHandler(event)"/>

				<mx:TabNavigator id="optionalEvaluationDataBox"
								 visible="false"
								 width="100%"
								 includeInLayout="false"
								 resizeToContent="true"
								 horizontalAlign="right"
								 backgroundAlpha="0"
								 paddingTop="8"
								 paddingBottom="8"
								 paddingLeft="8"
								 paddingRight="8">
					<s:NavigatorContent id="textCommentBoxNavContent"
										label="{resourceManager.getString('myResources','LABEL_TEXT_COMMENT')}">
						<s:VGroup id="textCommentBox"
								  width="100%">
							<mx:TextArea id="textComment"
										 width="100%"
										 height="100"
										 maxChars="500"/>
						</s:VGroup>
					</s:NavigatorContent>

					<s:NavigatorContent id="videoCommentBoxNavContent"
										label="{resourceManager.getString('myResources','LABEL_VIDEO_COMMENT')}">
						<s:VGroup id="videoCommentBox"
								  width="100%"
								  horizontalAlign="center">
							<videoUpload:TempVideoRecording id="videoComment"
															streamsFolder="{DataModel.getInstance().evaluationStreamsFolder}"
															filePrefix="comment"
															minimumVideoDuration="{DataModel.getInstance().minVideoEvalDuration}"/>
						</s:VGroup>
					</s:NavigatorContent>

				</mx:TabNavigator>
			</s:VGroup>

		</s:HGroup>
		<mx:Spacer height="6"/>

		<s:HGroup id="controlButtons"
				  width="100%"
				  horizontalAlign="center"
				  verticalAlign="middle">
			<s:Button id="sendEvaluationButton"
					  label="{resourceManager.getString('myResources','LABEL_SEND_EVALUATION')}"
					  buttonMode="true"
					  click="sendEvaluationButtonClickHandler(event)"
					  styleName="bigBlueButton"/>
			<s:Button id="resetEvaluationButton"
					  label="{resourceManager.getString('myResources','LABEL_RESET_EVALUATION')}"
					  buttonMode="true"
					  click="resetEvaluationButtonClickHandler(event)"
					  styleName="bigBlueButton"/>
		</s:HGroup>


	</s:VGroup>

</s:BorderContainer>
