<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				title="{resourceManager.getString('myResources', 'VIDEOCOMMENT')}"
				autoLayout="true"
				creationComplete="init()">

	<mx:Metadata>
   		[Event( name="bideoaBatGehitu", type="events.AddVideoEvent") ]
	</mx:Metadata>
	<mx:Metadata>
		[ResourceBundle("myResources")]
	</mx:Metadata>


	<mx:Script>

		<![CDATA[
			import events.AddVideoEvent;
			
			import model.DataModel;
			
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import view.common.PrivacyRights;

			private var client_nc:NetConnection;
			private var out_ns:NetStream;

			private var in_ns:NetStream;

			private var audio_pause:Boolean;

			private var video:Video;

			private var _camera:Camera;
			private var _mic:Microphone;

			private var privacyRights:PrivacyRights;
			private var _micCamEnabled:Boolean=false;

			private var anyContent:Boolean;
			private var videoEvaluationDir:String="evaluation";


			private var audioFilename:String;

			public function init():void
			{

				anyContent=false;
				// Create a connection
				client_nc=new NetConnection();

				// Connect to the application
				client_nc.connect(DataModel.getInstance().streamingResourcesPath);
				// add listener for the netStatus events
				client_nc.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				client_nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, netSecurityError);

				// JUANAN
				client_nc.client=this;

				audio_pause=false;


			}

			private function netStatus(event:NetStatusEvent):void
			{
				trace("netStatus: " + event);
				var info:Object=event.info;
				trace(info.code);

				switch (info.code)
				{
					case "NetConnection.Connect.Success":
						// Close and recreate streams
						if (in_ns)
							in_ns.close();
						if (out_ns)
							out_ns.close();

						in_ns=new NetStream(client_nc);
						out_ns=new NetStream(client_nc);

						in_ns.addEventListener(NetStatusEvent.NET_STATUS, inStreamState);

						in_ns.client=this; // onPlayStatus
						in_ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); // onMetaData


						break;
					case "NetConnection.Connect.Closed":
						if (in_ns)
							in_ns.close();
						if (out_ns)
							out_ns.close();

						break;
				}
			}

			private function inStreamState(event:NetStatusEvent):void
			{
				var info:Object=event.info;

				if (info.code == "NetStream.Play.Stop")
				{
					RecStop_btn.enabled=true;
					RecStop_btn.label="Rec";

					PlayPause_btn.enabled=true;
					PlayPause_btn.label="Play";

					audio_pause=false;
				}
			}

			private function netSecurityError(event:SecurityErrorEvent):void
			{
				trace("netSecurityError: " + event);
			}

			private function playAudio():void
			{
				if (audio_pause)
				{
					in_ns.resume();
					estat.text=resourceManager.getString('myResources', 'MESSAGE_STATUS_PLAYING');
					audio_pause=false;
				}
				else
				{
					// Play the recording
					estat.text=resourceManager.getString('myResources', 'MESSAGE_STATUS_PLAYING');
					if (in_ns)
						in_ns.close();
					in_ns=new NetStream(client_nc);
					in_ns.addEventListener(NetStatusEvent.NET_STATUS, inStreamState);
					in_ns.client=this; // onPlayStatus
					in_ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); // onMetaData

					in_ns.play(videoEvaluationDir + "/" + audioFilename);
					video.attachNetStream(in_ns); // JUANAN
					estat.text=resourceManager.getString('myResources', 'MESSAGE_STATUS_PLAYING');
				}

				// It's not possible recording or save while audio is playing
				PlayPause_btn.enabled=true;
				PlayPause_btn.label="Pause";

				RecStop_btn.enabled=true;
				RecStop_btn.label="Stop";
			}

			private function pauseAudio():void
			{
				//in_ns.togglePause();
				in_ns.pause();
				estat.text=resourceManager.getString('myResources', 'MESSAGE_STATUS_PAUSED');
				audio_pause=true;

				// It's possible recording or save while audio is paused
				RecStop_btn.enabled=true;
				RecStop_btn.label="Rec";

				PlayPause_btn.enabled=true;
				PlayPause_btn.label="Play";
			}

			private function stopAudio():void
			{
				estat.text=resourceManager.getString('myResources', 'MESSAGE_STATUS_STOPPED');

				// Close output stream
				out_ns.close();

				// It's not possible playing audio while recording
				RecStop_btn.enabled=true;
				RecStop_btn.label="Rec";

				PlayPause_btn.enabled=true;
				PlayPause_btn.label="Play";
			}

			private function recStopAudio():void
			{
				if (RecStop_btn.label == "Rec")
				{
					prepareDevices();
				}
				else
				{
					stopCamera();
					stopAudio();
					bideoaGorde.enabled=true;
				}
			}

			private function stopCamera():void
			{
				// clear the videoContainer
				video.attachCamera(null);
				video.clear();
			}


			private function playPauseAudio():void
			{
				estat.text='playPauseAudio' + PlayPause_btn.label;
				switch (PlayPause_btn.label)
				{
					case "Play":
						playAudio();
						break;
					case "Pause":
						pauseAudio();
						break;
				}
			}

			public function onBWDone():void
			{
				trace("BWworked");
			}

			public function onPlayStatus(o:Object):void
			{
				if (o.code == "NetStream.Play.Complete")
				{
					estat.text="";

				}
			}

			public function asyncErrorHandler(event:AsyncErrorEvent):void
			{
				// ignore for now
			}

			private function prepareRecording():void
			{
				if (_micCamEnabled)
				{
					if (_camera)
					{
						videoHolder.setActualSize(_camera.width, _camera.height);
						video=new Video(_camera.width, _camera.height);
						out_ns.attachCamera(_camera);
						video.attachCamera(_camera);

						videoHolder.addChild(video);
						trace("All added you should see video");
					}
					if (_mic)
					{
						estat.text=resourceManager.getString('myResources', 'MESSAGE_STATUS_RECORDING');
						anyContent=true;

						_mic.setLoopBack(false);
						_mic.gain=40;

						// Start publishing the audio output as a recorded stream
						out_ns.attachAudio(_mic);

						// It's not possible playing audio while recording
						RecStop_btn.enabled=true;
						RecStop_btn.label="Stop";

						PlayPause_btn.enabled=false;
						PlayPause_btn.label="Play";

						startRecording();
					}
				}
			}

			private function startRecording():void
			{
				var d:Date=new Date();
				audioFilename="comment-" + d.getTime().toString();

				// Publish the stream
				out_ns.publish(videoEvaluationDir + "/" + audioFilename, "record");
			}

			private function prepareDevices():void
			{
				if (DataModel.getInstance().micCamAllowed)
				{
					_micCamEnabled=DataModel.getInstance().micCamAllowed;
					configureDevices();
				}
				else
				{
					PrivacyRights.useMicAndCamera=true;
					privacyRights=PrivacyRights(PopUpManager.createPopUp(Application.application.parent, PrivacyRights, true));
					privacyRights.addEventListener(CloseEvent.CLOSE, privacyBoxClosed);

					PopUpManager.centerPopUp(privacyRights);
				}
			}

			private function configureDevices():void
			{
				_camera=DataModel.getInstance().camera;
				_mic=DataModel.getInstance().microphone;
				_mic.setUseEchoSuppression(true);
				_mic.setLoopBack(true);
				_mic.setSilenceLevel(0, 60000);

				prepareRecording();
			}

			private function privacyBoxClosed(event:Event):void
			{
				PopUpManager.removePopUp(privacyRights);
				_micCamEnabled=DataModel.getInstance().micCamAllowed;
				if (_micCamEnabled && PrivacyRights.cameraFound && PrivacyRights.microphoneFound)
				{
					configureDevices();
				}
				else
				{
					Alert.show("You must 'Allow' the access to your devices.");
				}
			}

			private function saveVideoComment():void
			{
				dispatchEvent(new AddVideoEvent(audioFilename));
				PopUpManager.removePopUp(this);
			}

			private function cancelButtonClickHandler():void
			{
				if (out_ns)
					stopAudio();
				if(video)
					stopCamera();
				PopUpManager.removePopUp(this);
			}
		]]>
	</mx:Script>

	<mx:VBox width="100%"
			 height="100%"
			 horizontalAlign="center">
		<mx:UIComponent id="videoHolder"
						width="320"
						height="240"/>
		<mx:HBox>
			<mx:Button label="Rec"
					   click="recStopAudio();"
					   id="RecStop_btn"
					   width="65"
					   fillColors="[#ca0000, #ffffff]"/>
			<mx:Button label="Play"
					   click="playPauseAudio();"
					   id="PlayPause_btn"
					   enabled="false"
					   width="65"
					   fillColors="[#008080, #ffffff]"/>
			<mx:Label text="{resourceManager.getString('myResources','LABEL_STATUS')}"
					  fontWeight="bold"
					  fontStyle="italic"/>
			<mx:Label id="estat"
					  width="100%"/>
		</mx:HBox>
		<mx:Spacer/>
		<mx:HRule width="100%"/>
		<mx:HBox horizontalAlign="center">
			<mx:Button id="bideoaGorde"
					   label="{resourceManager.getString('myResources', 'SAVEVIDEO')}"
					   click="saveVideoComment();"
					   enabled="false"/>
			<mx:Button label="{resourceManager.getString('myResources', 'CANCEL')}"
					   click="cancelButtonClickHandler()"/>
		</mx:HBox>

	</mx:VBox>

</mx:TitleWindow>
