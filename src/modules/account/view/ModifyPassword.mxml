<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:skins="skins.*"
		  width="100%"
		  horizontalAlign="center"
		  creationComplete="onComplete(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.crypto.SHA1;

			import components.userManagement.FieldValidator;

			import events.ModifyUserEvent;

			import model.DataModel;

			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.ToolTip;
			import mx.events.FlexEvent;
			import mx.managers.ToolTipManager;

			import skins.IconButtonSkin;

			import view.common.CustomAlert;

			import vo.ChangePassVO;

			public var errorMessageTooltip:Array=new Array;
			public var creationCompleted:Boolean=false;

			private var _model:DataModel=DataModel.getInstance();

			private var cancelFunction:Function;

			private var cw1:ChangeWatcher;
			private var commitOnly:Boolean;
			private var useWeakReference:Boolean;

			protected function onComplete(event:FlexEvent):void
			{
				cw1=BindingUtils.bindSetter(onPassChanged, _model, 'passwordChanged', commitOnly, useWeakReference);

				creationCompleted=true;
			}

			public function resetComponent():void
			{
				resetToolTips();
			}

			public function unpinComponent():void
			{
				if (cw1)
					cw1.unwatch();
				cw1=null;

				//TODO remove validation listeners

				if (cancelFunction != null)
					cancelButton.removeEventListener(MouseEvent.CLICK, cancelFunction);
				saveButton.removeEventListener(MouseEvent.CLICK, changePassword);
				this.removeEventListener(FlexEvent.CREATION_COMPLETE, onComplete);
			}

			protected function changePassword(event:MouseEvent):void
			{
				if (FieldValidator.validateTextInput(errorMessageTooltip, oldpassword, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40) && FieldValidator.validateTextInput(errorMessageTooltip, newpassword, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40) && FieldValidator.validateTextInput(errorMessageTooltip, renewpassword, 'REPASSWORD', FieldValidator.ANY_PATTERN, false, false, false, true, 1, 200, newpassword.text))
				{
					var user:ChangePassVO=new ChangePassVO(SHA1.hash(oldpassword.text), SHA1.hash(newpassword.text));
					new ModifyUserEvent(ModifyUserEvent.CHANGE_PASS, user).dispatch();
				}
				else
				{
					CustomAlert.error(resourceManager.getString('myResources', 'WRONG_FIELDS_IN_FORM'));
				}
			}

			protected function checkFieldValidity(event:Event, errorMessageToolTips:Array, fieldName:String, matchPattern:RegExp, checkEmpty:Boolean=true, checkLength:Boolean=true, checkPattern:Boolean=true, checkString:Boolean=false, minLength:int=1, maxLength:int=200, matchString:String=''):void
			{

			}

			protected function resetToolTips():void
			{
				if (!creationCompleted)
					return;

				oldpassword.text='';
				newpassword.text='';
				renewpassword.text='';

				if (errorMessageTooltip.hasOwnProperty(oldpassword.name))
					ToolTipManager.destroyToolTip(errorMessageTooltip[oldpassword.name] as ToolTip);
				if (errorMessageTooltip.hasOwnProperty(newpassword.name))
					ToolTipManager.destroyToolTip(errorMessageTooltip[newpassword.name] as ToolTip);
				if (errorMessageTooltip.hasOwnProperty(renewpassword.name))
					ToolTipManager.destroyToolTip(errorMessageTooltip[renewpassword.name] as ToolTip);

				errorMessageTooltip=null;
				errorMessageTooltip=new Array();
			}

			public function onPassChanged(flag:Boolean):void
			{
				if (flag)
				{
					oldpassword.text="";
					newpassword.text="";
					renewpassword.text="";
					oldpassword.getFocus();
					DataModel.getInstance().passwordChanged=false;
				}
			}

			public function set cancelClickHandler(closure:Function):void
			{
				cancelFunction=closure;
				cancelButton.addEventListener(MouseEvent.CLICK, cancelFunction);
			}
		]]>
	</fx:Script>

	<s:BorderContainer id="mpContainer"
					   styleName="lightBorderContainer"
					   width="100%">
		<s:layout>
			<s:VerticalLayout paddingBottom="16"
							  paddingTop="16"
							  paddingLeft="16"
							  paddingRight="16"
							  gap="4"/>
		</s:layout>

		<s:Label text="{resourceManager.getString('myResources','MODIFY_PASSWORD')}"
				 styleName="h3"/>

		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke weight="{mpContainer.getStyle('borderWeight')}"
									alpha="{mpContainer.getStyle('borderAlpha')}"
									color="{mpContainer.getStyle('borderColor')}"/>
			</s:stroke>
		</s:Line>

		<s:Form width="100%">
			<s:FormItem label="{resourceManager.getString('myResources','OLDPASSWORD')}"
						required="true">
				<s:TextInput id="oldpassword"
							 styleName="frm-input"
							 displayAsPassword="true"
							 width="300"
							 maxChars="40"
							 change="FieldValidator.validateTextInput(errorMessageTooltip, oldpassword, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40)"
							 focusOut="FieldValidator.validateTextInput(errorMessageTooltip, oldpassword, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40)"/>

			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','PASSWORD')}"
						required="true">

				<s:TextInput id="newpassword"
							 styleName="frm-input"
							 displayAsPassword="true"
							 width="300"
							 maxChars="40"
							 change="FieldValidator.validateTextInput(errorMessageTooltip, newpassword, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40)"
							 focusOut="FieldValidator.validateTextInput(errorMessageTooltip, newpassword, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40)"/>

			</s:FormItem>
			<s:FormItem label="{resourceManager.getString('myResources','REPASSWORD')}"
						required="true">

				<s:TextInput id="renewpassword"
							 styleName="frm-input"
							 displayAsPassword="true"
							 width="300"
							 maxChars="40"
							 change="FieldValidator.validateTextInput(errorMessageTooltip, renewpassword, 'REPASSWORD', FieldValidator.ANY_PATTERN, false, false, false, true, 1, 200, newpassword.text)"
							 focusOut="FieldValidator.validateTextInput(errorMessageTooltip, renewpassword, 'REPASSWORD', FieldValidator.ANY_PATTERN, false, false, false, true, 1, 200, newpassword.text)"/>
			</s:FormItem>
		</s:Form>
	</s:BorderContainer>

	<s:HGroup width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle">
		<s:Button id="saveButton"
				  label="{resourceManager.getString('myResources','SAVE_NEWPASS')}"
				  click="changePassword(event)"
				  styleName="btn-success"
				  buttonMode="true"/>
		<s:Button id="cancelButton"
				  label="{resourceManager.getString('myResources','CANCEL')}"
				  styleName="btn-default"
				  buttonMode="true"/>
	</s:HGroup>
</s:VGroup>
