<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
		  backgroundAlpha="0.0"
		  borderStyle="none"
		  width="100%"
		  height="700"
		  xmlns:ns1="modules.exercises.*" 
		  xmlns:videoPlayer="modules.videoPlayer.*"
		  creationComplete="init()"
		  headerHeight="0">
	<mx:Metadata>
		[ResourceBundle("myResources")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import control.CuePointManager;
			
			import events.ExerciseEvent;
			import events.ExerciseRoleEvent;
			
			import model.DataModel;
			
			import modules.videoPlayer.events.VideoPlayerEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import vo.ExerciseRoleVO;
			import vo.ExerciseVO;
			
			/**
			 * CONSTANTS
			 **/
			private const SELECT_EXERCISE:String = "SELECT_EXERCISE";
			
			/**
			 * Exercise Related variables
			 **/
			[Bindable] private var _currentExercise:ExerciseVO;
			[Bindable] private var _thumbURL:String = DataModel.getInstance().thumbURL + "/";
			[Bindable] private var _exerciseTitle:String;
			[Bindable] private var _exerciseSelected:Boolean = false;
			[Bindable] private var _locales:Array;
			[Bindable] private var _characterNames:ArrayCollection = new ArrayCollection();
			private var _roles:ArrayCollection;
			private var _exerciseName:String;
			private var _exerciseId:int;
			
			/**
			 * Recording related variables
			 **/
			[Bindable] private var _rolesReady:Boolean;
			[Bindable] private var _localesReady:Boolean;
			[Bindable] private var _subtitlesReady:Boolean;
			[Bindable] private var _cueManagerReady:Boolean;
			
			private var _recordedFilename:Boolean;
			
			/**
			 * Others
			 **/
			private var _cueManager:CuePointManager = CuePointManager.getInstance();
			[Bindable] private var _streamSource:String = "rtmp://" + DataModel.getInstance().server + "/oflaDemo";

			public var videoPlayerReady:Boolean = false;
			
			/**
			 * On creation complete
			 **/
			private function init() : void
			{
				_exerciseTitle = resourceManager.getString('myResources', SELECT_EXERCISE);
				setupVideoPlayer();
				hideSelectedExercise();
			}
			
			/**
			 * Setup for videoplayer
			 **/
			private function setupVideoPlayer() : void
			{
				VP.addEventListener(VideoPlayerEvent.CONNECTED, onVideoPlayerReady);
			}
			
			private function onVideoPlayerReady(e:VideoPlayerEvent) : void
			{
				videoPlayerReady = true;
				VP.stopVideo();
				// TODO VP.addEventListener(StreamEvent.ENTER_FRAME, monitorCuePoints);
			}
			
			/**
			 * Preparing exercise
			 **/
			private function prepareExercise() : void
			{
				// Prepare new video in VideoPlayer
				VP.stopVideo();
				VP.videoSource = _exerciseName;
				
				// Retrieving roles for selected exercise
				var auxExRol:ExerciseRoleVO = new ExerciseRoleVO();
				auxExRol.exerciseId = _exerciseId;
				new ExerciseRoleEvent(ExerciseRoleEvent.GET_EXERCISE_ROLES, auxExRol).dispatch();
				
				// Retrieving available locales for selected exercise's subtitles
				var auxEx:ExerciseVO = new ExerciseVO();
				auxEx.id = _exerciseId;
				new ExerciseEvent(ExerciseEvent.GET_EXERCISE_LOCALES, auxEx).dispatch();
			}
			
			/**
			 * On locales retrieved
			 **/
			private function set onLocalesRetrieved(value:Boolean) : void
			{
				if ( value )
				{	
					_locales = DataModel.getInstance().availableExerciseLocales;
					
					if ( _locales == null )
					{
						availableLocales.enabled = false;
						_localesReady = false;
					}
					else
					{
						availableLocales.enabled = true;
						_localesReady = true;
					}
						
					DataModel.getInstance().availableExerciseLocalesRetrieved = false;
				}
			}
			
			/**
			 * On roles retrieved
			 **/
			private function set onRolesRetrieved(value:Boolean) : void
			{
				if ( value )
				{
					_roles = DataModel.getInstance().availableExerciseRoles.getItemAt(1) as ArrayCollection;
					_characterNames.removeAll();
					
					if ( _roles == null )
					{
						availableRoles.enabled = false;
						_rolesReady = false;
					}
					else
					{
						availableRoles.enabled = true;
						_rolesReady = true;
						
						for each ( var role:ExerciseRoleVO in _roles )
							_characterNames.addItem(role.characterName);
					}
					
					DataModel.getInstance().availableExerciseRolesRetrieved.setItemAt(false, 1);
				}
			}
			
			/**
			 * Show/Hide selected exercise
			 **/
			private function showSelectedExercise() : void
			{
				panelSelectedExercise.minHeight = 0;
				panelSelectedExercise.height = 200;
				panelSelectedExercise.visible = true;
				
				_exerciseSelected = true;
			}
			
			private function hideSelectedExercise() : void
			{
				panelSelectedExercise.minHeight = 0;
				panelSelectedExercise.height = 0;
				panelSelectedExercise.visible = false;
				
				_exerciseSelected = false;
			}
			
			/**
			 * On select an exercise from list
			 **/
			private function set onExerciseSelected(value:Boolean) : void
			{
				if ( value == true )
				{
					// Retrieving selected exercise information
					var tmp:ExerciseVO = DataModel.getInstance().currentExercise.getItemAt(1) as ExerciseVO;
					_exerciseName = tmp.name;
					_exerciseTitle = tmp.title;
					_exerciseId = tmp.id;
					_currentExercise = tmp;
					DataModel.getInstance().currentExerciseRetrieved.setItemAt(false, 1);
					
					// Need to retrieve again exercise's information
					_rolesReady = false;
					_localesReady = false;
					_subtitlesReady = false;
					_cueManagerReady = false;

					showSelectedExercise();
					prepareExercise();
				}
			}
			
			/**
			 * On tab change - reset selected video and stop streaming
			 **/
			private function set onTabChange(value:Boolean) : void
			{
				VP.endVideo(); // Stop video
				VP.setSubtitle(""); // Clear subtitles if any
				VP.videoSource = ""; // Reset video source
				VP.arrows = false; // Hide arrows
				
				_exerciseTitle = resourceManager.getString('myResources', SELECT_EXERCISE);
				_currentExercise = null; // Reset current exercise
				
				hideSelectedExercise(); // Information of selected exercise
			}
			
		]]>
	</mx:Script>
	
	<mx:Binding source="{DataModel.getInstance().currentExerciseRetrieved.getItemAt(1)}"
				destination="this.onExerciseSelected"/>
	<mx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="this.onTabChange" />
	<mx:Binding source="{DataModel.getInstance().availableExerciseLocalesRetrieved}"
				destination="this.onLocalesRetrieved" />
	<mx:Binding source="{DataModel.getInstance().availableExerciseRolesRetrieved.getItemAt(1)}"
				destination="this.onRolesRetrieved" />
	
	<mx:HBox width="100%" verticalAlign="top" horizontalAlign="center">
		<!-- Video Player -->
		<mx:VBox>
			<mx:Label id="exerciseTitle"
					  text="{_exerciseTitle}"
					  width="100%"
					  fontSize="16"
					  fontWeight="bold"/>
			<videoPlayer:VideoPlayerBabelia id="VP" autoPlay="true" skin="white"
						seek="true" subtitles="true" autoScale="false" arrows="false"
						subtitlingControls="false" width="500" 
						height="{Math.floor(VP.width * 800 / 1280)}"
						streamSource="{_streamSource}"
						controlsEnabled="{_exerciseSelected}" />
		</mx:VBox>
		<mx:Spacer width="20" />
		<!-- Exercise List -->
		<mx:Panel width="500"
				  height="100%"
				  layout="vertical"
				  fontFamily="Arial"
				  fontSize="12"
				  horizontalAlign="center"
				  verticalAlign="middle"
				  horizontalScrollPolicy="off"
				  headerHeight="0">
			<mx:Panel id="panelSelectedExercise" width="100%" minHeight="0"
					  title="{resourceManager.getString('myResources', 'MESSAGE_SELECTED_EXERCISE')}">
				<mx:HBox id="hboxSelectedExercise">
					<mx:VBox>
						<mx:Image id="thumbnail"
								  scaleContent="true"
								  source="{_thumbURL + _currentExercise.thumbnailUri}"
								  autoLoad="true"
								  width="120"
								  height="90"
								  toolTip="{_currentExercise.title}"
								  useHandCursor="true" buttonMode="true"/>
						<mx:Button label="{resourceManager.getString('myResources', 'BUTTON_START_RECORDING')}"
								   enabled="{_rolesReady &amp;&amp; _localesReady &amp;&amp;
								   			_subtitlesReady &amp;&amp; _cueManagerReady}" />
					</mx:VBox>
					<mx:VBox width="100%"
							 verticalGap="2">
						<mx:LinkButton label="{_currentExercise.title}"
									fontSize="12"
									width="100%"
									textAlign="left"/>
						<mx:HRule height="1"
								  width="100%"/>
						<mx:Spacer height="5"/>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('myResources', 'MESSAGE_CHOOSE_ROLE')}" />
							<mx:ComboBox width="100" id="availableRoles" 
									dataProvider="{_characterNames}" />
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('myResources', 'MESSAGE_CHOOSE_LOCALE')}" />
							<mx:ComboBox width="100" id="availableLocales"
									dataProvider="{_locales}" />
						</mx:HBox>
						<mx:Spacer height="5"/>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('myResources', 'MESSAGE_CHOOSE_REC_METHOD')}" />
							<mx:VBox>
								<mx:RadioButton selected="true" groupName="recMode" label="{resourceManager.getString('myResources', 'OPTION_MIC_ONLY')}" />
								<mx:RadioButton groupName="recMode" label="{resourceManager.getString('myResources', 'OPTION_WEBCAM_AND_MIC')}" />
							</mx:VBox>
						</mx:HBox>
					</mx:VBox>
				</mx:HBox>
			</mx:Panel>
			<mx:Panel width="100%"
					  verticalAlign="top">
				<ns1:VideoList width="100%" />
			</mx:Panel>
		</mx:Panel>
	
	</mx:HBox>

</mx:Panel>
