<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:tc="modules.search.*"
	preinitialize="init()">
	<mx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.ArrayCollection;
			import model.DataModel;
			import events.SearchEvent;
			import mx.controls.LinkButton;
			import vo.TagVO;
			
			[Bindable] private var dataProvider:ArrayCollection = new ArrayCollection();
			[Bindable] private var totalAmount:int = 0;
			
			public function init():void{
				new SearchEvent(SearchEvent.GET_TAG_CLOUD).dispatch();
			}
			public function set onTagCloudRetrieved(value:Boolean):void{
				if (DataModel.getInstance().tagCloudRetrieved){
					dataProvider=DataModel.getInstance().tagCloud;
					if(dataProvider.length >0){
						createTagCloud();
					}
					DataModel.getInstance().tagCloudRetrieved = false;
				}
			}
			public function createTagCloud():void{
				var tmp:Canvas;
				totalAmount=(dataProvider[0] as TagVO).amount;
				unSort();
				for each (var tag:TagVO in dataProvider){
					tmp=new Canvas();
					if ((tag.amount * 100)/totalAmount>=70){
						tmp.addChild(createTagLink1(tag.tag));
					}else if ((tag.amount * 100)/totalAmount>=45){
						tmp.addChild(createTagLink2(tag.tag));
					}else if ((tag.amount * 100)/totalAmount>=30){
						tmp.addChild(createTagLink3(tag.tag));
					}else if ((tag.amount * 100)/totalAmount>=20){
						tmp.addChild(createTagLink4(tag.tag));
					}else if ((tag.amount * 100)/totalAmount>=10){
						tmp.addChild(createTagLink5(tag.tag));
					}else{
						tmp.addChild(createTagLink6(tag.tag));
					}
					tagCloudBox.addChild(tmp);
				}
			}
			public function countAmount():void{
				var ca:int = 0;
				for each (var tag:TagVO in dataProvider){
					ca=ca + tag.amount;
				}
				totalAmount = ca;
			}
			public function unSort():void{
				var dataSortField:SortField=new SortField();
         		var dataSort:Sort=new Sort();
        		//Create the SortField object for the data
        		dataSortField.numeric=false;
        		dataSortField.name="tag";
        		dataSortField.descending=true;
        		//Create the Sort object and add the SortField object to the array of fields to sort
        		dataSort.fields=[dataSortField];
        		//Set the ArrayCollection objects sort property to our custom sort, and refresh
        		dataProvider.sort=dataSort;
        		dataProvider.refresh();
			}
			private function createTagLink1(label:String):LinkButton{
				var tag:LinkButton = new LinkButton();
				tag.label = label;
				tag.setStyle("fontWeight","bold");
				tag.setStyle("fontFamily","Verdana");
				tag.setStyle("paddingRight",0);
				tag.setStyle("paddingLeft",0);
				tag.setStyle("fontSize", 21);
				tag.setStyle("color", 0x303030);
				tag.setStyle("textRollOverColor", 0xFF66666)
				tag.alpha = 0;
				tag.addEventListener(MouseEvent.CLICK, tagClickHandler);
				return tag;	
			}
			private function createTagLink2(label:String):LinkButton{
				var tag:LinkButton = new LinkButton();
				tag.label = label;
				tag.setStyle("fontWeight","bold");
				tag.setStyle("fontFamily","Verdana");
				tag.setStyle("paddingRight",0);
				tag.setStyle("paddingLeft",0);
				tag.setStyle("fontSize", 18);
				tag.setStyle("color", 0x303030);
				tag.setStyle("textRollOverColor", 0xFF66666)
				tag.alpha = 0;
				tag.addEventListener(MouseEvent.CLICK, tagClickHandler);
				return tag;	
			}
			private function createTagLink3(label:String):LinkButton{
				var tag:LinkButton = new LinkButton();
				tag.label = label;
				tag.setStyle("fontWeight","bold");
				tag.setStyle("fontFamily","Verdana");
				tag.setStyle("paddingRight",0);
				tag.setStyle("paddingLeft",0);
				tag.setStyle("fontSize", 16);
				tag.setStyle("color", 0x303030);
				tag.setStyle("textRollOverColor", 0xFF66666)
				tag.alpha = 0;
				tag.addEventListener(MouseEvent.CLICK, tagClickHandler);
				return tag;	
			}
			private function createTagLink4(label:String):LinkButton{
				var tag:LinkButton = new LinkButton();
				tag.label = label;
				tag.setStyle("fontWeight","normal");
				tag.setStyle("fontFamily","Verdana");
				tag.setStyle("paddingRight",0);
				tag.setStyle("paddingLeft",0);
				tag.setStyle("fontSize", 16);
				tag.setStyle("color", 0x303030);
				tag.setStyle("textRollOverColor", 0xFF66666)
				tag.alpha = 0;
				tag.addEventListener(MouseEvent.CLICK, tagClickHandler);
				return tag;	
			}
			private function createTagLink5(label:String):LinkButton{
				var tag:LinkButton = new LinkButton();
				tag.label = label;
				tag.setStyle("fontWeight","normal");
				tag.setStyle("fontFamily","Verdana");
				tag.setStyle("paddingRight",0);
				tag.setStyle("paddingLeft",0);
				tag.setStyle("fontSize", 12);
				tag.setStyle("color", 0x303030);
				tag.setStyle("textRollOverColor", 0xFF66666)
				tag.alpha = 0;
				tag.addEventListener(MouseEvent.CLICK, tagClickHandler);
				return tag;	
			}
			private function createTagLink6(label:String):LinkButton{
				var tag:LinkButton = new LinkButton();
				tag.label = label;
				tag.setStyle("fontWeight","normal");
				tag.setStyle("fontFamily","Verdana");
				tag.setStyle("paddingRight",0);
				tag.setStyle("paddingLeft",0);
				tag.setStyle("fontSize", 9);
				tag.setStyle("color", 0x303030);
				tag.setStyle("textRollOverColor", 0xFF66666)
				tag.alpha = 0;
				tag.addEventListener(MouseEvent.CLICK, tagClickHandler);
				return tag;	
			}
			public function tagClickHandler(evt:MouseEvent):void{
			  	DataModel.getInstance().searchField=evt.target.label;
			  	DataModel.getInstance().tagCloudClicked=true;
				new SearchEvent(SearchEvent.LAUNCH_SEARCH).dispatch();
			}
		]]>
	</mx:Script>
	<mx:Binding source="{DataModel.getInstance().tagCloudRetrieved}"
	 			destination="this.onTagCloudRetrieved"/>
		
	<tc:FlowBox id="tagCloudBox" 
            width="100%"
            height="260"
            horizontalAlign="center"
            verticalAlign="middle"
            verticalGap="0"
            horizontalGap="0"
            paddingLeft="1"
            paddingTop="1"
            paddingBottom="1"
            paddingRight="1">
	</tc:FlowBox>
	 			
</mx:Panel>
