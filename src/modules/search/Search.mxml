<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:tc="modules.search.*"
		 width="100%">

	<mx:ArrayCollection id="sortFields1">
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_AUTOMATIC')}"
				   data="score"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_USER')}"
				   data="userName"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_LANGUAGE')}"
				   data="language"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_RATING')}"
				   data="avgRating"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_DIFFICULTY')}"
				   data="avgDifficulty"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_DATE')}"
				   data="addingDate"/>
	</mx:ArrayCollection>


	<mx:Script>
		<![CDATA[
			import model.DataModel;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Button;

			[Bindable]
			[Embed(source="../../resources/images/first.png")]
			public var firstI:Class;
			[Bindable]
			[Embed(source="../../resources/images/previous.png")]
			public var previousI:Class;
			[Bindable]
			[Embed(source="../../resources/images/next.png")]
			public var nextI:Class;
			[Bindable]
			[Embed(source="../../resources/images/last.png")]
			public var lastI:Class;

			[Bindable]
			private var dataProvider:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var dataTemp:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var currentCBIndex:int=0;
			[Bindable]
			private var descendingCB:Boolean=true;
			[Bindable]
			private var sortFields:ArrayCollection=new ArrayCollection([{label: "Automatic", data: "score"}, {label: "User", data: "userName"}, {label: "Language", data: "language"}, {label: "Rating", data: "avgRating"}, {label: "Difficulty", data: "avgDifficulty"}, {label: "Date", data: "addingDate"}]);
			

			public function set onSearchRetrieved(value:Boolean):void
			{
				if (DataModel.getInstance().videoSearchesRetrieved)
				{
					dataProvider=DataModel.getInstance().videoSearches;
					DataModel.getInstance().currentPage=1;
					sort.selectedIndex=0;
					if (dataProvider.length > 0)
					{
						labelSort.enabled=true;
						sort.enabled=true;
					}
					else
					{
						labelSort.enabled=false;
						sort.enabled=false;
					}
					createPaginationMenu();
					DataModel.getInstance().videoSearchesRetrieved=false;
					descendingCB=true;
					currentCBIndex=0;
				}
			}

			public function refreshDataProvider():void
			{
				var current:int=DataModel.getInstance().currentPage - 1;
				var pageSize:int=DataModel.getInstance().pageSize;
				dataTemp=new ArrayCollection(dataProvider.source.slice((current * pageSize), (current * pageSize) + pageSize));
				searchListTable.rowCount=dataTemp.length;
				searchListTable.dataProvider=dataTemp;
			}

			public function closeHandler(event:Event):void
			{
				var dataSortField:SortField=new SortField();
				var dataSortField1:SortField=new SortField();
				var dataSort:Sort=new Sort();
				var name:String=event.target.selectedItem.data;
				var eSI:int=event.target.selectedIndex;
				//Create the SortField object for the data
				dataSortField.numeric=false;
				dataSortField.name=name;
				if (currentCBIndex == eSI)
				{
					descendingCB=!descendingCB;
				}
				else
				{
					descendingCB=true;
				}
				dataSortField.descending=descendingCB;
				//Create the second SortField object for the data
				dataSortField1.numeric=false;
				dataSortField1.name="title";
				dataSortField1.descending=true;
				//Create the Sort object and add the SortField object to the array of fields to sort
				dataSort.fields=[dataSortField, dataSortField1];
				//Set the ArrayCollection objects sort property to our custom sort, and refresh
				dataProvider.sort=dataSort;
				dataProvider.refresh();
				dataProvider.source=dataProvider.toArray();
				currentCBIndex=eSI;
				DataModel.getInstance().currentPage=1;
				createPaginationMenu();
			}

			public function createPaginationMenu():void
			{
				var buttonCountInPaginationBox:int=DataModel.getInstance().numberOfPagesNav;
				var limit:int=(buttonCountInPaginationBox + 1) / 2;
				var itemsPerPage:int=DataModel.getInstance().pageSize;
				var searchItemCount:int=dataProvider.length;
				var currentPage:int=DataModel.getInstance().currentPage;
				var searchPageCount:int=(searchItemCount % itemsPerPage == 0) ? (searchItemCount / itemsPerPage) : searchItemCount / itemsPerPage + 1;

				destroyPaginationMenu();

				if (searchItemCount / itemsPerPage >= 1)
				{
					if (currentPage > 1)
					{
						paginationBox.addChild(createControlButton(1, firstI));
						paginationBox.addChild(createControlButton(currentPage -1, previousI));
					}
					if (currentPage <= limit)
					{
						for (var i:int=1; (i <= searchPageCount && i <= buttonCountInPaginationBox); i++)
						{
							paginationBox.addChild(createPageButton(i));
						}
					}
					else if (currentPage > searchPageCount - limit)
					{
						for (var j:int=searchPageCount - buttonCountInPaginationBox + 1; j <= searchPageCount; j++)
						{
							paginationBox.addChild(createPageButton(j));
						}
					}
					else
					{
						for (var k:int=currentPage - limit + 1; k <= currentPage + limit - 1; k++)
						{
							paginationBox.addChild(createPageButton(k));
						}
					}
					if (currentPage < searchPageCount)
					{
						paginationBox.addChild(createControlButton(currentPage+1, nextI));
						paginationBox.addChild(createControlButton(searchPageCount, lastI));
					}
				}
				for each (var b:Button in paginationBox.getChildren()){
					if(int(b.id) == currentPage){
						b.enabled=false;
						break;
					}
				}
				refreshDataProvider();
			}

			public function set onLanguage(value:Boolean):void
			{
				if (DataModel.getInstance().languageChanged)
				{
					var oldIndex:int=sort.selectedIndex;
					sort.dataProvider=sortFields1;
					sort.selectedIndex=oldIndex;
					DataModel.getInstance().languageChanged=false;
				}
			}

			private function destroyPaginationMenu():void
			{
				paginationBox.removeAllChildren();
			}

			private function createPageButton(label:int):Button
			{
				var navButton:Button=new Button();
				navButton.id=label.toString();
				navButton.label=label.toString();
				navButton.setStyle('cornerRadius', 4);
				navButton.setStyle('paddingLeft', 0);
				navButton.setStyle('paddingRight', 0);
				navButton.setStyle('hihglightAlphas', [0, 0]);
				navButton.setStyle('fillAlphas', [0, 0, 1, 1]);
				navButton.setStyle('fillColors', [0xffffff, 0xcccccc, 0xaadeff, 0xaadeff]);
				navButton.setStyle('fontFamily', 'Arial');
				navButton.setStyle('fontSize', 12);
				navButton.minWidth=24;
				navButton.measuredWidth=24;
				navButton.height=24;
				navButton.addEventListener(MouseEvent.CLICK, navigateToPage);

				return navButton;
			}
			
			private function createControlButton(target:int, icon:Class):Button{
				var ctrlButton:Button=new Button();
				ctrlButton.id=target.toString();
				ctrlButton.setStyle('cornerRadius', 4);
				ctrlButton.setStyle('paddingLeft', 1);
				ctrlButton.setStyle('paddingRight', 1);
				ctrlButton.setStyle('fontFamily', 'Arial');
				ctrlButton.setStyle('fontSize', 12);
				ctrlButton.setStyle('icon', icon);
				ctrlButton.width=24;
				ctrlButton.height=24;
				
				ctrlButton.addEventListener(MouseEvent.CLICK, navigateToPage);
				
				return ctrlButton;
			}

			private function navigateToPage(event:MouseEvent):void
			{
				//Go to the page
				DataModel.getInstance().currentPage = int((event.target as Button).id);
				//Refresh the pagination controls
				createPaginationMenu();
			}
		]]>
	</mx:Script>

	<mx:Binding source="{DataModel.getInstance().videoSearchesRetrieved}"
				destination="this.onSearchRetrieved"/>
	<mx:Binding source="{DataModel.getInstance().languageChanged}"
				destination="this.onLanguage"/>

	<mx:ApplicationControlBar>
		<mx:HBox>
			<mx:Label id="numResul"
					  text="{resourceManager.getString('myResources','SEARCH_RESULTSFOUND')} {dataProvider.length}"/>
			<mx:Label id="labelSort"
					  text="{resourceManager.getString('myResources','SEARCH_ORDERBY')}"
					  enabled="false"/>
			<mx:ComboBox id="sort"
						 fontWeight="normal"
						 close="closeHandler(event)"
						 editable="false"
						 enabled="false"
						 dataProvider="{sortFields1}">

			</mx:ComboBox>
		</mx:HBox>
	</mx:ApplicationControlBar>
	<mx:VBox width="100%">
		<mx:DataGrid id="searchListTable"
					 width="100%"
					 editable="false"
					 selectable="false"
					 verticalScrollPolicy="off"
					 sortableColumns="false"
					 draggableColumns="false"
					 headerHeight="0"
					 backgroundAlpha="0"
					 borderThickness="0">
			<mx:columns>
				<mx:DataGridColumn itemRenderer="modules.main.ExerciseListItem"/>
			</mx:columns>
		</mx:DataGrid>
		<!--
			 <mx:VBox>
			 <tc:TagCloud id="tagCloud"
			 title="{resourceManager.getString('myResources','SEARCH_TAGCLOUD')}"
			 width="300"
			 height="300">
			 </tc:TagCloud>
			 <mx:SWFLoader id="myLoader" width="300" height="300"
			 source="../libs/tagcloud.swf"/>
			 </mx:VBox>
		-->

		<mx:HBox id="paginationBox"
				 width="100%"
				 horizontalAlign="left"
				 horizontalGap="2"/>
	</mx:VBox>
</mx:VBox>
