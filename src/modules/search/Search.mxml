<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:tc="modules.search.*"
	width="100%"
	creationComplete="init()" >

	<mx:ArrayCollection id="sortFields1">
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_AUTOMATIC')}" data="score"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_USER')}" data="userName"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_LANGUAGE')}" data="language"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_RATING')}" data="avgRating"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_DIFFICULTY')}" data="avgDifficulty"/>
		<mx:Object label="{resourceManager.getString('myResources','SEARCH_CB_DATE')}" data="addingDate"/>
	</mx:ArrayCollection>
	

	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.ArrayCollection;
			import mx.events.ItemClickEvent;
			import model.DataModel;
				
				import view.common.CustomAlert;
				import mx.events.ResourceEvent;
				import mx.controls.Alert;
			
			[Bindable] private var dataProvider:ArrayCollection = new ArrayCollection();
			[Bindable] private var dataTemp:ArrayCollection = new ArrayCollection();
			[Bindable] private var nav:ArrayCollection =new ArrayCollection();
			[Bindable] public var sortFields:ArrayCollection = new ArrayCollection(
                [ {label:"Automatic", data:"score"}, 
                  {label:"User", data:"userName"}, 
                  {label:"Language", data:"language"},
                  {label:"Rating", data:"avgRating"},
                  {label:"Difficulty", data:"avgDifficulty"},
                  {label:"Date", data:"addingDate"}]);
					
			public function init():void{
				
				//sortFields1.addEventListener(FlexEvent.CURSOR_UPDATE,compet);
				//CustomAlert.error("init ejecutado");
			}
			public function compet(event:FlexEvent):void{
				CustomAlert.error("compet ejecutado");

				//var oldSelectedItem:Object=sort.selectedItem;
				//sort.dataProvider=sortFields1;
				//sort.selectedItem=oldSelectedItem;
				sort.dataProvider=sortFields1;
			}
		
			public function set onSearchRetrieved(value:Boolean):void{
				if (DataModel.getInstance().videoSearchesRetrieved){
					dataProvider=DataModel.getInstance().videoSearches;
					DataModel.getInstance().currentPage=1;
					sort.selectedIndex=0;
					if(dataProvider.length >0){
						labelSort.enabled=true;
						sort.enabled=true;
						pageNav.enabled=true;
					}else{
						labelSort.enabled=false;
						sort.enabled=false;
						pageNav.enabled=false;
					}
					createNavigatePage();
					DataModel.getInstance().videoSearchesRetrieved = false;
					//sort.dataProvider=sortFields2;
				}
			}
			
			public function refreshDataProvider():void{
             	var current:int=DataModel.getInstance().currentPage-1;
             	var pageSize:int=DataModel.getInstance().pageSize;
             	dataTemp = new ArrayCollection( dataProvider.source.slice((current * pageSize),(current * pageSize) + pageSize) );
        		searchListTable.rowCount=dataTemp.length;
				searchListTable.dataProvider=dataTemp;
        	}
		
        	public function closeHandler(event:Event):void {
        		var dataSortField:SortField=new SortField();
         		var dataSort:Sort=new Sort();
        		var name:String = event.target.selectedItem.data;
        		//Create the SortField object for the data
        		dataSortField.numeric=false;
        		dataSortField.name=name;
        		dataSortField.descending=true;
        		//Create the Sort object and add the SortField object to the array of fields to sort
        		dataSort.fields=[dataSortField];
        		//Set the ArrayCollection objects sort property to our custom sort, and refresh
        		dataProvider.sort=dataSort;
        		dataProvider.refresh();
        		dataProvider.source=dataProvider.toArray();
        		
        		DataModel.getInstance().currentPage=1;
        		createNavigatePage();
        	}
        	public function createNavigatePage():void{
        		var upm:int =DataModel.getInstance().numberOfPagesNav;
        		var upmt:int;
        		var psize:int=DataModel.getInstance().pageSize;
        		var tpxpm:int;
        		if (dataProvider.length%psize==0){
        			tpxpm =dataProvider.length/psize;
        		}else{
        			tpxpm =dataProvider.length/psize+1;
        		}
        		var current:int =DataModel.getInstance().currentPage;
        		var limit:int=(DataModel.getInstance().numberOfPagesNav+1)/2;
        		nav.removeAll();
        		nav.addItem({label:"|<",data:1});
        		if (current>1){
        			nav.addItem({label:"<",data:current-1});
        		}else{
        			nav.addItem({label:"<",data:1});
        		}
        		if (current<=limit){
        			for(upmt = 1; (upmt <= tpxpm && upmt <= upm); upmt++){
        				nav.addItem({label:upmt,data:upmt});
        			}
        		}else if(current>tpxpm-limit){
        			for(upmt = tpxpm-upm+1; upmt <= tpxpm; upmt++){
        				nav.addItem({label:upmt,data:upmt});
        			}
        		}else{
        			for(upmt = current-limit+1; upmt <= current+limit-1; upmt++){
        				nav.addItem({label:upmt,data:upmt});
        			}
        		}
        		//upm=upmt;
        		if (current<tpxpm){
        			nav.addItem({label:">",data:current+1});
        		}else{
        			nav.addItem({label:">",data:tpxpm});
        		}
				nav.addItem({label:">|",data:tpxpm});
				//DataModel.getInstance().lastPageShow=upm;
				refreshDataProvider();
				pageNav.dataProvider=nav;
        	}
        	public function navigatePage(event:ItemClickEvent):void{
        		var pag:int=event.item.data;
        		DataModel.getInstance().currentPage=pag;
        		createNavigatePage();  	      		
        	}
			public function set onlanguage(value:Boolean):void{
				if (DataModel.getInstance().languageChanged){
					CustomAlert.error("compet ejecutado");
					
					DataModel.getInstance().tagCloudClicked=false;
				}
			}	

		]]>
	</mx:Script>
	
	<mx:Binding source="{DataModel.getInstance().videoSearchesRetrieved}"
				destination="this.onSearchRetrieved"/>
	<mx:Binding source="{DataModel.getInstance().languageChanged}"
				destination="this.onlanguage"/>
	<mx:ApplicationControlBar>
		
	<mx:HBox>
		<mx:Label id="numResul"
				  text="{resourceManager.getString('myResources','SEARCH_RESULTSFOUND')} {dataProvider.length}"/>
		<mx:Label id="labelSort"
				text="{resourceManager.getString('myResources','SEARCH_ORDERBY')}"
				enabled="false"/>
		<mx:ComboBox id="sort"
				fontWeight="normal"
				close="closeHandler(event)"
				editable="false"
				enabled="false"
				dataProvider="{sortFields1}">
				
		</mx:ComboBox>				
		<mx:LinkBar id="pageNav" 
              	itemClick="navigatePage(event)"
              	horizontalGap="1" 
              	width="100%"
              	enabled="false"/>
	</mx:HBox>
	</mx:ApplicationControlBar>
	<mx:Canvas id="canvasScroll"
			   height="100%"
		       width="100%"
		       verticalScrollPolicy="auto"
		       horizontalScrollPolicy="off">
		<mx:HBox width="100%"
				 paddingRight="20">	
			<mx:DataGrid id="searchListTable"
						 width="75%"
						 editable="false"
						 selectable="false"
						 verticalScrollPolicy="off"
						 sortableColumns="false"
						 draggableColumns="false"
						 headerHeight="0">
				<mx:columns>
					<mx:DataGridColumn itemRenderer="modules.main.ExerciseListItem"/>
				</mx:columns>
			</mx:DataGrid>
			<tc:TagCloud id="tagCloud" 
						 title="{resourceManager.getString('myResources','SEARCH_TAGCLOUD')}"
						 width="300"
						 height="300">
			</tc:TagCloud>
		</mx:HBox>
	</mx:Canvas>
</mx:VBox>
