<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="modules.login.view.*"
		  width="100%"
		  implements="modules.IModuleInterface"
		  preinitialize="preinitializeHandler(event)"
		  creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import control.URLManager;
			
			import events.RegisterUserEvent;
			
			import model.DataModel;
			
			import modules.IGroupInterface;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;
			
			import spark.components.NavigatorContent;
			
			public static const INDEX:uint=0;
			public static const ACTIVATE:uint=1;
			public static const FORGOTPASSWORD:uint=2;

			
			private var changewatcher:ChangeWatcher;
			
			public var modulename:String = 'login';
			
			[Bindable]
			private var _urlmanager:URLManager=URLManager.getInstance();
			
			[Bindable]
			private var _model:DataModel=DataModel.getInstance();
			
			[Bindable]
			private var _viewstackIndex:uint;
			
			private var _creationComplete:Boolean;
			
			public function getModuleName():String{
				return modulename;
			}
			
			public function setDataBindings(data:* = null):void{
				changewatcher=BindingUtils.bindSetter(onURLChange, _urlmanager, "action", false, true);
			}
			
			public function resetModule():void{
				if(changewatcher && changewatcher.isWatching())
					changewatcher.unwatch();
				changewatcher=null;
				_urlmanager=null;
				_model=null;
				
				this.removeEventListener(FlexEvent.PREINITIALIZE, preinitializeHandler);
				this.removeEventListener(FlexEvent.CREATION_COMPLETE, creationCompleteHandler);
				this.removeEventListener(FlexEvent.ADD, componentAddedHandler);
				this.removeEventListener(FlexEvent.UPDATE_COMPLETE, componentUpdateCompleteHandler);
				
				resetViews();
			}
			
			public function resetViews():void{
				if (loginViewstack)
				{
					var views:Array=loginViewstack.getChildren();
					for each (var nc:NavigatorContent in views)
					{
						if (nc.deferredContentCreated)
						{
							var v:*=nc.getElementAt(0) as IGroupInterface;
							if (v)
								v.resetGroup();
						}
					}
				}
			}
			
			public function onURLChange(value:String):void{
				if (_urlmanager.moduleName != modulename)
					return;
				
				resetViews();
				switch (_urlmanager.action)
				{
					case 'activate':
						actionActivate(_urlmanager.parameters);
						break;
					case 'forgotpassword':
						actionForgotpassword();
						break;
					default:
						actionIndex();
						break;
				}
			}
			
			public function actionIndex():void{
				_viewstackIndex = INDEX;
			}
			
			public function actionActivate(parameters:Object):void{
				_viewstackIndex = ACTIVATE;
				if (parameters != null)
				{
					if (parameters.hash != '' && parameters.user != '')
					{
						var user:Object;
						user.username=parameters.user;
						user.hash=parameters.hash;
						new RegisterUserEvent(RegisterUserEvent.ACTIVATE_USER, user).dispatch();
					}
				}
			}
			
			public function actionForgotpassword():void{
				_viewstackIndex = FORGOTPASSWORD;
			}
			
			protected function preinitializeHandler(event:FlexEvent):void
			{
				//if(!_model.moduleMap.hasOwnProperty(modulename))
				//	_model.moduleMap[modulename] = new CourseModel();
				
				// The Event.ADDED and Event.ADDED_TO_STAGE events are dispatched before FlexEvent.PREINITIALIZE
				// that leaves only FlexEvent.ADD to know the component has been added as a child somewhere.
				this.addEventListener(FlexEvent.ADD, componentAddedHandler, false, 0, true);
				this.addEventListener(FlexEvent.UPDATE_COMPLETE, componentUpdateCompleteHandler, false, 0, true);
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_creationComplete=true;
			}
			
			protected function componentAddedHandler(event:FlexEvent):void{
				this.visible=false;
			}
			
			protected function componentUpdateCompleteHandler(event:FlexEvent):void{
				checkPermissions();
			}
			
			protected function checkPermissions():void{
				if (DataModel.getInstance().isLoggedIn)
				{
					URLManager.getInstance().redirect('course');
					return;
				}
				this.visible=true;
			}
			
		]]>
	</fx:Script>
	
	<mx:ViewStack id="loginViewstack"
				  selectedIndex="{ _viewstackIndex }"
				  resizeToContent="true"
				  width="100%"
				  height="100%">
		<s:NavigatorContent id="index">
			<view:LoginIndex id="loginIndex"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="activate">
			<view:LoginActivate id="loginActivate"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="forgotpassword">
			<view:LoginForgotpassword id="loginForgotpassword"/>
		</s:NavigatorContent>
	</mx:ViewStack>
</s:Module>
