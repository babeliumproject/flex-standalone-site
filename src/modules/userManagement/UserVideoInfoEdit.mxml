<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:common="view.common.*"
		  xmlns:skins="skins.*"
		  width="100%"
		  creationComplete="completeHandler(event)"
		  xmlns:videoPlayer="modules.videoPlayer.*">


	<s:Label id="editVideoTitle"
			 text="{resourceManager.getString('myResources','EDIT_VIDEO_INFO')}"
			 styleName="sectionTitleLabel"/>
	<s:Line width="{editVideoTitle.width}">
		<s:stroke>
			<mx:SolidColorStroke weight="3"
								 color="{editVideoTitle.getStyle('color')}"/>
		</s:stroke>
	</s:Line>

	<s:HGroup width="100%">
		<mx:Form width="100%"
				 styleName="roundedBlueBorderBox">
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_TITLE')}"
						 width="100%"
						 styleName="boldLabel"
						 required="true">
				<s:TextInput width="100%"
							 id="videoTitle"/>
			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_DESCRIPTION')}"
						 width="100%"
						 styleName="boldLabel"
						 required="true">
				<s:TextArea width="100%"
							id="videoDescription"
							maxChars="500"
							fontWeight="normal"/>
			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_TAGS')}"
						 width="100%"
						 styleName="boldLabel"
						 toolTip="{resourceManager.getString('myResources','COMMA_SEPARATED_WORDS')}"
						 required="true">
				<s:TextArea width="100%"
							heightInLines="3"
							id="videoTags"
							maxChars="255"
							fontWeight="normal"/>
			</mx:FormItem>
			
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_DIFFICULTY_LEVEL')}"
						 styleName="boldLabel"
						 required="true"
						 width="100%">
				<common:LocalizedComboBox id="difficultyLevelCombo"
										  translatableDataProvider="{dpDifficultyLevel}"
										  fontWeight="normal"
										  change="onConditionalComboChange(event)"/>
			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_LANGUAGE')}"
						 styleName="boldLabel"
						 required="true">
				<common:LanguageComboBox id="languageSelector"/>
			</mx:FormItem>
			
			<mx:FormItem id="exerciseType"
						 required="true"
						 styleName="boldLabel"
						 label="{resourceManager.getString('myResources','EXERCISE_TYPE')}"
						 width="100%">
				<common:LocalizedComboBox id="exerciseTypeCombo"
										  translatableDataProvider="{dpExerciseType}"
										  fontWeight="normal"
										  change="onConditionalComboChange(event)"/>
			</mx:FormItem>
			<mx:FormItem id="commSituation"
						 styleName="boldLabel"
						 label="{resourceManager.getString('myResources', 'COMMUNICATION_SITUATION')}"
						 width="100%">
				<common:LocalizedComboBox id="commSituationCombo"
										  translatableDataProvider="{dpCommSituation}"
										  fontWeight="normal"
										  change="onConditionalComboChange(event)"/>
			</mx:FormItem>
			<mx:FormItem id="commCompetence"
						 styleName="boldLabel"
						 label="{resourceManager.getString('myResources', 'COMMUNICATIVE_COMPETENCE')}"
						 width="100%">
				<s:HGroup width="100%">
					<common:LocalizedComboBox id="commCompetenceCombo"
											  translatableDataProvider="{dpCommCompetence}"
											  fontWeight="normal"
											  change="onConditionalComboChange(event)"/>
					<skins:IconButton styleName="commonLinkButton"
									  label="{resourceManager.getString('myResources','DESCRIPTORS')}"
									  click="showHideDescriptorsClickHandler(event)"/>
				</s:HGroup>
				<s:VGroup id="descriptorContainer"
						  width="100%"
						  visible="false"
						  includeInLayout="false"/>
				
			</mx:FormItem>
			<mx:FormItem id="linguisticAspect"
						 label="{resourceManager.getString('myResources','LINGUISTIC_ASPECT')}"
						 styleName="boldLabel"
						 width="100%">
				<common:LocalizedComboBox id="lingAspectCombo"
										  translatableDataProvider="{dpLingAspect}"
										  fontWeight="normal"/>
			</mx:FormItem>
			
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_SPECIFY_LICENSE')}"
						 styleName="boldLabel"
						 required="true">
				<common:LicenseComboBox id="licenseSelector"/>
			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_VIDEO_OWNER_AUTHOR')}"
						 styleName="boldLabel"
						 toolTip="{resourceManager.getString('myResources','TOOLTIP_VIDEO_OWNER_AUTHOR')}"
						 width="100%">
				<s:TextInput width="100%"
							 id="referenceUrl"/>
			</mx:FormItem>

			<!--
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_AUTOMATIC_EVALUATION')}"
						 styleName="boldLabel"
						 visible="{DataModel.getInstance().loggedUser.isAdmin}"
						 includeInLayout="{DataModel.getInstance().loggedUser.isAdmin}"
						 height="67">
				<s:CheckBox label="{resourceManager.getString('myResources','LABEL_ADD_AUTOMATIC_EVALUATION_IF_POSSIBLE')}"
							id="autoevaluateCheckbox"/>
				<mx:FormItem label="{resourceManager.getString('myResources','LABEL_CHOOSE_TRANSCRIPTION_SYSTEM')}"
							 styleName="boldLabel">
					<common:TranscriptionSystemComboBox id="transcSystemSelector"/>
				</mx:FormItem>
			</mx:FormItem>
			-->
		</mx:Form>

		<videoPlayer:VideoPlayerBabelia id="VP"
										layoutDirection="ltr"
										autoPlay="false"
										skin="white"
										seek="true"
										subtitles="false"
										autoScale="false"
										arrows="false"
										subtitlingControls="false"
										width="426"
										height="240"
										streamSource="{_streamSource}"
										controlsEnabled="false"/>
	</s:HGroup>

	<s:HGroup width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle">
		<skins:IconButton id="saveButton"
						  label="{resourceManager.getString('myResources','BUTTON_SAVE_NEWPASS')}"
						  click="saveChangesClickHandler(event)"
						  skinClass="skins.IconButtonSkin"
						  icon="@Embed('/resources/images/save.png')"/>

		<skins:IconButton id="cancelButton"
						  label="{resourceManager.getString('myResources','BUTTON_CANCEL')}"
						  skinClass="skins.IconButtonSkin"
						  icon="@Embed('/resources/images/cancel.png')"/>

	</s:HGroup>

	<fx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="onTabChange"/>
	<fx:Binding source="{DataModel.getInstance().videoDataModified}"
				destination="videoDataModified"/>
	
	<fx:Declarations>
		<mx:StringValidator id="titleValidator"
							source="{videoTitle}"
							property="text"
							minLength="3"
							maxLength="80"/>
		<mx:StringValidator id="descriptionValidator"
							source="{videoDescription}"
							property="text"
							minLength="3"
							maxLength="512"/>
		<mx:StringValidator id="tagValidator"
							source="{videoTags}"
							property="text"
							minLength="3"
							maxLength="255"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import events.UserEvent;
			
			import model.DataModel;
			import model.LocalesAndFlags;
			import model.ResourceSubscriber;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.utils.ObjectUtil;
			import mx.validators.Validator;
			
			import spark.components.CheckBox;
			
			import view.common.CustomAlert;
			
			import vo.ExerciseVO;
			
			private const EXERCISE_FOLDER:String=DataModel.getInstance().exerciseStreamsFolder;

			private var _dataModel:DataModel = DataModel.getInstance();
			private var _descriptors:Array;
			private var _localesAndFlags:LocalesAndFlags=DataModel.getInstance().localesAndFlags;
			
			// Holds a reference to the currently focussed control on the form.
			private var focussedFormControl:DisplayObject;
			
			[Bindable] public var formIsValid:Boolean=false;
			
			[Bindable]
			private var dpDifficultyLevel:ArrayCollection=new ArrayCollection([
				{'code': 0, 'label': 'LEVEL_A1'}, {'code': 1, 'label': 'LEVEL_A2'}, {'code': 2, 'label': 'LEVEL_B1'}, {'code': 3, 'label': 'LEVEL_B2'}, {'code': 4, 'label': 'LEVEL_C1'}
			]);
			
			[Bindable]
			private var dpExerciseType:ArrayCollection=new ArrayCollection([
				{'code': 0, 'label': 'LANGUAGE_PRACTICE'}, {'code': 1, 'label': 'FREE_CONTEXT'}, {'code': 2, 'label': 'CONVERSATION'}, {'code': 3, 'label': 'STORYTELLING'}, {'code': 4, 'label': 'VOICE_OVER'}, {'code': 5, 'label': 'OTHER'}
			]);
			
			[Bindable]
			private var dpCommSituation:ArrayCollection=new ArrayCollection([
				{'code': 0, 'label': 'EVERYDAY_LIFE_AND_TOURISM'}, {'code': 1, 'label': 'STUDIES'}, {'code': 2, 'label': 'WORK'}
			]);
			
			[Bindable]
			private var dpLingAspect:ArrayCollection=new ArrayCollection([
				{'code': 0, 'label': 'ADVERB_ADJECTIVE'}, {'code': 1, 'label': 'FORMS_OF_QUESTIONS'}, {'code': 2, 'label': 'NEGATION'}, {'code': 3, 'label': 'NOUN'}, {'code': 4, 'label': 'PRONOUNS'}, {'code': 5, 'label': 'PRONUNCIATION'}, {'code': 6, 'label': 'VERB'}, {'code': 7, 'label': 'VOCABULARY'}
			]);
			
			[Bindable]
			private var dpCommCompetence:ArrayCollection;
						
			private var competenceLabels:Array=['DEALING_WITH_EMERGENCY_SITUATIONS', 'DESCRIBING_EXPERIENCES', 'DEVELOPING_AN_ARGUMENT', 'GENERAL_WORK', 'GETTING_STAYING_WELL', 'GIVING_PRESENTATIONS', 'GOING_OUT_TO_EAT', 'GOING_SHOPPING', 'MAKING_A_TRIP', 'MAKING_ARRANGEMENTS', 'PARTICIPATING_IN_AN_INTERVIEW', 'PARTICIPATING_IN_CLASS', 'PARTICIPATING_IN_MEETINGS', 'PUBLIC_SPEAKING', 'SIGHTSEEING', 'SOCIALIZING', 'SPEAKING_ABOUT_ONESELF', 'STAYING_AT_A_HOTEL', 'TELEPHONING', 'USING_FINANCIAL_AND_POSTAL_SERVICES'];
			
			private var compMatrix:Array;
			
			[Bindable] private var red5VideoData:ExerciseVO;
			[Bindable] private var _streamSource:String=DataModel.getInstance().streamingResourcesPath;

			private function completeHandler(event:FlexEvent):void
			{
				videoTitle.addEventListener(Event.CHANGE, validateForm);
				videoDescription.addEventListener(Event.CHANGE, validateForm);
				videoTags.addEventListener(Event.CHANGE, validateForm);
				getDescriptorCodesFromResourceFile();
			}

			public function resetComponent():void
			{
				VP.endVideo();
				VP.videoSource = '';
				VP.autoPlay = false;

				//Reset the combobox components
				languageSelector.selectedIndex=0;
				difficultyLevelCombo.selectedIndex=0;
				licenseSelector.selectedIndex=0;

				//Reset the descriptors
				updateCommCompetences(0,0);
				updateDescriptors(0,0,0);
				
				descriptorContainer.visible = false;
				descriptorContainer.includeInLayout = false;
				
				//Reset the video form fields
				videoTitle.removeEventListener(Event.CHANGE, validateForm);
				videoDescription.removeEventListener(Event.CHANGE, validateForm);
				videoTags.removeEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=false;
				descriptionValidator.enabled=false;
				tagValidator.enabled=false;

				videoTitle.text="";
				videoDescription.text="";
				videoTags.text="";
				referenceUrl.text="";
				videoTitle.addEventListener(Event.CHANGE, validateForm);
				videoDescription.addEventListener(Event.CHANGE, validateForm);
				videoTags.addEventListener(Event.CHANGE, validateForm);

				titleValidator.enabled=true;
				descriptionValidator.enabled=true;
				tagValidator.enabled=true;
			}


			private function validateForm(event:Event):void
			{
				focussedFormControl=event.target as DisplayObject;

				// Mark the form as valid to start with                
				formIsValid=true;

				validate(titleValidator);
				validate(descriptionValidator);
				validate(tagValidator);
				//validate(fileGridValidator);
			}

			private function validate(validator:Validator):Boolean
			{
				var validatorSource:DisplayObject=validator.source as DisplayObject;
				var suppressEvents:Boolean=(validatorSource != focussedFormControl);
				var event:ValidationResultEvent=validator.validate(null, suppressEvents);
				var currentControlIsValid:Boolean=(event.type == ValidationResultEvent.VALID);

				formIsValid=formIsValid && currentControlIsValid;

				return currentControlIsValid;
			}

			private function checkExternalUrl(url:String):Boolean
			{
				var pattern:RegExp=new RegExp("^http[s]?\:\\/\\/([^\\/]+)");
				var result:Object=pattern.exec(url);
				if (result == null || url.length >= 4096)
				{
					return (false);
				}
				return (true);
			}

			private function parseTags(tags:String):String
			{
				return tags;
			}

			private function fieldHasData(fieldText:String):Boolean
			{
				var fieldData:String=fieldText.replace(/[ ,\;.\:\-_?¿¡!€$']*/, "");
				return (fieldData.length < 1) ? false : true;
			}
			
			private function selectPreviousDescriptors(savedDescriptors:*):void{
				var containsSaved:Boolean=false;
				if(savedDescriptors){
					var savedDescCollection:ArrayCollection = new ArrayCollection(savedDescriptors);
					trace(ObjectUtil.toString(savedDescCollection));
					for(var i:int=0; i<descriptorContainer.numElements; i++){
						var item:IVisualElement = descriptorContainer.getElementAt(i);
						if((item is CheckBox)){
							var descriptor:String = (item as CheckBox).id;
							trace(descriptor);
							if(savedDescCollection.contains(descriptor)){
								(item as CheckBox).selected=true;
								containsSaved=true;
							}
						}
					}
				}
				if(containsSaved){
					descriptorContainer.visible = true;
					descriptorContainer.includeInLayout = true;
				}
			}
			
			private function showHideDescriptorsClickHandler(e:MouseEvent):void{
				descriptorContainer.visible = !descriptorContainer.visible;
				descriptorContainer.includeInLayout = !descriptorContainer.includeInLayout;
			}

			private function saveChangesClickHandler(event:MouseEvent):void
			{

				var validUrl:Boolean=true;
				if (fieldHasData(videoTitle.text) && fieldHasData(videoDescription.text) && fieldHasData(videoTags.text))
				{
					red5VideoData.title=videoTitle.text;
					red5VideoData.description=videoDescription.text;
					red5VideoData.tags=parseTags(videoTags.text);
					red5VideoData.language=languageSelector.selectedItem.code;

					red5VideoData.license=String(licenseSelector.selectedItem.code).toLowerCase();
					red5VideoData.reference=referenceUrl.text;

					//Since when uploading we only have this difficulty, it reflects the average difficulty of the exercise
					red5VideoData.avgDifficulty=difficultyLevelCombo.selectedIndex + 1;
					
					var exercisetype:int=exerciseTypeCombo.selectedItem['code'];
					if(exercisetype!=0 && exercisetype!=5){
						red5VideoData.type=exerciseTypeCombo.selectedItem['code'];
						red5VideoData.situation=commSituationCombo.selectedItem['code'];
						red5VideoData.competence=commCompetenceCombo.selectedItem['code'];
						red5VideoData.lingaspect=lingAspectCombo.selectedItem['code'];
						//If the user chose any level descriptors, those must be saved too
						var descriptors:Array=new Array();
						for(var i:int=0; i<descriptorContainer.numElements; i++){
							var item:IVisualElement = descriptorContainer.getElementAt(i);
							if((item is CheckBox) && (item as CheckBox).selected){
								var descriptor:String = (item as CheckBox).id;
								descriptors.push(descriptor);
							}
						}
						red5VideoData.descriptors=descriptors;
					}

					new UserEvent(UserEvent.MODIFY_VIDEO_DATA, null, null, red5VideoData).dispatch();
				}
				else
					CustomAlert.error(resourceManager.getString('myResources', 'MESSAGE_FILL_THE_REQUIRED_FIELDS'));
			}

			public function set cancelClickHandler(cancelFunction:Function):void
			{
				cancelButton.addEventListener(MouseEvent.CLICK, cancelFunction);
			}

			protected function set onTabChange(value:Boolean):void
			{
				VP.endVideo();
				//resetComponent();
			}

			public function setInformation(data:ExerciseVO):void
			{
				red5VideoData=data;
				videoTitle.text=red5VideoData.title;
				videoDescription.text=red5VideoData.description;
				videoTags.text=red5VideoData.tags;
				languageSelector.dataProvider = _localesAndFlags.availableLanguages;
				languageSelector.selectedItem=_localesAndFlags.getLocaleAndFlagGivenLocaleCode(red5VideoData.language);
				licenseSelector.dataProvider = licenseSelector.licenses;
				licenseSelector.selectedItem=licenseSelector.getLicenseAndIconGivenCode(red5VideoData.license);
				referenceUrl.text=red5VideoData.reference;
				difficultyLevelCombo.selectedIndex=red5VideoData.avgDifficulty - 1;
				difficultyLevelCombo.dispatchEvent(new ListEvent(ListEvent.CHANGE));

				//The previous function should have created the descriptors of the selected level
				selectPreviousDescriptors(red5VideoData.descriptors);
				
				VP.stopVideo();
				VP.state=VideoPlayerBabelia.PLAY_STATE;
				VP.controlsEnabled=true;
				VP.videoSource=EXERCISE_FOLDER + '/' + red5VideoData.name;
			}

			private function set videoDataModified(value:Boolean):void
			{
				if (DataModel.getInstance().videoDataModified == true)
				{
					CustomAlert.info(resourceManager.getString('myResources', 'VIDEO_DATA_SUCCESSFULLY_MODIFIED'));
					cancelButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					DataModel.getInstance().videoDataModified=false;
				}
			}
			
			/**
			 * Exercise categorization functions
			 */
			protected function onConditionalComboChange(event:ListEvent):void
			{
				
				var dispatchingComponent:LocalizedComboBox=LocalizedComboBox(event.target);
				var listItem:Object=dispatchingComponent.selectedItem;
				
				var currentLevel:int=difficultyLevelCombo.selectedIndex;
				
				var currentSituation:int=commSituation.visible ? commSituationCombo.selectedItem['code'] : -1;
				var currentCompetence:int=commCompetence.visible ? commCompetenceCombo.selectedItem['code'] : -1;
				
				switch (dispatchingComponent.id)
				{
					case exerciseTypeCombo.id:
						displayCommExerciseFields(listItem);
						break;
					case difficultyLevelCombo.id:
						updateCommCompetences(currentLevel, currentSituation);
						updateDescriptors(currentLevel, currentSituation, currentCompetence);
						break;
					case commSituationCombo.id:
						updateCommCompetences(currentLevel, currentSituation);
						updateDescriptors(currentLevel, currentSituation, currentCompetence);
						break;
					case commCompetenceCombo.id:
						updateDescriptors(currentLevel, currentSituation, currentCompetence);
						break;
					default:
						break;
				}
			}
			
			protected function displayCommExerciseFields(item:Object):void
			{
				if (item.hasOwnProperty('code') && (item['code']==0 || item['code']==5))
				{ //Language practice
					commSituation.includeInLayout=false;
					commSituation.visible=false;
					commCompetence.includeInLayout=false;
					commCompetence.visible=false;
					linguisticAspect.includeInLayout=false;
					linguisticAspect.visible=false;
				}
				else
				{ //Communicative
					commSituation.includeInLayout=true;
					commSituation.visible=true;
					commCompetence.includeInLayout=true;
					commCompetence.visible=true;
					linguisticAspect.includeInLayout=true;
					linguisticAspect.visible=true;
				}
			}
			
			protected function updateCommCompetences(level:int, situation:int):void
			{
				if (level == -1 || situation == -1)
					return;
				var newCompetences:Array=compMatrix[situation][level];
				trace("Competences for level["+level+"] situation["+situation+"] : "+ObjectUtil.toString(newCompetences));
				populateCommCompetences(newCompetences);
			}
			
			protected function populateCommCompetences(compCodes:Array):void
			{
				var startingCompetences:Array=new Array();
				for (var i:int=0; i < compCodes.length; i++)
				{
					startingCompetences.push({'code': compCodes[i], 'label': competenceLabels[compCodes[i]]});
				}
				dpCommCompetence=new ArrayCollection(startingCompetences);
			}
			
			protected function updateDescriptors(level:int, situation:int, competence:int):void
			{
				if (level == -1 || situation == -1 || competence == -1)
					return;
				
				removeDescriptors();
				if(!_descriptors) getDescriptorCodesFromResourceFile();
				
				var compDescriptors:Array = _descriptors[situation][level][competence];
				if (compDescriptors){
					for (var item:Object in compDescriptors){
						var chkBox:CheckBox=new CheckBox();
						chkBox.id=compDescriptors[item];
						chkBox.percentWidth=100;
						
						chkBox.label=resourceManager.getString("myResources", chkBox.id);
						ResourceSubscriber.getInstance().subscribeElement(chkBox, "label", "myResources", compDescriptors[item] as String);
						descriptorContainer.addElement(chkBox);
					}
				}
			}
			
			private function getDescriptorCodesFromResourceFile():void
			{
				var resources:Object=resourceManager.getResourceBundle("en_US", "myResources").content;
				var descriptorPattern:RegExp=/D(\d)_(\d)_(\d{2})_(\d)/;
				for (var item:Object in resources)
				{
					var key:String=item as String;
					//Filter the keys that match the descriptor pattern
					var matches:Array=key.match(descriptorPattern);
					if (matches && matches.length)
					{
						if (!_descriptors)
							_descriptors=new Array();
						
						var situation:int = int(matches[1])-1;
						if(!_descriptors[situation])
							_descriptors[situation] = new Array();
						
						var level:int = int(matches[2])-1;
						if(!_descriptors[situation][level])
							_descriptors[situation][level] = new Array();
						
						var competence:int = int(matches[3])-1;
						if(!_descriptors[situation][level][competence])
							_descriptors[situation][level][competence] = new Array();
						
						var dnumber:int = int(matches[4])-1;
						_descriptors[situation][level][competence][dnumber] = key;
					}
				}
			}
			
			private function removeDescriptors():void
			{
				if (descriptorContainer.numElements)
				{
					ResourceSubscriber.getInstance().unsubscribeContainerElements(descriptorContainer);
					descriptorContainer.removeAllElements();
				}
			}
		]]>
	</fx:Script>
</s:VGroup>
