<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:main="modules.main.*"
		  xmlns:userManagement="modules.userManagement.*"
		  width="100%"
		  creationComplete="onComplete(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.crypto.SHA1;

			import events.RegisterUserEvent;
			import events.ViewChangeEvent;

			import model.DataModel;
			import model.LocalesAndFlags;

			import mx.collections.ArrayCollection;
			import mx.controls.ToolTip;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.ToolTipManager;

			import spark.components.Group;

			import view.common.CustomAlert;
			import view.common.IconComboBox;
			import view.common.LanguageComboBox;

			import vo.NewUserVO;
			import vo.UserLanguageVO;

			public static const AVAILABLE_LANGUAGES:int=4;

			private var _localesAndFlags:LocalesAndFlags=DataModel.getInstance().localesAndFlags;

			//These variables are used to store the several combobox's info the user might add
			private var motherLanguagesArray:ArrayCollection=new ArrayCollection();
			private var knownLanguagesArray:ArrayCollection=new ArrayCollection();
			private var interestLanguagesArray:ArrayCollection=new ArrayCollection();

			private var motherTongue:LanguageComboBox;
			private var knownLanguage:LanguageKnowledgeBox;
			private var interestLanguage:LanguageKnowledgeBox;


			private var selectedLanguages:ArrayCollection=new ArrayCollection();

			[Bindable]
			private var errorMessageToolTips:Array=new Array;

			public function onComplete(event:FlexEvent):void
			{
				resetToInitialStatus();
			}

			public function addInitialComboboxes():void
			{
				motherTongue=new LanguageComboBox();
				motherTongue.addEventListener(FlexEvent.CREATION_COMPLETE, languageComboBoxCreated);
				motherLanguagesBox.addElement(motherTongue);
				motherLanguagesArray.addItem(motherTongue);

				knownLanguage=new LanguageKnowledgeBox();
				knownLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedKnown);
				knownLanguagesBox.addElement(knownLanguage);
				knownLanguagesArray.addItem(knownLanguage);

				interestLanguage=new LanguageKnowledgeBox();
				interestLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedInterest);
				interestLanguagesBox.addElement(interestLanguage);
				interestLanguagesArray.addItem(interestLanguage);
			}

			private function languageComboBoxCreated(event:FlexEvent):void
			{
				(event.currentTarget as LanguageComboBox).dataProvider=_localesAndFlags.availableLanguages;
				(event.currentTarget as LanguageComboBox).selectedIndex=-1;
				(event.currentTarget as LanguageComboBox).name="motherLangs";
				(event.currentTarget as LanguageComboBox).addEventListener(ListEvent.CHANGE, languageComboBoxChangeHandler);
			}

			private function languageKnowledgeBoxCreatedKnown(event:FlexEvent):void
			{
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.dataProvider=_localesAndFlags.availableLanguages;
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.selectedIndex=-1;
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.name="knowLangs";
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.addEventListener(ListEvent.CHANGE, languageComboBoxChangeHandler);
			}

			private function languageKnowledgeBoxCreatedInterest(event:FlexEvent):void
			{
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.dataProvider=_localesAndFlags.availableLanguages;
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.selectedIndex=-1;
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.name="interestLangs";
				(event.currentTarget as LanguageKnowledgeBox).languageCombo.addEventListener(ListEvent.CHANGE, languageComboBoxChangeHandler);
			}

			public function languageComboBoxChangeHandler(event:ListEvent):void
			{
				var dispatchingItem:IconComboBox=IconComboBox(event.target);

				if (dispatchingItem.selectedIndex != -1)
				{
					switch (dispatchingItem.name)
					{
						case "knownLangs":
							for each (var olcb:LanguageKnowledgeBox in knownLanguagesArray)
							{
								if (olcb.languageCombo.selectedIndex != -1 && olcb.languageCombo != dispatchingItem && olcb.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
								{
									olcb.languageCombo.selectedIndex=-1;
								}
							}
							break;

						case "interestLangs":
							for each (var ilcb:LanguageKnowledgeBox in interestLanguagesArray)
							{
								if (ilcb.languageCombo.selectedIndex != -1 && ilcb.languageCombo != dispatchingItem && ilcb.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
								{
									ilcb.languageCombo.selectedIndex=-1;
								}
							}
							break;

						case "motherLangs":

							for each (var olcbm:LanguageKnowledgeBox in knownLanguagesArray)
							{
								if (olcbm.languageCombo.selectedIndex != -1 && olcbm.languageCombo != dispatchingItem && olcbm.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
								{
									olcbm.languageCombo.selectedIndex=-1;
								}
							}
							for each (var ilcbm:LanguageKnowledgeBox in interestLanguagesArray)
							{
								if (ilcbm.languageCombo.selectedIndex != -1 && ilcbm.languageCombo != dispatchingItem && ilcbm.languageCombo.selectedItem.code == dispatchingItem.selectedItem.code)
								{
									ilcbm.languageCombo.selectedIndex=-1;
								}
							}
							break;
					}
					for each (var mlcb:LanguageComboBox in motherLanguagesArray)
					{
						if (mlcb.selectedIndex != -1 && mlcb != dispatchingItem && mlcb.selectedItem.code == dispatchingItem.selectedItem.code)
						{
							mlcb.selectedIndex=-1;
						}
					}
				}
			}

			private function processNewUser():void
			{

				var mLangCollection:ArrayCollection=new ArrayCollection();
				var kLangCollection:ArrayCollection=new ArrayCollection();
				var iLangCollection:ArrayCollection=new ArrayCollection();

				for each (var mLang:LanguageComboBox in motherLanguagesArray)
				{
					if (mLang.selectedIndex != -1)
						mLangCollection.addItem(new UserLanguageVO(0, mLang.selectedItem.code, 7, UserLanguageVO.PURPOSE_EVALUATE, 0));
				}
				for each (var kLang:LanguageKnowledgeBox in knownLanguagesArray)
				{
					if (kLang.languageCombo.selectedIndex != -1)
						kLangCollection.addItem(new UserLanguageVO(0, kLang.languageCombo.selectedItem.code, kLang.levelCombo.selectedIndex + 1, UserLanguageVO.PURPOSE_EVALUATE, 0));
				}
				for each (var iLang:LanguageKnowledgeBox in interestLanguagesArray)
				{
					if (iLang.languageCombo.selectedIndex != -1)
						iLangCollection.addItem(new UserLanguageVO(0, iLang.languageCombo.selectedItem.code, kLang.levelCombo.selectedIndex + 1, UserLanguageVO.PURPOSE_PRACTICE, 0));
				}


				var mLangArray:Array=mLangCollection.toArray();
				var kLangArray:Array=kLangCollection.toArray();
				var iLangArray:Array=iLangCollection.toArray();
				if (mLangArray.length > 0 && iLangArray.length > 0)
				{
					var languages:Array=mLangArray.concat(kLangArray, iLangArray);


					if (FieldValidator.validateTextInput(errorMessageToolTips, username, 'USERNAME', FieldValidator.FIELD_PATTERN, true, true, true, false, 4, 20) && FieldValidator.validateTextInput(errorMessageToolTips, email, 'EMAIL', FieldValidator.MAIL_PATTERN_LAX, false, false) && FieldValidator.validateTextInput(errorMessageToolTips, password, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40) && FieldValidator.validateTextInput(errorMessageToolTips, repassword, 'REPASSWORD', FieldValidator.ANY_PATTERN, false, false, false, true, 1, 200, password.text))
					{
						var user:NewUserVO=new NewUserVO(username.text, SHA1.hash(password.text), realName.text, surname.text, email.text, '', languages);
						new RegisterUserEvent(RegisterUserEvent.REGISTER_USER, user).dispatch();
					}
					else
					{
						CustomAlert.error("You have errors in your form.");
					}
				}
				else
				{
					CustomAlert.error("You must choose your mother tongue and the language you want to practice.");
				}
			}

			protected function addAnotherKnownLang_clickHandler(event:MouseEvent):void
			{
				if (knownLanguagesArray.length < SignUpForm.AVAILABLE_LANGUAGES - 1)
				{
					var otherKnownLanguage:LanguageKnowledgeBox=new LanguageKnowledgeBox();
					otherKnownLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedKnown);
					knownLanguagesBox.addElement(otherKnownLanguage);
					knownLanguagesArray.addItem(otherKnownLanguage);
				}
			}

			protected function addAnotherInterestLang_clickHandler(event:MouseEvent):void
			{
				if (interestLanguagesArray.length < SignUpForm.AVAILABLE_LANGUAGES - 1)
				{
					var otherInterestLanguage:LanguageKnowledgeBox=new LanguageKnowledgeBox();
					otherInterestLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageKnowledgeBoxCreatedInterest);
					interestLanguagesBox.addElement(otherInterestLanguage);
					interestLanguagesArray.addItem(otherInterestLanguage);
				}
			}

			protected function addAnotherMotherLang_clickHandler(event:MouseEvent):void
			{
				if (motherLanguagesArray.length < SignUpForm.AVAILABLE_LANGUAGES - 1)
				{
					var otherMotherLanguage:LanguageComboBox=new LanguageComboBox();
					otherMotherLanguage.addEventListener(FlexEvent.CREATION_COMPLETE, languageComboBoxCreated);
					motherLanguagesBox.addElement(otherMotherLanguage);
					motherLanguagesArray.addItem(otherMotherLanguage);
				}
			}

			protected function resetToInitialStatus():void
			{
				username.text='';
				email.text='';
				password.text='';
				repassword.text='';
				realName.text='';
				surname.text='';

				if (errorMessageToolTips.hasOwnProperty(username.name))
					ToolTipManager.destroyToolTip(errorMessageToolTips[username.name] as ToolTip);
				if (errorMessageToolTips.hasOwnProperty(email.name))
					ToolTipManager.destroyToolTip(errorMessageToolTips[email.name] as ToolTip);
				if (errorMessageToolTips.hasOwnProperty(password.name))
					ToolTipManager.destroyToolTip(errorMessageToolTips[password.name] as ToolTip);
				if (errorMessageToolTips.hasOwnProperty(repassword.name))
					ToolTipManager.destroyToolTip(errorMessageToolTips[repassword.name] as ToolTip);
				errorMessageToolTips=null;
				errorMessageToolTips=new Array();


				removeAllChildrenFromComponent(motherLanguagesBox);
				removeAllChildrenFromComponent(knownLanguagesBox);
				removeAllChildrenFromComponent(interestLanguagesBox);
				motherLanguagesArray.removeAll();
				knownLanguagesArray.removeAll();
				interestLanguagesArray.removeAll();

				addInitialComboboxes();
			}

			protected function removeAllChildrenFromComponent(component:Group):void
			{
				for (var i:uint=0; i < component.numElements; i++)
					component.removeElementAt(i);
			}

			protected function set onTabChange(value:Boolean):void
			{
				resetToInitialStatus();
			}


			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				resetToInitialStatus();
				new ViewChangeEvent(ViewChangeEvent.VIEW_HOME_MODULE).dispatch();
			}
		]]>
	</fx:Script>

	<fx:Binding source="{DataModel.getInstance().stopVideoFlag}"
				destination="onTabChange"/>

	<s:BorderContainer styleName="sectionInfoBox"
					   width="100%"
					   minHeight="0">
		<s:layout>
			<s:VerticalLayout paddingTop="16"
							  paddingBottom="16"
							  paddingLeft="16"
							  paddingRight="16"/>
		</s:layout>
		<s:Label text="{resourceManager.getString('myResources','MESSAGE_SIGN_UP')}"
				 styleName="sectionInfoTitleLabel"/>
		<mx:Text text="Enter section description here."/>
	</s:BorderContainer>


	<s:Label id="errorInfo"
			 styleName="errorLabel"
			 width="100%"
			 text="{DataModel.getInstance().registrationErrorMessage}"/>
	<s:VGroup width="100%"
			  horizontalAlign="center"
			  styleName="padding20AllSidesBox">

		<mx:Form styleName="roundedBlueBorderBox"
				 width="100%"
				 labelWidth="200">
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_USER_NAME')}"
						 styleName="boldLabel"
						 required="true">
				<s:HGroup>
					<s:TextInput id="username"
								 maxChars="20"
								 change="FieldValidator.validateTextInput(errorMessageToolTips, username, 'USERNAME', FieldValidator.FIELD_PATTERN, true, true, true, false, 4, 20)"
								 focusOut="FieldValidator.validateTextInput(errorMessageToolTips, username, 'USERNAME', FieldValidator.FIELD_PATTERN, true, true, true, false, 4, 20)"/>
				</s:HGroup>

			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_EMAIL')}"
						 styleName="boldLabel"
						 required="true">
				<s:HGroup>
					<s:TextInput id="email"
								 maxChars="80"
								 change="FieldValidator.validateTextInput(errorMessageToolTips, email, 'EMAIL',FieldValidator.MAIL_PATTERN_LAX, false, false)"
								 focusOut="FieldValidator.validateTextInput(errorMessageToolTips, email,'EMAIL',FieldValidator.MAIL_PATTERN_LAX, false, false)"/>
				</s:HGroup>
			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_PASSWORD')}"
						 styleName="boldLabel"
						 required="true">
				<s:HGroup>
					<s:TextInput id="password"
								 displayAsPassword="true"
								 maxChars="40"
								 change="FieldValidator.validateTextInput(errorMessageToolTips, password, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40)"
								 focusOut="FieldValidator.validateTextInput(errorMessageToolTips, password, 'PASSWORD', FieldValidator.ANY_PATTERN, true, true, true, false, 6, 40)"/>
				</s:HGroup>

			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_REPASSWORD')}"
						 styleName="boldLabel"
						 required="true">
				<s:HGroup>
					<s:TextInput id="repassword"
								 displayAsPassword="true"
								 maxChars="40"
								 change="FieldValidator.validateTextInput(errorMessageToolTips, repassword, 'REPASSWORD', FieldValidator.ANY_PATTERN, false, false, false, true, 1, 200, password.text)"
								 focusOut="FieldValidator.validateTextInput(errorMessageToolTips, repassword, 'REPASSWORD', FieldValidator.ANY_PATTERN, false, false, false, true, 1, 200, password.text)"/>
				</s:HGroup>

			</mx:FormItem>
			<mx:Spacer/>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_REAL_NAME')}"
						 styleName="boldLabel">
				<s:TextInput id="realName"
							 width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_REAL_SURNAME')}"
						 styleName="boldLabel">
				<s:TextInput id="surname"
							 width="100%"/>
			</mx:FormItem>
		</mx:Form>
		<mx:Form styleName="roundedBlueBorderBox"
				 width="100%">
			<s:Label text="{resourceManager.getString('myResources','MESSAGE_MAIN_LANGUAGE')}"/>
			<mx:Spacer/>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_FIRST_LANGUAGE')}"
						 styleName="boldLabel"
						 required="true">
				<s:HGroup>
					<s:VGroup id="motherLanguagesBox">
					</s:VGroup>
					<mx:LinkButton id="addAnotherMotherLang"
								   click="addAnotherMotherLang_clickHandler(event)"
								   label="{resourceManager.getString('myResources','BUTTON_ADD_ANOTHER')}"
								   textDecoration="underline"
								   paddingLeft="6"
								   paddingRight="6"
								   icon="@Embed(source='../../resources/images/add.png')"/>
				</s:HGroup>
			</mx:FormItem>
			<mx:Spacer/>
			<s:Label text="{resourceManager.getString('myResources','MESSAGE_OTHER_LANGUAGE')}"/>
			<mx:Spacer/>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_OTHER_LANGUAGES')}"
						 styleName="boldLabel">
				<s:HGroup>
					<s:VGroup id="knownLanguagesBox">
					</s:VGroup>
					<mx:LinkButton id="addAnotherKnownLang"
								   click="addAnotherKnownLang_clickHandler(event)"
								   label="{resourceManager.getString('myResources','BUTTON_ADD_ANOTHER')}"
								   textDecoration="underline"
								   paddingLeft="6"
								   paddingRight="6"
								   icon="@Embed(source='../../resources/images/add.png')"/>
				</s:HGroup>
			</mx:FormItem>
			<mx:Spacer/>
			<s:Label text="{resourceManager.getString('myResources','MESSAGE_PRACTICE_LANGUAGE')}"/>
			<mx:Spacer/>
			<mx:FormItem label="{resourceManager.getString('myResources','LABEL_INTEREST_LANGUAGES')}"
						 styleName="boldLabel">
				<s:HGroup>
					<s:VGroup id="interestLanguagesBox">
					</s:VGroup>
					<mx:LinkButton id="addAnotherInterestLang"
								   click="addAnotherInterestLang_clickHandler(event)"
								   label="{resourceManager.getString('myResources','BUTTON_ADD_ANOTHER')}"
								   textDecoration="underline"
								   paddingLeft="6"
								   paddingRight="6"
								   icon="@Embed(source='../../resources/images/add.png')"/>
				</s:HGroup>
			</mx:FormItem>
		</mx:Form>
		<mx:Spacer/>
		<s:HGroup width="100%"
				  styleName="hvCenteredBox">
			<s:Button id="saveButton"
					  label="{resourceManager.getString('myResources','LABEL_SIGN_UP')}"
					  click="processNewUser()"/>
			<!-- icon="@Embed(source='../../resources/images/save.png')" -->

			<s:Button id="cancelButton"
					  label="{resourceManager.getString('myResources','BUTTON_CANCEL')}"
					  click="cancelButton_clickHandler(event)"/>
			<!--  icon="@Embed(source='../../resources/images/cancel.png')" -->

		</s:HGroup>
	</s:VGroup>

</s:VGroup>
