<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21" 
                   alpha.disabledStates="0.5">
	<fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>
    
    <!-- host component -->
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			var cr:Number=getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
				cornerRadius=cr;
			}
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private var cornerRadius:Number=2;
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up"/>
		<s:State name="over"
				 stateGroups="overStates"/>
		<s:State name="down"
				 stateGroups="downStates"/>
		<s:State name="disabled"
				 stateGroups="disabledStates"/>
		<s:State name="upAndSelected"
				 stateGroups="selectedStates, selectedUpStates"/>
		<s:State name="overAndSelected"
				 stateGroups="overStates, selectedStates"/>
		<s:State name="downAndSelected"
				 stateGroups="downStates, selectedStates"/>
		<s:State name="disabledAndSelected"
				 stateGroups="selectedUpStates, disabledStates, selectedStates"/>
	</s:states>
	
	<!-- layer 2: fill -->
	<!--- @private -->
	<s:Rect id="fill"
			left="0"
			right="0"
			top="0"
			bottom="0"
			radiusX="0">
		<s:fill>
			<s:SolidColor color="0xFFFFFF"
						  color.selectedUpStates="0x90ADBA"
						  color.overStates="0x90ADBA"
						  color.downStates="0x48788A"
						  alpha.up="0"
						  alpha.overAndSelected="1"/>
			
		</s:fill>
	</s:Rect>
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 verticalAlign="middle"
			 maxDisplayedLines="1"
			 horizontalCenter="0"
			 verticalCenter="1"
			 left="10"
			 right="10"
			 top="2"
			 bottom="2"
			 fontWeight="bold"
			 fontSize="16"
			 color="0x90ADBA"
			 color.selectedUpStates="0xF4F7F7"
			 color.overStates="0xF4F7F7"
			 color.downStates="0xF4F7F7">
	</s:Label>
    
</s:SparkButtonSkin>
