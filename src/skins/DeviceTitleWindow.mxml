<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark TitleWindow container.

	 @see spark.skins.spark.TitleWindowCloseButtonSkin
	 @see spark.components.TitleWindow

	 @langversion 3.0
	 @playerversion Flash 10
	 @playerversion AIR 1.5
	 @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 blendMode="normal"
			 mouseEnabled="false"
			 minWidth="76"
			 minHeight="76"
			 alpha.disabled="0.5"
			 alpha.disabledWithControlBar="0.5">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.TitleWindow")]
        ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.FlexVersion;

			/* Define the skin elements that should not be colorized.
			For panel, border and title background are skinned, but the content area, background, border, and title text are not. */
			static private const exclusions:Array=["titleDisplay"];

			/* exclusions before Flex 4.5 for backwards-compatibility purposes */
			static private const exclusions_4_0:Array=["titleDisplay"];

			/**
			 * @private
			 */
			override public function get colorizeExclusions():Array
			{
				// Since border is styleable via borderColor, no need to allow chromeColor to affect
				// the border.  This is wrapped in a compatibility flag since this change was added  
				// in Flex 4.5
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
				{
					return exclusions_4_0;
				}

				return exclusions;
			}

			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor=true;
				super.initializationComplete();
			}

			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == true)
				{
					border.visible=true;
					background.left=background.top=background.right=background.bottom=1;
					contents.left=contents.top=contents.right=contents.bottom=1;
				}
				else
				{
					border.visible=false;
					background.left=background.top=background.right=background.bottom=0;
					contents.left=contents.top=contents.right=contents.bottom=0;
				}

				dropShadow.visible=getStyle("dropShadowVisible");

				var cr:Number=getStyle("cornerRadius");
				var withControls:Boolean=(currentState == "disabledWithControlBar" || currentState == "normalWithControlBar" || currentState == "inactiveWithControlBar");

				if (cornerRadius != cr)
				{
					cornerRadius=cr;

					dropShadow.tlRadius=cornerRadius;
					dropShadow.trRadius=cornerRadius;
					dropShadow.blRadius=withControls ? cornerRadius : 0;
					dropShadow.brRadius=withControls ? cornerRadius : 0;

					setPartCornerRadii(border, withControls);
					setPartCornerRadii(background, withControls);
				}

				//borderStroke.color=getStyle("borderColor");
				//borderStroke.alpha=getStyle("borderAlpha");
				//backgroundFill.color=getStyle("backgroundColor");
				//backgroundFill.alpha=getStyle("backgroundAlpha");

				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}

			/**
			 * @private
			 */
			private function setPartCornerRadii(target:Rect, includeBottom:Boolean):void
			{
				target.topLeftRadiusX=cornerRadius;
				target.topRightRadiusX=cornerRadius;
				target.bottomLeftRadiusX=includeBottom ? cornerRadius : 0;
				target.bottomRightRadiusX=includeBottom ? cornerRadius : 0;
			}

			private var cornerRadius:Number;
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="inactive"
				 stateGroups="inactiveGroup"/>
		<s:State name="disabled"/>
		<s:State name="normalWithControlBar"
				 stateGroups="withControls"/>
		<s:State name="inactiveWithControlBar"
				 stateGroups="withControls, inactiveGroup"/>
		<s:State name="disabledWithControlBar"
				 stateGroups="withControls"/>
	</s:states>

	<!--- drop shadow can't be hittable so it stays sibling of other graphics @private-->
	<s:RectangularDropShadow id="dropShadow"
							 blurX="10"
							 blurY="10"
							 alpha="0.32"
							 alpha.inactiveGroup="0.22"
							 distance="4"
							 distance.inactiveGroup="7"
							 angle="90"
							 color="0x000000"
							 left="0"
							 top="0"
							 right="0"
							 bottom="0"/>
	
	<!--- drop shadow can't be hittable so all other graphics go in this group -->
	<s:Group left="0"
			 right="0"
			 top="0"
			 bottom="0">

		<!--- layer 1: border @private -->
		<s:Rect id="border"
				left="0"
				right="0"
				top="0"
				bottom="0">
			<s:stroke>
				<!--- Defines the TitleWindowSkin class's border stroke. The default value is 1. -->
				<s:SolidColorStroke id="borderStroke"
									weight="1"
									color="#131313"
									alpha="1"/>
			</s:stroke>
		</s:Rect>

		<!-- layer 2: background fill -->
		<!--- Defines the appearance of the TitleWindowSkin class's background. -->
		<s:Rect id="background"
				left="1"
				top="1"
				right="1"
				bottom="1">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="#fdfffc" alpha="1"/>
					<s:GradientEntry color="#f5f9f0" alpha="1"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>	
		
		<!-- layer 3: contents -->
		<!--- Contains the vertical stack of title bar content and control bar. -->
		<s:Group left="1" right="1" top="1" bottom="1" id="contents">
			<s:layout>
				<s:VerticalLayout gap="0" horizontalAlign="justify" />
			</s:layout>
			
			<!--
			Note: setting the minimum size to 0 here so that changes to the host component's
			size will not be thwarted by this skin part's minimum size.   This is a compromise,
			more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
			-->
			<!--- @copy spark.components.SkinnableContainer#contentGroup -->
			<s:Group id="contentGroup" width="100%" height="100%" minWidth="0" minHeight="0">
			</s:Group>
		</s:Group>
		
		
	</s:Group>
</s:SparkSkin>
